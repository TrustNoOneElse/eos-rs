/* automatically generated by rust-bindgen 0.68.1 */

pub const EOS_USE_DLLEXPORT : u32 = 0 ; pub const _STDINT_H : u32 = 1 ; pub const _FEATURES_H : u32 = 1 ; pub const _ISOC95_SOURCE : u32 = 1 ; pub const _ISOC99_SOURCE : u32 = 1 ; pub const _ISOC11_SOURCE : u32 = 1 ; pub const _ISOC2X_SOURCE : u32 = 1 ; pub const _POSIX_SOURCE : u32 = 1 ; pub const _POSIX_C_SOURCE : u32 = 200809 ; pub const _XOPEN_SOURCE : u32 = 700 ; pub const _XOPEN_SOURCE_EXTENDED : u32 = 1 ; pub const _LARGEFILE64_SOURCE : u32 = 1 ; pub const _DEFAULT_SOURCE : u32 = 1 ; pub const _ATFILE_SOURCE : u32 = 1 ; pub const _DYNAMIC_STACK_SIZE_SOURCE : u32 = 1 ; pub const __GLIBC_USE_ISOC2X : u32 = 1 ; pub const __USE_ISOC11 : u32 = 1 ; pub const __USE_ISOC99 : u32 = 1 ; pub const __USE_ISOC95 : u32 = 1 ; pub const __USE_ISOCXX11 : u32 = 1 ; pub const __USE_POSIX : u32 = 1 ; pub const __USE_POSIX2 : u32 = 1 ; pub const __USE_POSIX199309 : u32 = 1 ; pub const __USE_POSIX199506 : u32 = 1 ; pub const __USE_XOPEN2K : u32 = 1 ; pub const __USE_XOPEN2K8 : u32 = 1 ; pub const __USE_XOPEN : u32 = 1 ; pub const __USE_XOPEN_EXTENDED : u32 = 1 ; pub const __USE_UNIX98 : u32 = 1 ; pub const _LARGEFILE_SOURCE : u32 = 1 ; pub const __USE_XOPEN2K8XSI : u32 = 1 ; pub const __USE_XOPEN2KXSI : u32 = 1 ; pub const __USE_LARGEFILE : u32 = 1 ; pub const __USE_LARGEFILE64 : u32 = 1 ; pub const __WORDSIZE : u32 = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : u32 = 1 ; pub const __SYSCALL_WORDSIZE : u32 = 64 ; pub const __TIMESIZE : u32 = 64 ; pub const __USE_MISC : u32 = 1 ; pub const __USE_ATFILE : u32 = 1 ; pub const __USE_DYNAMIC_STACK_SIZE : u32 = 1 ; pub const __USE_GNU : u32 = 1 ; pub const __USE_FORTIFY_LEVEL : u32 = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : u32 = 1 ; pub const __GLIBC_USE_DEPRECATED_SCANF : u32 = 0 ; pub const _STDC_PREDEF_H : u32 = 1 ; pub const __STDC_IEC_559__ : u32 = 1 ; pub const __STDC_IEC_60559_BFP__ : u32 = 201404 ; pub const __STDC_IEC_559_COMPLEX__ : u32 = 1 ; pub const __STDC_IEC_60559_COMPLEX__ : u32 = 201404 ; pub const __STDC_ISO_10646__ : u32 = 201706 ; pub const __GNU_LIBRARY__ : u32 = 6 ; pub const __GLIBC__ : u32 = 2 ; pub const __GLIBC_MINOR__ : u32 = 35 ; pub const _SYS_CDEFS_H : u32 = 1 ; pub const __glibc_c99_flexarr_available : u32 = 1 ; pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI : u32 = 0 ; pub const __HAVE_GENERIC_SELECTION : u32 = 0 ; pub const __GLIBC_USE_LIB_EXT2 : u32 = 1 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT : u32 = 1 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X : u32 = 1 ; pub const __GLIBC_USE_IEC_60559_EXT : u32 = 1 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT : u32 = 1 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X : u32 = 1 ; pub const __GLIBC_USE_IEC_60559_TYPES_EXT : u32 = 1 ; pub const _BITS_TYPES_H : u32 = 1 ; pub const _BITS_TYPESIZES_H : u32 = 1 ; pub const __OFF_T_MATCHES_OFF64_T : u32 = 1 ; pub const __INO_T_MATCHES_INO64_T : u32 = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : u32 = 1 ; pub const __STATFS_MATCHES_STATFS64 : u32 = 1 ; pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 : u32 = 1 ; pub const __FD_SETSIZE : u32 = 1024 ; pub const _BITS_TIME64_H : u32 = 1 ; pub const _BITS_WCHAR_H : u32 = 1 ; pub const _BITS_STDINT_INTN_H : u32 = 1 ; pub const _BITS_STDINT_UINTN_H : u32 = 1 ; pub const INT8_MIN : i32 = - 128 ; pub const INT16_MIN : i32 = - 32768 ; pub const INT32_MIN : i32 = - 2147483648 ; pub const INT8_MAX : u32 = 127 ; pub const INT16_MAX : u32 = 32767 ; pub const INT32_MAX : u32 = 2147483647 ; pub const UINT8_MAX : u32 = 255 ; pub const UINT16_MAX : u32 = 65535 ; pub const UINT32_MAX : u32 = 4294967295 ; pub const INT_LEAST8_MIN : i32 = - 128 ; pub const INT_LEAST16_MIN : i32 = - 32768 ; pub const INT_LEAST32_MIN : i32 = - 2147483648 ; pub const INT_LEAST8_MAX : u32 = 127 ; pub const INT_LEAST16_MAX : u32 = 32767 ; pub const INT_LEAST32_MAX : u32 = 2147483647 ; pub const UINT_LEAST8_MAX : u32 = 255 ; pub const UINT_LEAST16_MAX : u32 = 65535 ; pub const UINT_LEAST32_MAX : u32 = 4294967295 ; pub const INT_FAST8_MIN : i32 = - 128 ; pub const INT_FAST16_MIN : i64 = - 9223372036854775808 ; pub const INT_FAST32_MIN : i64 = - 9223372036854775808 ; pub const INT_FAST8_MAX : u32 = 127 ; pub const INT_FAST16_MAX : u64 = 9223372036854775807 ; pub const INT_FAST32_MAX : u64 = 9223372036854775807 ; pub const UINT_FAST8_MAX : u32 = 255 ; pub const UINT_FAST16_MAX : i32 = - 1 ; pub const UINT_FAST32_MAX : i32 = - 1 ; pub const INTPTR_MIN : i64 = - 9223372036854775808 ; pub const INTPTR_MAX : u64 = 9223372036854775807 ; pub const UINTPTR_MAX : i32 = - 1 ; pub const PTRDIFF_MIN : i64 = - 9223372036854775808 ; pub const PTRDIFF_MAX : u64 = 9223372036854775807 ; pub const SIG_ATOMIC_MIN : i32 = - 2147483648 ; pub const SIG_ATOMIC_MAX : u32 = 2147483647 ; pub const SIZE_MAX : i32 = - 1 ; pub const WINT_MIN : u32 = 0 ; pub const WINT_MAX : u32 = 4294967295 ; pub const INT8_WIDTH : u32 = 8 ; pub const UINT8_WIDTH : u32 = 8 ; pub const INT16_WIDTH : u32 = 16 ; pub const UINT16_WIDTH : u32 = 16 ; pub const INT32_WIDTH : u32 = 32 ; pub const UINT32_WIDTH : u32 = 32 ; pub const INT64_WIDTH : u32 = 64 ; pub const UINT64_WIDTH : u32 = 64 ; pub const INT_LEAST8_WIDTH : u32 = 8 ; pub const UINT_LEAST8_WIDTH : u32 = 8 ; pub const INT_LEAST16_WIDTH : u32 = 16 ; pub const UINT_LEAST16_WIDTH : u32 = 16 ; pub const INT_LEAST32_WIDTH : u32 = 32 ; pub const UINT_LEAST32_WIDTH : u32 = 32 ; pub const INT_LEAST64_WIDTH : u32 = 64 ; pub const UINT_LEAST64_WIDTH : u32 = 64 ; pub const INT_FAST8_WIDTH : u32 = 8 ; pub const UINT_FAST8_WIDTH : u32 = 8 ; pub const INT_FAST16_WIDTH : u32 = 64 ; pub const UINT_FAST16_WIDTH : u32 = 64 ; pub const INT_FAST32_WIDTH : u32 = 64 ; pub const UINT_FAST32_WIDTH : u32 = 64 ; pub const INT_FAST64_WIDTH : u32 = 64 ; pub const UINT_FAST64_WIDTH : u32 = 64 ; pub const INTPTR_WIDTH : u32 = 64 ; pub const UINTPTR_WIDTH : u32 = 64 ; pub const INTMAX_WIDTH : u32 = 64 ; pub const UINTMAX_WIDTH : u32 = 64 ; pub const PTRDIFF_WIDTH : u32 = 64 ; pub const SIG_ATOMIC_WIDTH : u32 = 32 ; pub const SIZE_WIDTH : u32 = 64 ; pub const WCHAR_WIDTH : u32 = 32 ; pub const WINT_WIDTH : u32 = 32 ; pub const EOS_TRUE : u32 = 1 ; pub const EOS_FALSE : u32 = 0 ; pub const EOS_EPICACCOUNTID_MAX_LENGTH : u32 = 32 ; pub const EOS_PRODUCTUSERID_MAX_LENGTH : u32 = 32 ; pub const EOS_PAGEQUERY_API_LATEST : u32 = 1 ; pub const EOS_PAGINATION_API_LATEST : u32 = 1 ; pub const EOS_PAGEQUERY_MAXCOUNT_DEFAULT : u32 = 10 ; pub const EOS_PAGEQUERY_MAXCOUNT_MAXIMUM : u32 = 100 ; pub const EOS_OPT_Unknown : u32 = 0 ; pub const EOS_OPT_Epic : u32 = 100 ; pub const EOS_OPT_Steam : u32 = 4000 ; pub const EOS_IPT_Steam : & [u8 ; 6] = b"STEAM\0" ; pub const EOS_INTEGRATEDPLATFORM_OPTIONS_API_LATEST : u32 = 1 ; pub const EOS_INTEGRATEDPLATFORM_STEAM_OPTIONS_API_LATEST : u32 = 2 ; pub const EOS_INTEGRATEDPLATFORM_CREATEINTEGRATEDPLATFORMOPTIONSCONTAINER_API_LATEST : u32 = 1 ; pub const EOS_INTEGRATEDPLATFORMOPTIONSCONTAINER_ADD_API_LATEST : u32 = 1 ; pub const EOS_INTEGRATEDPLATFORM_SETUSERLOGINSTATUS_API_LATEST : u32 = 1 ; pub const EOS_INTEGRATEDPLATFORM_ADDNOTIFYUSERLOGINSTATUSCHANGED_API_LATEST : u32 = 1 ; pub const EOS_INTEGRATEDPLATFORM_SETUSERPRELOGOUTCALLBACK_API_LATEST : u32 = 1 ; pub const EOS_INTEGRATEDPLATFORM_CLEARUSERPRELOGOUTCALLBACK_API_LATEST : u32 = 1 ; pub const EOS_INTEGRATEDPLATFORM_FINALIZEDEFERREDUSERLOGOUT_API_LATEST : u32 = 1 ; pub const EOS_PLATFORM_CLIENTCREDENTIALS_CLIENTID_MAX_LENGTH : u32 = 64 ; pub const EOS_PLATFORM_CLIENTCREDENTIALS_CLIENTSECRET_MAX_LENGTH : u32 = 64 ; pub const EOS_PLATFORM_RTCOPTIONS_API_LATEST : u32 = 2 ; pub const EOS_COUNTRYCODE_MAX_LENGTH : u32 = 4 ; pub const EOS_COUNTRYCODE_MAX_BUFFER_LEN : u32 = 5 ; pub const EOS_LOCALECODE_MAX_LENGTH : u32 = 9 ; pub const EOS_LOCALECODE_MAX_BUFFER_LEN : u32 = 10 ; pub const EOS_PLATFORM_OPTIONS_API_LATEST : u32 = 13 ; pub const EOS_PF_LOADING_IN_EDITOR : u32 = 1 ; pub const EOS_PF_DISABLE_OVERLAY : u32 = 2 ; pub const EOS_PF_DISABLE_SOCIAL_OVERLAY : u32 = 4 ; pub const EOS_PF_RESERVED1 : u32 = 8 ; pub const EOS_PF_WINDOWS_ENABLE_OVERLAY_D3D9 : u32 = 16 ; pub const EOS_PF_WINDOWS_ENABLE_OVERLAY_D3D10 : u32 = 32 ; pub const EOS_PF_WINDOWS_ENABLE_OVERLAY_OPENGL : u32 = 64 ; pub const EOS_PF_CONSOLE_ENABLE_OVERLAY_AUTOMATIC_UNLOADING : u32 = 128 ; pub const EOS_PLATFORM_OPTIONS_PRODUCTID_MAX_LENGTH : u32 = 64 ; pub const EOS_PLATFORM_OPTIONS_SANDBOXID_MAX_LENGTH : u32 = 64 ; pub const EOS_PLATFORM_OPTIONS_ENCRYPTIONKEY_LENGTH : u32 = 64 ; pub const EOS_PLATFORM_OPTIONS_DEPLOYMENTID_MAX_LENGTH : u32 = 64 ; pub const EOS_PLATFORM_GETDESKTOPCROSSPLAYSTATUS_API_LATEST : u32 = 1 ; pub const EOS_PLATFORM_CHECKFORLAUNCHERANDRESTART_ENV_VAR : & [u8 ; 21] = b"EOS_LAUNCHED_BY_EPIC\0" ; pub const EOS_INITIALIZE_THREADAFFINITY_API_LATEST : u32 = 2 ; pub const EOS_INITIALIZE_API_LATEST : u32 = 4 ; pub const EOS_INITIALIZEOPTIONS_PRODUCTNAME_MAX_LENGTH : u32 = 64 ; pub const EOS_INITIALIZEOPTIONS_PRODUCTVERSION_MAX_LENGTH : u32 = 64 ; pub const EOS_METRICS_BEGINPLAYERSESSION_API_LATEST : u32 = 1 ; pub const EOS_METRICS_ENDPLAYERSESSION_API_LATEST : u32 = 1 ; pub const EOS_AUTH_ACCOUNTFEATURERESTRICTEDINFO_API_LATEST : u32 = 1 ; pub const EOS_AUTH_TOKEN_API_LATEST : u32 = 2 ; pub const EOS_AUTH_CREDENTIALS_API_LATEST : u32 = 4 ; pub const EOS_AUTH_PINGRANTINFO_API_LATEST : u32 = 2 ; pub const EOS_LF_NO_USER_INTERFACE : u32 = 1 ; pub const EOS_AUTH_LOGIN_API_LATEST : u32 = 3 ; pub const EOS_AUTH_LOGOUT_API_LATEST : u32 = 1 ; pub const EOS_AUTH_LINKACCOUNT_API_LATEST : u32 = 1 ; pub const EOS_AUTH_VERIFYUSERAUTH_API_LATEST : u32 = 1 ; pub const EOS_AUTH_COPYUSERAUTHTOKEN_API_LATEST : u32 = 1 ; pub const EOS_AUTH_COPYIDTOKEN_API_LATEST : u32 = 1 ; pub const EOS_AUTH_IDTOKEN_API_LATEST : u32 = 1 ; pub const EOS_AUTH_QUERYIDTOKEN_API_LATEST : u32 = 1 ; pub const EOS_AUTH_VERIFYIDTOKEN_API_LATEST : u32 = 1 ; pub const EOS_AUTH_ADDNOTIFYLOGINSTATUSCHANGED_API_LATEST : u32 = 1 ; pub const EOS_AUTH_DELETEPERSISTENTAUTH_API_LATEST : u32 = 2 ; pub const EOS_ECOM_ENTITLEMENT_API_LATEST : u32 = 2 ; pub const EOS_ECOM_ENTITLEMENT_ENDTIMESTAMP_UNDEFINED : i32 = - 1 ; pub const EOS_ECOM_ITEMOWNERSHIP_API_LATEST : u32 = 1 ; pub const EOS_ECOM_CATALOGITEM_API_LATEST : u32 = 1 ; pub const EOS_ECOM_CATALOGITEM_ENTITLEMENTENDTIMESTAMP_UNDEFINED : i32 = - 1 ; pub const EOS_ECOM_CATALOGOFFER_API_LATEST : u32 = 5 ; pub const EOS_ECOM_CATALOGOFFER_EXPIRATIONTIMESTAMP_UNDEFINED : i32 = - 1 ; pub const EOS_ECOM_CATALOGOFFER_RELEASEDATETIMESTAMP_UNDEFINED : i32 = - 1 ; pub const EOS_ECOM_CATALOGOFFER_EFFECTIVEDATETIMESTAMP_UNDEFINED : i32 = - 1 ; pub const EOS_ECOM_KEYIMAGEINFO_API_LATEST : u32 = 1 ; pub const EOS_ECOM_CATALOGRELEASE_API_LATEST : u32 = 1 ; pub const EOS_ECOM_CHECKOUTENTRY_API_LATEST : u32 = 1 ; pub const EOS_ECOM_QUERYOWNERSHIP_API_LATEST : u32 = 2 ; pub const EOS_ECOM_QUERYOWNERSHIP_MAX_CATALOG_IDS : u32 = 400 ; pub const EOS_ECOM_QUERYOWNERSHIPBYSANDBOXIDSOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_ECOM_QUERYOWNERSHIP_MAX_SANDBOX_IDS : u32 = 10 ; pub const EOS_ECOM_QUERYOWNERSHIPTOKEN_API_LATEST : u32 = 2 ; pub const EOS_ECOM_QUERYOWNERSHIPTOKEN_MAX_CATALOGITEM_IDS : u32 = 32 ; pub const EOS_ECOM_QUERYENTITLEMENTS_API_LATEST : u32 = 2 ; pub const EOS_ECOM_QUERYENTITLEMENTS_MAX_ENTITLEMENT_IDS : u32 = 256 ; pub const EOS_ECOM_QUERYENTITLEMENTTOKEN_API_LATEST : u32 = 1 ; pub const EOS_ECOM_QUERYENTITLEMENTTOKEN_MAX_ENTITLEMENT_IDS : u32 = 32 ; pub const EOS_ECOM_QUERYOFFERS_API_LATEST : u32 = 1 ; pub const EOS_ECOM_CHECKOUT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_CHECKOUT_MAX_ENTRIES : u32 = 10 ; pub const EOS_ECOM_TRANSACTIONID_MAXIMUM_LENGTH : u32 = 64 ; pub const EOS_ECOM_REDEEMENTITLEMENTS_API_LATEST : u32 = 2 ; pub const EOS_ECOM_REDEEMENTITLEMENTS_MAX_IDS : u32 = 32 ; pub const EOS_ECOM_ENTITLEMENTID_MAX_LENGTH : u32 = 32 ; pub const EOS_ECOM_GETLASTREDEEMEDENTITLEMENTSCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYLASTREDEEMEDENTITLEMENTBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_GETENTITLEMENTSCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_GETENTITLEMENTSBYNAMECOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYENTITLEMENTBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYENTITLEMENTBYNAMEANDINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYENTITLEMENTBYID_API_LATEST : u32 = 2 ; pub const EOS_ECOM_GETOFFERCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYOFFERBYINDEX_API_LATEST : u32 = 3 ; pub const EOS_ECOM_COPYOFFERBYID_API_LATEST : u32 = 3 ; pub const EOS_ECOM_GETOFFERITEMCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYOFFERITEMBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYITEMBYID_API_LATEST : u32 = 1 ; pub const EOS_ECOM_GETOFFERIMAGEINFOCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYOFFERIMAGEINFOBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_GETITEMIMAGEINFOCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYITEMIMAGEINFOBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_GETITEMRELEASECOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYITEMRELEASEBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_GETTRANSACTIONCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYTRANSACTIONBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ECOM_COPYTRANSACTIONBYID_API_LATEST : u32 = 1 ; pub const EOS_ECOM_TRANSACTION_GETENTITLEMENTSCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ECOM_TRANSACTION_COPYENTITLEMENTBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_UI_EVENTID_INVALID : u32 = 0 ; pub const EOS_UI_SHOWFRIENDS_API_LATEST : u32 = 1 ; pub const EOS_UI_HIDEFRIENDS_API_LATEST : u32 = 1 ; pub const EOS_UI_GETFRIENDSVISIBLE_API_LATEST : u32 = 1 ; pub const EOS_UI_GETFRIENDSEXCLUSIVEINPUT_API_LATEST : u32 = 1 ; pub const EOS_UI_ADDNOTIFYDISPLAYSETTINGSUPDATED_API_LATEST : u32 = 1 ; pub const EOS_UI_SETTOGGLEFRIENDSKEY_API_LATEST : u32 = 1 ; pub const EOS_UI_GETTOGGLEFRIENDSKEY_API_LATEST : u32 = 1 ; pub const EOS_UI_SETTOGGLEFRIENDSBUTTON_API_LATEST : u32 = 1 ; pub const EOS_UI_GETTOGGLEFRIENDSBUTTON_API_LATEST : u32 = 1 ; pub const EOS_UI_SETDISPLAYPREFERENCE_API_LATEST : u32 = 1 ; pub const EOS_UI_ACKNOWLEDGEEVENTID_API_LATEST : u32 = 1 ; pub const EOS_UI_ACKNOWLEDGECORRELATIONID_API_LATEST : u32 = 1 ; pub const EOS_UI_REPORTINPUTSTATE_API_LATEST : u32 = 2 ; pub const EOS_UI_PREPRESENT_API_LATEST : u32 = 1 ; pub const EOS_UI_SHOWBLOCKPLAYER_API_LATEST : u32 = 1 ; pub const EOS_UI_SHOWREPORTPLAYER_API_LATEST : u32 = 1 ; pub const EOS_UI_SHOWNATIVEPROFILE_API_LATEST : u32 = 1 ; pub const EOS_UI_PAUSESOCIALOVERLAY_API_LATEST : u32 = 1 ; pub const EOS_UI_ISSOCIALOVERLAYPAUSED_API_LATEST : u32 = 1 ; pub const EOS_UI_RECT_API_LATEST : u32 = 1 ; pub const EOS_UI_MEMORYMONITORCALLBACKINFO_API_LATEST : u32 = 1 ; pub const EOS_UI_ADDNOTIFYMEMORYMONITOR_API_LATEST : u32 = 1 ; pub const EOS_UI_ADDNOTIFYMEMORYMONITOROPTIONS_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_QUERYFRIENDS_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_SENDINVITE_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_ACCEPTINVITE_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_REJECTINVITE_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_GETFRIENDSCOUNT_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_GETFRIENDATINDEX_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_GETSTATUS_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_ADDNOTIFYFRIENDSUPDATE_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_GETBLOCKEDUSERSCOUNT_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_GETBLOCKEDUSERATINDEX_API_LATEST : u32 = 1 ; pub const EOS_FRIENDS_ADDNOTIFYBLOCKEDUSERSUPDATE_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_DATARECORD_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_INFO_API_LATEST : u32 = 3 ; pub const EOS_PRESENCE_QUERYPRESENCE_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_HASPRESENCE_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_COPYPRESENCE_API_LATEST : u32 = 3 ; pub const EOS_PRESENCE_CREATEPRESENCEMODIFICATION_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_SETPRESENCE_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_ADDNOTIFYONPRESENCECHANGED_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_ADDNOTIFYJOINGAMEACCEPTED_API_LATEST : u32 = 2 ; pub const EOS_PRESENCE_GETJOININFO_API_LATEST : u32 = 1 ; pub const EOS_PRESENCEMODIFICATION_SETJOININFO_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_DATA_MAX_KEYS : u32 = 32 ; pub const EOS_PRESENCE_DATA_MAX_KEY_LENGTH : u32 = 64 ; pub const EOS_PRESENCE_DATA_MAX_VALUE_LENGTH : u32 = 255 ; pub const EOS_PRESENCE_RICH_TEXT_MAX_VALUE_LENGTH : u32 = 255 ; pub const EOS_PRESENCE_KEY_PLATFORM_PRESENCE : & [u8 ; 21] = b"EOS_PlatformPresence\0" ; pub const EOS_PRESENCEMODIFICATION_SETSTATUS_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_SETSTATUS_API_LATEST : u32 = 1 ; pub const EOS_PRESENCEMODIFICATION_SETRAWRICHTEXT_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_SETRAWRICHTEXT_API_LATEST : u32 = 1 ; pub const EOS_PRESENCEMODIFICATION_SETDATA_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_SETDATA_API_LATEST : u32 = 1 ; pub const EOS_PRESENCEMODIFICATION_DATARECORDID_API_LATEST : u32 = 1 ; pub const EOS_PRESENCEMODIFICATION_DELETEDATA_API_LATEST : u32 = 1 ; pub const EOS_PRESENCE_DELETEDATA_API_LATEST : u32 = 1 ; pub const EOS_P2P_MAX_PACKET_SIZE : u32 = 1170 ; pub const EOS_P2P_MAX_CONNECTIONS : u32 = 32 ; pub const EOS_P2P_SOCKETID_API_LATEST : u32 = 1 ; pub const EOS_P2P_SOCKETID_SOCKETNAME_SIZE : u32 = 33 ; pub const EOS_P2P_SENDPACKET_API_LATEST : u32 = 3 ; pub const EOS_P2P_GETNEXTRECEIVEDPACKETSIZE_API_LATEST : u32 = 2 ; pub const EOS_P2P_RECEIVEPACKET_API_LATEST : u32 = 2 ; pub const EOS_P2P_ADDNOTIFYPEERCONNECTIONREQUEST_API_LATEST : u32 = 1 ; pub const EOS_P2P_ADDNOTIFYPEERCONNECTIONESTABLISHED_API_LATEST : u32 = 1 ; pub const EOS_P2P_ADDNOTIFYPEERCONNECTIONINTERRUPTED_API_LATEST : u32 = 1 ; pub const EOS_P2P_ADDNOTIFYPEERCONNECTIONCLOSED_API_LATEST : u32 = 1 ; pub const EOS_P2P_ACCEPTCONNECTION_API_LATEST : u32 = 1 ; pub const EOS_P2P_CLOSECONNECTION_API_LATEST : u32 = 1 ; pub const EOS_P2P_CLOSECONNECTIONS_API_LATEST : u32 = 1 ; pub const EOS_P2P_QUERYNATTYPE_API_LATEST : u32 = 1 ; pub const EOS_P2P_GETNATTYPE_API_LATEST : u32 = 1 ; pub const EOS_P2P_SETRELAYCONTROL_API_LATEST : u32 = 1 ; pub const EOS_P2P_GETRELAYCONTROL_API_LATEST : u32 = 1 ; pub const EOS_P2P_SETPORTRANGE_API_LATEST : u32 = 1 ; pub const EOS_P2P_GETPORTRANGE_API_LATEST : u32 = 1 ; pub const EOS_P2P_MAX_QUEUE_SIZE_UNLIMITED : u32 = 0 ; pub const EOS_P2P_SETPACKETQUEUESIZE_API_LATEST : u32 = 1 ; pub const EOS_P2P_GETPACKETQUEUEINFO_API_LATEST : u32 = 1 ; pub const EOS_P2P_ADDNOTIFYINCOMINGPACKETQUEUEFULL_API_LATEST : u32 = 1 ; pub const EOS_P2P_CLEARPACKETQUEUE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONMODIFICATION_MAX_SESSION_ATTRIBUTES : u32 = 64 ; pub const EOS_SESSIONMODIFICATION_MAX_SESSION_ATTRIBUTE_LENGTH : u32 = 64 ; pub const EOS_SESSIONMODIFICATION_MIN_SESSIONIDOVERRIDE_LENGTH : u32 = 16 ; pub const EOS_SESSIONMODIFICATION_MAX_SESSIONIDOVERRIDE_LENGTH : u32 = 64 ; pub const EOS_SESSIONS_CREATESESSIONMODIFICATION_API_LATEST : u32 = 5 ; pub const EOS_SESSIONS_UPDATESESSIONMODIFICATION_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_INVITEID_MAX_LENGTH : u32 = 64 ; pub const EOS_SESSIONS_SENDINVITE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_REJECTINVITE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_QUERYINVITES_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_GETINVITECOUNT_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_GETINVITEIDBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_CREATESESSIONSEARCH_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_UPDATESESSION_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_DESTROYSESSION_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_JOINSESSION_API_LATEST : u32 = 2 ; pub const EOS_SESSIONS_STARTSESSION_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ENDSESSION_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_REGISTERPLAYERS_API_LATEST : u32 = 3 ; pub const EOS_SESSIONS_UNREGISTERPLAYERS_API_LATEST : u32 = 2 ; pub const EOS_SESSIONMODIFICATION_SETBUCKETID_API_LATEST : u32 = 1 ; pub const EOS_SESSIONMODIFICATION_SETHOSTADDRESS_API_LATEST : u32 = 1 ; pub const EOS_SESSIONMODIFICATION_SETPERMISSIONLEVEL_API_LATEST : u32 = 1 ; pub const EOS_SESSIONMODIFICATION_SETJOININPROGRESSALLOWED_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_MAXREGISTEREDPLAYERS : u32 = 1000 ; pub const EOS_SESSIONMODIFICATION_SETMAXPLAYERS_API_LATEST : u32 = 1 ; pub const EOS_SESSIONMODIFICATION_SETINVITESALLOWED_API_LATEST : u32 = 1 ; pub const EOS_SESSIONMODIFICATION_SETALLOWEDPLATFORMIDS_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_SEARCH_BUCKET_ID : & [u8 ; 7] = b"bucket\0" ; pub const EOS_SESSIONS_SEARCH_EMPTY_SERVERS_ONLY : & [u8 ; 10] = b"emptyonly\0" ; pub const EOS_SESSIONS_SEARCH_NONEMPTY_SERVERS_ONLY : & [u8 ; 13] = b"nonemptyonly\0" ; pub const EOS_SESSIONS_SEARCH_MINSLOTSAVAILABLE : & [u8 ; 18] = b"minslotsavailable\0" ; pub const EOS_SESSIONS_ATTRIBUTEDATA_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_SESSIONATTRIBUTEDATA_API_LATEST : u32 = 1 ; pub const EOS_ACTIVESESSION_COPYINFO_API_LATEST : u32 = 1 ; pub const EOS_ACTIVESESSION_GETREGISTEREDPLAYERCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ACTIVESESSION_GETREGISTEREDPLAYERBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_SESSIONDETAILS_ATTRIBUTE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_SESSIONATTRIBUTE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONMODIFICATION_ADDATTRIBUTE_API_LATEST : u32 = 2 ; pub const EOS_SESSIONMODIFICATION_REMOVEATTRIBUTE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_MAX_SEARCH_RESULTS : u32 = 200 ; pub const EOS_SESSIONSEARCH_SETMAXSEARCHRESULTS_API_LATEST : u32 = 1 ; pub const EOS_SESSIONSEARCH_FIND_API_LATEST : u32 = 2 ; pub const EOS_SESSIONSEARCH_GETSEARCHRESULTCOUNT_API_LATEST : u32 = 1 ; pub const EOS_SESSIONSEARCH_COPYSEARCHRESULTBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_SESSIONSEARCH_SETSESSIONID_API_LATEST : u32 = 1 ; pub const EOS_SESSIONSEARCH_SETTARGETUSERID_API_LATEST : u32 = 1 ; pub const EOS_SESSIONSEARCH_SETPARAMETER_API_LATEST : u32 = 1 ; pub const EOS_SESSIONSEARCH_REMOVEPARAMETER_API_LATEST : u32 = 1 ; pub const EOS_SESSIONDETAILS_SETTINGS_API_LATEST : u32 = 4 ; pub const EOS_SESSIONDETAILS_INFO_API_LATEST : u32 = 2 ; pub const EOS_SESSIONDETAILS_COPYINFO_API_LATEST : u32 = 1 ; pub const EOS_SESSIONDETAILS_GETSESSIONATTRIBUTECOUNT_API_LATEST : u32 = 1 ; pub const EOS_SESSIONDETAILS_COPYSESSIONATTRIBUTEBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_SESSIONDETAILS_COPYSESSIONATTRIBUTEBYKEY_API_LATEST : u32 = 1 ; pub const EOS_ACTIVESESSION_INFO_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_COPYACTIVESESSIONHANDLE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ADDNOTIFYSESSIONINVITERECEIVED_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ADDNOTIFYSESSIONINVITEACCEPTED_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ADDNOTIFYSESSIONINVITEREJECTED_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ADDNOTIFYJOINSESSIONACCEPTED_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_COPYSESSIONHANDLEBYINVITEID_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_COPYSESSIONHANDLEBYUIEVENTID_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_COPYSESSIONHANDLEFORPRESENCE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ISUSERINSESSION_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_DUMPSESSIONSTATE_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ADDNOTIFYLEAVESESSIONREQUESTED_API_LATEST : u32 = 1 ; pub const EOS_SESSIONS_ADDNOTIFYSENDSESSIONNATIVEINVITEREQUESTED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_MAX_LOBBIES : u32 = 16 ; pub const EOS_LOBBY_MAX_LOBBY_MEMBERS : u32 = 64 ; pub const EOS_LOBBY_MAX_SEARCH_RESULTS : u32 = 200 ; pub const EOS_LOBBY_MIN_LOBBYIDOVERRIDE_LENGTH : u32 = 4 ; pub const EOS_LOBBY_MAX_LOBBYIDOVERRIDE_LENGTH : u32 = 60 ; pub const EOS_LOBBYMODIFICATION_MAX_ATTRIBUTES : u32 = 64 ; pub const EOS_LOBBYMODIFICATION_MAX_ATTRIBUTE_LENGTH : u32 = 64 ; pub const EOS_LOBBYDETAILS_INFO_API_LATEST : u32 = 3 ; pub const EOS_LOBBY_LOCALRTCOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_CREATELOBBY_API_LATEST : u32 = 9 ; pub const EOS_LOBBY_DESTROYLOBBY_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_JOINLOBBY_API_LATEST : u32 = 4 ; pub const EOS_LOBBY_JOINLOBBYBYID_API_LATEST : u32 = 2 ; pub const EOS_LOBBY_LEAVELOBBY_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_UPDATELOBBYMODIFICATION_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_UPDATELOBBY_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_PROMOTEMEMBER_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_KICKMEMBER_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_HARDMUTEMEMBER_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYLOBBYUPDATERECEIVED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYLOBBYMEMBERUPDATERECEIVED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYLOBBYMEMBERSTATUSRECEIVED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_INVITEID_MAX_LENGTH : u32 = 64 ; pub const EOS_LOBBY_ADDNOTIFYLOBBYINVITERECEIVED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYLOBBYINVITEACCEPTED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYJOINLOBBYACCEPTED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYLOBBYINVITEREJECTED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYSENDLOBBYNATIVEINVITEREQUESTED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_COPYLOBBYDETAILSHANDLEBYINVITEID_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_COPYLOBBYDETAILSHANDLEBYUIEVENTID_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_CREATELOBBYSEARCH_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_SENDINVITE_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_REJECTINVITE_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_QUERYINVITES_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_GETINVITECOUNT_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_GETINVITEIDBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_COPYLOBBYDETAILSHANDLE_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_GETRTCROOMNAME_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ISRTCROOMCONNECTED_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYRTCROOMCONNECTIONCHANGED_API_LATEST : u32 = 2 ; pub const EOS_LOBBY_SEARCH_BUCKET_ID : & [u8 ; 7] = b"bucket\0" ; pub const EOS_LOBBY_SEARCH_MINCURRENTMEMBERS : & [u8 ; 18] = b"mincurrentmembers\0" ; pub const EOS_LOBBY_SEARCH_MINSLOTSAVAILABLE : & [u8 ; 18] = b"minslotsavailable\0" ; pub const EOS_LOBBY_ATTRIBUTEDATA_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ATTRIBUTE_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_GETCONNECTSTRING_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_GETCONNECTSTRING_BUFFER_SIZE : u32 = 256 ; pub const EOS_LOBBY_PARSECONNECTSTRING_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_PARSECONNECTSTRING_BUFFER_SIZE : u32 = 256 ; pub const EOS_LOBBYMODIFICATION_SETBUCKETID_API_LATEST : u32 = 1 ; pub const EOS_LOBBYMODIFICATION_SETPERMISSIONLEVEL_API_LATEST : u32 = 1 ; pub const EOS_LOBBYMODIFICATION_SETMAXMEMBERS_API_LATEST : u32 = 1 ; pub const EOS_LOBBYMODIFICATION_SETINVITESALLOWED_API_LATEST : u32 = 1 ; pub const EOS_LOBBYMODIFICATION_ADDATTRIBUTE_API_LATEST : u32 = 2 ; pub const EOS_LOBBYMODIFICATION_REMOVEATTRIBUTE_API_LATEST : u32 = 1 ; pub const EOS_LOBBYMODIFICATION_ADDMEMBERATTRIBUTE_API_LATEST : u32 = 2 ; pub const EOS_LOBBYMODIFICATION_REMOVEMEMBERATTRIBUTE_API_LATEST : u32 = 1 ; pub const EOS_LOBBYMODIFICATION_SETALLOWEDPLATFORMIDS_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_GETLOBBYOWNER_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_COPYINFO_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_GETATTRIBUTECOUNT_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_COPYATTRIBUTEBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_COPYATTRIBUTEBYKEY_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_GETMEMBERATTRIBUTECOUNT_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_COPYMEMBERATTRIBUTEBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_COPYMEMBERATTRIBUTEBYKEY_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_GETMEMBERCOUNT_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_GETMEMBERBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_FIND_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_SETLOBBYID_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_SETTARGETUSERID_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_SETPARAMETER_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_REMOVEPARAMETER_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_SETMAXRESULTS_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_GETSEARCHRESULTCOUNT_API_LATEST : u32 = 1 ; pub const EOS_LOBBYSEARCH_COPYSEARCHRESULTBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_COPYMEMBERINFO_API_LATEST : u32 = 1 ; pub const EOS_LOBBYDETAILS_MEMBERINFO_API_LATEST : u32 = 1 ; pub const EOS_LOBBY_ADDNOTIFYLEAVELOBBYREQUESTED_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_QUERYUSERINFO_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_QUERYUSERINFOBYDISPLAYNAME_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_QUERYUSERINFOBYEXTERNALACCOUNT_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_MAX_DISPLAYNAME_CHARACTERS : u32 = 16 ; pub const EOS_USERINFO_MAX_DISPLAYNAME_UTF8_LENGTH : u32 = 64 ; pub const EOS_USERINFO_COPYUSERINFO_API_LATEST : u32 = 3 ; pub const EOS_USERINFO_EXTERNALUSERINFO_API_LATEST : u32 = 2 ; pub const EOS_USERINFO_GETEXTERNALUSERINFOCOUNT_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_COPYEXTERNALUSERINFOBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_COPYEXTERNALUSERINFOBYACCOUNTTYPE_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_COPYEXTERNALUSERINFOBYACCOUNTID_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_BESTDISPLAYNAME_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_COPYBESTDISPLAYNAME_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_COPYBESTDISPLAYNAMEWITHPLATFORM_API_LATEST : u32 = 1 ; pub const EOS_USERINFO_GETLOCALPLATFORMTYPE_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_FILENAME_MAX_LENGTH_BYTES : u32 = 64 ; pub const EOS_PLAYERDATASTORAGE_TIME_UNDEFINED : i32 = - 1 ; pub const EOS_PLAYERDATASTORAGE_FILEMETADATA_API_LATEST : u32 = 3 ; pub const EOS_PLAYERDATASTORAGE_QUERYFILE_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_QUERYFILEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_QUERYFILELIST_API_LATEST : u32 = 2 ; pub const EOS_PLAYERDATASTORAGE_QUERYFILELISTOPTIONS_API_LATEST : u32 = 2 ; pub const EOS_PLAYERDATASTORAGE_GETFILEMETADATACOUNT_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_GETFILEMETADATACOUNTOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_COPYFILEMETADATAATINDEX_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_COPYFILEMETADATAATINDEXOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_COPYFILEMETADATABYFILENAME_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_COPYFILEMETADATABYFILENAMEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_DUPLICATEFILE_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_DUPLICATEFILEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_DELETEFILE_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_DELETEFILEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_READFILE_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_READFILEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_WRITEFILE_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_WRITEFILEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_DELETECACHE_API_LATEST : u32 = 1 ; pub const EOS_PLAYERDATASTORAGE_DELETECACHEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_FILENAME_MAX_LENGTH_BYTES : u32 = 64 ; pub const EOS_TITLESTORAGE_FILEMETADATA_API_LATEST : u32 = 2 ; pub const EOS_TITLESTORAGE_QUERYFILE_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_QUERYFILEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_QUERYFILELIST_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_QUERYFILELISTOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_GETFILEMETADATACOUNT_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_GETFILEMETADATACOUNTOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_COPYFILEMETADATAATINDEX_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_COPYFILEMETADATAATINDEXOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_COPYFILEMETADATABYFILENAME_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_COPYFILEMETADATABYFILENAMEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_READFILE_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_READFILEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_DELETECACHE_API_LATEST : u32 = 1 ; pub const EOS_TITLESTORAGE_DELETECACHEOPTIONS_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_EXTERNAL_ACCOUNT_ID_MAX_LENGTH : u32 = 256 ; pub const EOS_CONNECT_CREDENTIALS_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_USERLOGININFO_DISPLAYNAME_MAX_LENGTH : u32 = 32 ; pub const EOS_CONNECT_USERLOGININFO_API_LATEST : u32 = 2 ; pub const EOS_CONNECT_LOGIN_API_LATEST : u32 = 2 ; pub const EOS_CONNECT_CREATEUSER_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_LINKACCOUNT_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_UNLINKACCOUNT_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_CREATEDEVICEID_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_CREATEDEVICEID_DEVICEMODEL_MAX_LENGTH : u32 = 64 ; pub const EOS_CONNECT_DELETEDEVICEID_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_TRANSFERDEVICEIDACCOUNT_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_QUERYEXTERNALACCOUNTMAPPINGS_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_QUERYEXTERNALACCOUNTMAPPINGS_MAX_ACCOUNT_IDS : u32 = 128 ; pub const EOS_CONNECT_GETEXTERNALACCOUNTMAPPING_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_GETEXTERNALACCOUNTMAPPINGS_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_QUERYPRODUCTUSERIDMAPPINGS_API_LATEST : u32 = 2 ; pub const EOS_CONNECT_GETPRODUCTUSERIDMAPPING_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_GETPRODUCTUSEREXTERNALACCOUNTCOUNT_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_COPYPRODUCTUSEREXTERNALACCOUNTBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_COPYPRODUCTUSEREXTERNALACCOUNTBYACCOUNTTYPE_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_COPYPRODUCTUSEREXTERNALACCOUNTBYACCOUNTID_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_COPYPRODUCTUSERINFO_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_TIME_UNDEFINED : i32 = - 1 ; pub const EOS_CONNECT_EXTERNALACCOUNTINFO_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_ADDNOTIFYAUTHEXPIRATION_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_ONAUTHEXPIRATIONCALLBACK_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_ADDNOTIFYLOGINSTATUSCHANGED_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_IDTOKEN_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_COPYIDTOKEN_API_LATEST : u32 = 1 ; pub const EOS_CONNECT_VERIFYIDTOKEN_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_QUERYDEFINITIONS_API_LATEST : u32 = 3 ; pub const EOS_ACHIEVEMENTS_STATTHRESHOLDS_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_STATTHRESHOLD_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_PLAYERSTATINFO_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_DEFINITIONV2_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_GETACHIEVEMENTDEFINITIONCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_COPYACHIEVEMENTDEFINITIONV2BYINDEX_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_COPYDEFINITIONV2BYINDEX_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_COPYACHIEVEMENTDEFINITIONV2BYACHIEVEMENTID_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_COPYDEFINITIONV2BYACHIEVEMENTID_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_QUERYPLAYERACHIEVEMENTS_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_ACHIEVEMENT_UNLOCKTIME_UNDEFINED : i32 = - 1 ; pub const EOS_ACHIEVEMENTS_PLAYERACHIEVEMENT_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_GETPLAYERACHIEVEMENTCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_COPYPLAYERACHIEVEMENTBYINDEX_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_COPYPLAYERACHIEVEMENTBYACHIEVEMENTID_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_UNLOCKACHIEVEMENTS_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_ADDNOTIFYACHIEVEMENTSUNLOCKEDV2_API_LATEST : u32 = 2 ; pub const EOS_ACHIEVEMENTS_DEFINITION_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_COPYDEFINITIONBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_COPYDEFINITIONBYACHIEVEMENTID_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_UNLOCKEDACHIEVEMENT_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_GETUNLOCKEDACHIEVEMENTCOUNT_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_COPYUNLOCKEDACHIEVEMENTBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_COPYUNLOCKEDACHIEVEMENTBYACHIEVEMENTID_API_LATEST : u32 = 1 ; pub const EOS_ACHIEVEMENTS_ADDNOTIFYACHIEVEMENTSUNLOCKED_API_LATEST : u32 = 1 ; pub const EOS_STATS_INGESTDATA_API_LATEST : u32 = 1 ; pub const EOS_STATS_MAX_INGEST_STATS : u32 = 3000 ; pub const EOS_STATS_INGESTSTAT_API_LATEST : u32 = 3 ; pub const EOS_STATS_MAX_QUERY_STATS : u32 = 1000 ; pub const EOS_STATS_QUERYSTATS_API_LATEST : u32 = 3 ; pub const EOS_STATS_TIME_UNDEFINED : i32 = - 1 ; pub const EOS_STATS_STAT_API_LATEST : u32 = 1 ; pub const EOS_STATS_GETSTATSCOUNT_API_LATEST : u32 = 1 ; pub const EOS_STATS_GETSTATCOUNT_API_LATEST : u32 = 1 ; pub const EOS_STATS_COPYSTATBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_STATS_COPYSTATBYNAME_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_TIME_UNDEFINED : i32 = - 1 ; pub const EOS_LEADERBOARDS_QUERYLEADERBOARDDEFINITIONS_API_LATEST : u32 = 2 ; pub const EOS_LEADERBOARDS_DEFINITION_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_GETLEADERBOARDDEFINITIONCOUNT_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_COPYLEADERBOARDDEFINITIONBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_COPYLEADERBOARDDEFINITIONBYLEADERBOARDID_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_USERSCORESQUERYSTATINFO_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_QUERYLEADERBOARDUSERSCORES_API_LATEST : u32 = 2 ; pub const EOS_LEADERBOARDS_LEADERBOARDUSERSCORE_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_GETLEADERBOARDUSERSCORECOUNT_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_COPYLEADERBOARDUSERSCOREBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_COPYLEADERBOARDUSERSCOREBYUSERID_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_QUERYLEADERBOARDRANKS_API_LATEST : u32 = 2 ; pub const EOS_LEADERBOARDS_LEADERBOARDRECORD_API_LATEST : u32 = 2 ; pub const EOS_LEADERBOARDS_GETLEADERBOARDRECORDCOUNT_API_LATEST : u32 = 1 ; pub const EOS_LEADERBOARDS_COPYLEADERBOARDRECORDBYINDEX_API_LATEST : u32 = 2 ; pub const EOS_LEADERBOARDS_COPYLEADERBOARDRECORDBYUSERID_API_LATEST : u32 = 2 ; pub const EOS_MOD_IDENTIFIER_API_LATEST : u32 = 1 ; pub const EOS_MODS_INSTALLMOD_API_LATEST : u32 = 1 ; pub const EOS_MODS_UNINSTALLMOD_API_LATEST : u32 = 1 ; pub const EOS_MODS_ENUMERATEMODS_API_LATEST : u32 = 1 ; pub const EOS_MODS_COPYMODINFO_API_LATEST : u32 = 1 ; pub const EOS_MODS_MODINFO_API_LATEST : u32 = 1 ; pub const EOS_MODS_UPDATEMOD_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_SETCLIENTDETAILS_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_SETGAMESESSIONID_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_REGISTEREVENT_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_REGISTEREVENT_CUSTOMEVENTBASE : u32 = 268435456 ; pub const EOS_ANTICHEATCOMMON_REGISTEREVENT_MAX_PARAMDEFSCOUNT : u32 = 12 ; pub const EOS_ANTICHEATCOMMON_LOGEVENT_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_LOGEVENT_STRING_MAX_LENGTH : u32 = 39 ; pub const EOS_ANTICHEATCOMMON_LOGGAMEROUNDSTART_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_LOGGAMEROUNDEND_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERSPAWN_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERDESPAWN_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERREVIVE_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERTICK_API_LATEST : u32 = 2 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERUSEWEAPON_API_LATEST : u32 = 2 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERUSEWEAPON_WEAPONNAME_MAX_LENGTH : u32 = 16 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERUSEABILITY_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCOMMON_LOGPLAYERTAKEDAMAGE_API_LATEST : u32 = 3 ; pub const EOS_ANTICHEATCLIENT_ADDNOTIFYMESSAGETOSERVER_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_ADDNOTIFYMESSAGETOPEER_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_ADDNOTIFYPEERACTIONREQUIRED_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_ADDNOTIFYPEERAUTHSTATUSCHANGED_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_ADDNOTIFYCLIENTINTEGRITYVIOLATED_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_BEGINSESSION_API_LATEST : u32 = 3 ; pub const EOS_ANTICHEATCLIENT_ENDSESSION_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_ADDEXTERNALINTEGRITYCATALOG_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_RECEIVEMESSAGEFROMSERVER_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_GETPROTECTMESSAGEOUTPUTLENGTH_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_PROTECTMESSAGE_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_UNPROTECTMESSAGE_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_REGISTERPEER_MIN_AUTHENTICATIONTIMEOUT : u32 = 40 ; pub const EOS_ANTICHEATCLIENT_REGISTERPEER_MAX_AUTHENTICATIONTIMEOUT : u32 = 120 ; pub const EOS_ANTICHEATCLIENT_REGISTERPEER_API_LATEST : u32 = 3 ; pub const EOS_ANTICHEATCLIENT_UNREGISTERPEER_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_RECEIVEMESSAGEFROMPEER_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATCLIENT_POLLSTATUS_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_ADDNOTIFYMESSAGETOCLIENT_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_ADDNOTIFYCLIENTACTIONREQUIRED_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_ADDNOTIFYCLIENTAUTHSTATUSCHANGED_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_BEGINSESSION_MIN_REGISTERTIMEOUT : u32 = 10 ; pub const EOS_ANTICHEATSERVER_BEGINSESSION_MAX_REGISTERTIMEOUT : u32 = 120 ; pub const EOS_ANTICHEATSERVER_BEGINSESSION_API_LATEST : u32 = 3 ; pub const EOS_ANTICHEATSERVER_ENDSESSION_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_REGISTERCLIENT_API_LATEST : u32 = 2 ; pub const EOS_ANTICHEATSERVER_UNREGISTERCLIENT_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_RECEIVEMESSAGEFROMCLIENT_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_SETCLIENTNETWORKSTATE_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_GETPROTECTMESSAGEOUTPUTLENGTH_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_PROTECTMESSAGE_API_LATEST : u32 = 1 ; pub const EOS_ANTICHEATSERVER_UNPROTECTMESSAGE_API_LATEST : u32 = 1 ; pub const EOS_REPORTS_REPORTMESSAGE_MAX_LENGTH : u32 = 512 ; pub const EOS_REPORTS_REPORTCONTEXT_MAX_LENGTH : u32 = 4096 ; pub const EOS_REPORTS_SENDPLAYERBEHAVIORREPORT_API_LATEST : u32 = 2 ; pub const EOS_SANCTIONS_PLAYERSANCTION_API_LATEST : u32 = 2 ; pub const EOS_SANCTIONS_QUERYACTIVEPLAYERSANCTIONS_API_LATEST : u32 = 2 ; pub const EOS_SANCTIONS_GETPLAYERSANCTIONCOUNT_API_LATEST : u32 = 1 ; pub const EOS_SANCTIONS_COPYPLAYERSANCTIONBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_KWS_MAX_PERMISSIONS : u32 = 16 ; pub const EOS_KWS_MAX_PERMISSION_LENGTH : u32 = 32 ; pub const EOS_KWS_PERMISSIONSTATUS_API_LATEST : u32 = 1 ; pub const EOS_KWS_QUERYAGEGATE_API_LATEST : u32 = 1 ; pub const EOS_KWS_CREATEUSER_API_LATEST : u32 = 1 ; pub const EOS_KWS_QUERYPERMISSIONS_API_LATEST : u32 = 1 ; pub const EOS_KWS_UPDATEPARENTEMAIL_API_LATEST : u32 = 1 ; pub const EOS_KWS_REQUESTPERMISSIONS_API_LATEST : u32 = 1 ; pub const EOS_KWS_GETPERMISSIONSCOUNT_API_LATEST : u32 = 1 ; pub const EOS_KWS_COPYPERMISSIONBYINDEX_API_LATEST : u32 = 1 ; pub const EOS_KWS_GETPERMISSIONBYKEY_API_LATEST : u32 = 1 ; pub const EOS_KWS_ADDNOTIFYPERMISSIONSUPDATERECEIVED_API_LATEST : u32 = 1 ; pub const EOS_RTC_JOINROOM_API_LATEST : u32 = 1 ; pub const EOS_RTC_JOINROOMFLAGS_ENABLE_ECHO : u32 = 1 ; pub const EOS_RTC_JOINROOMFLAGS_ENABLE_DATACHANNEL : u32 = 4 ; pub const EOS_RTC_OPTION_KEY_MAXCHARCOUNT : u32 = 256 ; pub const EOS_RTC_OPTION_VALUE_MAXCHARCOUNT : u32 = 256 ; pub const EOS_RTC_OPTION_API_LATEST : u32 = 1 ; pub const EOS_RTC_LEAVEROOM_API_LATEST : u32 = 1 ; pub const EOS_RTC_BLOCKPARTICIPANT_API_LATEST : u32 = 1 ; pub const EOS_RTC_ADDNOTIFYDISCONNECTED_API_LATEST : u32 = 1 ; pub const EOS_RTC_PARTICIPANTMETADATA_KEY_MAXCHARCOUNT : u32 = 256 ; pub const EOS_RTC_PARTICIPANTMETADATA_VALUE_MAXCHARCOUNT : u32 = 256 ; pub const EOS_RTC_PARTICIPANTMETADATA_API_LATEST : u32 = 1 ; pub const EOS_RTC_ADDNOTIFYPARTICIPANTSTATUSCHANGED_API_LATEST : u32 = 1 ; pub const EOS_RTC_SETSETTING_API_LATEST : u32 = 1 ; pub const EOS_RTC_SETROOMSETTING_API_LATEST : u32 = 1 ; pub const EOS_RTC_ADDNOTIFYROOMSTATISTICSUPDATED_API_LATEST : u32 = 1 ; pub const EOS_RTCADMIN_QUERYJOINROOMTOKEN_API_LATEST : u32 = 2 ; pub const EOS_RTCADMIN_USERTOKEN_API_LATEST : u32 = 1 ; pub const EOS_RTCADMIN_COPYUSERTOKENBYINDEX_API_LATEST : u32 = 2 ; pub const EOS_RTCADMIN_COPYUSERTOKENBYUSERID_API_LATEST : u32 = 2 ; pub const EOS_RTCADMIN_KICK_API_LATEST : u32 = 1 ; pub const EOS_RTCADMIN_SETPARTICIPANTHARDMUTE_API_LATEST : u32 = 1 ; pub const EOS_INVALID_PROGRESSIONSNAPSHOTID : u32 = 0 ; pub const EOS_PROGRESSIONSNAPSHOT_BEGINSNAPSHOT_API_LATEST : u32 = 1 ; pub const EOS_PROGRESSIONSNAPSHOT_ADDPROGRESSION_API_LATEST : u32 = 1 ; pub const EOS_PROGRESSIONSNAPSHOT_SUBMITSNAPSHOT_API_LATEST : u32 = 1 ; pub const EOS_PROGRESSIONSNAPSHOT_ENDSNAPSHOT_API_LATEST : u32 = 1 ; pub const EOS_PROGRESSIONSNAPSHOT_DELETESNAPSHOT_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_MAX_PAYLOAD_LENGTH : u32 = 500 ; pub const EOS_CUSTOMINVITES_SETCUSTOMINVITE_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_SENDCUSTOMINVITE_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYCUSTOMINVITERECEIVED_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYCUSTOMINVITEACCEPTED_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYCUSTOMINVITEREJECTED_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_FINALIZEINVITE_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_SENDREQUESTTOJOIN_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYREQUESTTOJOINRESPONSERECEIVED_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYREQUESTTOJOINRECEIVED_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ACCEPTREQUESTTOJOIN_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_REJECTREQUESTTOJOIN_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYSENDCUSTOMNATIVEINVITEREQUESTED_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYREQUESTTOJOINACCEPTED_API_LATEST : u32 = 1 ; pub const EOS_CUSTOMINVITES_ADDNOTIFYREQUESTTOJOINREJECTED_API_LATEST : u32 = 1 ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __int_least8_t = __int8_t ; pub type __uint_least8_t = __uint8_t ; pub type __int_least16_t = __int16_t ; pub type __uint_least16_t = __uint16_t ; pub type __int_least32_t = __int32_t ; pub type __uint_least32_t = __uint32_t ; pub type __int_least64_t = __int64_t ; pub type __uint_least64_t = __uint64_t ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = :: std :: os :: raw :: c_long ; pub type __uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __fsid_t { pub __val : [:: std :: os :: raw :: c_int ; 2usize] , } # [test] fn bindgen_test_layout___fsid_t () { const UNINIT : :: std :: mem :: MaybeUninit < __fsid_t > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < __fsid_t > () , 8usize , concat ! ("Size of: " , stringify ! (__fsid_t))) ; assert_eq ! (:: std :: mem :: align_of :: < __fsid_t > () , 4usize , concat ! ("Alignment of " , stringify ! (__fsid_t))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . __val) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__fsid_t) , "::" , stringify ! (__val))) ; } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __suseconds64_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; pub type int_least8_t = __int_least8_t ; pub type int_least16_t = __int_least16_t ; pub type int_least32_t = __int_least32_t ; pub type int_least64_t = __int_least64_t ; pub type uint_least8_t = __uint_least8_t ; pub type uint_least16_t = __uint_least16_t ; pub type uint_least32_t = __uint_least32_t ; pub type uint_least64_t = __uint_least64_t ; pub type int_fast8_t = :: std :: os :: raw :: c_schar ; pub type int_fast16_t = :: std :: os :: raw :: c_long ; pub type int_fast32_t = :: std :: os :: raw :: c_long ; pub type int_fast64_t = :: std :: os :: raw :: c_long ; pub type uint_fast8_t = :: std :: os :: raw :: c_uchar ; pub type uint_fast16_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast32_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast64_t = :: std :: os :: raw :: c_ulong ; pub type intmax_t = __intmax_t ; pub type uintmax_t = __uintmax_t ; # [repr (C)] # [repr (align (16))] # [derive (Debug , Copy , Clone)] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : u128 , } # [test] fn bindgen_test_layout_max_align_t () { const UNINIT : :: std :: mem :: MaybeUninit < max_align_t > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < max_align_t > () , 32usize , concat ! ("Size of: " , stringify ! (max_align_t))) ; assert_eq ! (:: std :: mem :: align_of :: < max_align_t > () , 16usize , concat ! ("Alignment of " , stringify ! (max_align_t))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . __clang_max_align_nonce1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (max_align_t) , "::" , stringify ! (__clang_max_align_nonce1))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . __clang_max_align_nonce2) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (max_align_t) , "::" , stringify ! (__clang_max_align_nonce2))) ; } pub type EOS_Bool = i32 ; # [repr (i32)] # [non_exhaustive] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EResult { EOS_Success = 0 , EOS_NoConnection = 1 , EOS_InvalidCredentials = 2 , EOS_InvalidUser = 3 , EOS_InvalidAuth = 4 , EOS_AccessDenied = 5 , EOS_MissingPermissions = 6 , EOS_Token_Not_Account = 7 , EOS_TooManyRequests = 8 , EOS_AlreadyPending = 9 , EOS_InvalidParameters = 10 , EOS_InvalidRequest = 11 , EOS_UnrecognizedResponse = 12 , EOS_IncompatibleVersion = 13 , EOS_NotConfigured = 14 , EOS_AlreadyConfigured = 15 , EOS_NotImplemented = 16 , EOS_Canceled = 17 , EOS_NotFound = 18 , EOS_OperationWillRetry = 19 , EOS_NoChange = 20 , EOS_VersionMismatch = 21 , EOS_LimitExceeded = 22 , EOS_Disabled = 23 , EOS_DuplicateNotAllowed = 24 , EOS_MissingParameters_DEPRECATED = 25 , EOS_InvalidSandboxId = 26 , EOS_TimedOut = 27 , EOS_PartialResult = 28 , EOS_Missing_Role = 29 , EOS_Missing_Feature = 30 , EOS_Invalid_Sandbox = 31 , EOS_Invalid_Deployment = 32 , EOS_Invalid_Product = 33 , EOS_Invalid_ProductUserID = 34 , EOS_ServiceFailure = 35 , EOS_CacheDirectoryMissing = 36 , EOS_CacheDirectoryInvalid = 37 , EOS_InvalidState = 38 , EOS_RequestInProgress = 39 , EOS_ApplicationSuspended = 40 , EOS_NetworkDisconnected = 41 , EOS_Auth_AccountLocked = 1001 , EOS_Auth_AccountLockedForUpdate = 1002 , EOS_Auth_InvalidRefreshToken = 1003 , EOS_Auth_InvalidToken = 1004 , EOS_Auth_AuthenticationFailure = 1005 , EOS_Auth_InvalidPlatformToken = 1006 , EOS_Auth_WrongAccount = 1007 , EOS_Auth_WrongClient = 1008 , EOS_Auth_FullAccountRequired = 1009 , EOS_Auth_HeadlessAccountRequired = 1010 , EOS_Auth_PasswordResetRequired = 1011 , EOS_Auth_PasswordCannotBeReused = 1012 , EOS_Auth_Expired = 1013 , EOS_Auth_ScopeConsentRequired = 1014 , EOS_Auth_ApplicationNotFound = 1015 , EOS_Auth_ScopeNotFound = 1016 , EOS_Auth_AccountFeatureRestricted = 1017 , EOS_Auth_AccountPortalLoadError = 1018 , EOS_Auth_CorrectiveActionRequired = 1019 , EOS_Auth_PinGrantCode = 1020 , EOS_Auth_PinGrantExpired = 1021 , EOS_Auth_PinGrantPending = 1022 , EOS_Auth_ExternalAuthNotLinked = 1030 , EOS_Auth_ExternalAuthRevoked = 1032 , EOS_Auth_ExternalAuthInvalid = 1033 , EOS_Auth_ExternalAuthRestricted = 1034 , EOS_Auth_ExternalAuthCannotLogin = 1035 , EOS_Auth_ExternalAuthExpired = 1036 , EOS_Auth_ExternalAuthIsLastLoginType = 1037 , EOS_Auth_ExchangeCodeNotFound = 1040 , EOS_Auth_OriginatingExchangeCodeSessionExpired = 1041 , EOS_Auth_AccountNotActive = 1050 , EOS_Auth_MFARequired = 1060 , EOS_Auth_ParentalControls = 1070 , EOS_Auth_NoRealId = 1080 , EOS_Auth_UserInterfaceRequired = 1090 , EOS_Friends_InviteAwaitingAcceptance = 2000 , EOS_Friends_NoInvitation = 2001 , EOS_Friends_AlreadyFriends = 2003 , EOS_Friends_NotFriends = 2004 , EOS_Friends_TargetUserTooManyInvites = 2005 , EOS_Friends_LocalUserTooManyInvites = 2006 , EOS_Friends_TargetUserFriendLimitExceeded = 2007 , EOS_Friends_LocalUserFriendLimitExceeded = 2008 , EOS_Presence_DataInvalid = 3000 , EOS_Presence_DataLengthInvalid = 3001 , EOS_Presence_DataKeyInvalid = 3002 , EOS_Presence_DataKeyLengthInvalid = 3003 , EOS_Presence_DataValueInvalid = 3004 , EOS_Presence_DataValueLengthInvalid = 3005 , EOS_Presence_RichTextInvalid = 3006 , EOS_Presence_RichTextLengthInvalid = 3007 , EOS_Presence_StatusInvalid = 3008 , EOS_Ecom_EntitlementStale = 4000 , EOS_Ecom_CatalogOfferStale = 4001 , EOS_Ecom_CatalogItemStale = 4002 , EOS_Ecom_CatalogOfferPriceInvalid = 4003 , EOS_Ecom_CheckoutLoadError = 4004 , EOS_Ecom_PurchaseProcessing = 4005 , EOS_Sessions_SessionInProgress = 5000 , EOS_Sessions_TooManyPlayers = 5001 , EOS_Sessions_NoPermission = 5002 , EOS_Sessions_SessionAlreadyExists = 5003 , EOS_Sessions_InvalidLock = 5004 , EOS_Sessions_InvalidSession = 5005 , EOS_Sessions_SandboxNotAllowed = 5006 , EOS_Sessions_InviteFailed = 5007 , EOS_Sessions_InviteNotFound = 5008 , EOS_Sessions_UpsertNotAllowed = 5009 , EOS_Sessions_AggregationFailed = 5010 , EOS_Sessions_HostAtCapacity = 5011 , EOS_Sessions_SandboxAtCapacity = 5012 , EOS_Sessions_SessionNotAnonymous = 5013 , EOS_Sessions_OutOfSync = 5014 , EOS_Sessions_TooManyInvites = 5015 , EOS_Sessions_PresenceSessionExists = 5016 , EOS_Sessions_DeploymentAtCapacity = 5017 , EOS_Sessions_NotAllowed = 5018 , EOS_Sessions_PlayerSanctioned = 5019 , EOS_PlayerDataStorage_FilenameInvalid = 6000 , EOS_PlayerDataStorage_FilenameLengthInvalid = 6001 , EOS_PlayerDataStorage_FilenameInvalidChars = 6002 , EOS_PlayerDataStorage_FileSizeTooLarge = 6003 , EOS_PlayerDataStorage_FileSizeInvalid = 6004 , EOS_PlayerDataStorage_FileHandleInvalid = 6005 , EOS_PlayerDataStorage_DataInvalid = 6006 , EOS_PlayerDataStorage_DataLengthInvalid = 6007 , EOS_PlayerDataStorage_StartIndexInvalid = 6008 , EOS_PlayerDataStorage_RequestInProgress = 6009 , EOS_PlayerDataStorage_UserThrottled = 6010 , EOS_PlayerDataStorage_EncryptionKeyNotSet = 6011 , EOS_PlayerDataStorage_UserErrorFromDataCallback = 6012 , EOS_PlayerDataStorage_FileHeaderHasNewerVersion = 6013 , EOS_PlayerDataStorage_FileCorrupted = 6014 , EOS_Connect_ExternalTokenValidationFailed = 7000 , EOS_Connect_UserAlreadyExists = 7001 , EOS_Connect_AuthExpired = 7002 , EOS_Connect_InvalidToken = 7003 , EOS_Connect_UnsupportedTokenType = 7004 , EOS_Connect_LinkAccountFailed = 7005 , EOS_Connect_ExternalServiceUnavailable = 7006 , EOS_Connect_ExternalServiceConfigurationFailure = 7007 , EOS_Connect_LinkAccountFailedMissingNintendoIdAccount_DEPRECATED = 7008 , EOS_UI_SocialOverlayLoadError = 8000 , EOS_Lobby_NotOwner = 9000 , EOS_Lobby_InvalidLock = 9001 , EOS_Lobby_LobbyAlreadyExists = 9002 , EOS_Lobby_SessionInProgress = 9003 , EOS_Lobby_TooManyPlayers = 9004 , EOS_Lobby_NoPermission = 9005 , EOS_Lobby_InvalidSession = 9006 , EOS_Lobby_SandboxNotAllowed = 9007 , EOS_Lobby_InviteFailed = 9008 , EOS_Lobby_InviteNotFound = 9009 , EOS_Lobby_UpsertNotAllowed = 9010 , EOS_Lobby_AggregationFailed = 9011 , EOS_Lobby_HostAtCapacity = 9012 , EOS_Lobby_SandboxAtCapacity = 9013 , EOS_Lobby_TooManyInvites = 9014 , EOS_Lobby_DeploymentAtCapacity = 9015 , EOS_Lobby_NotAllowed = 9016 , EOS_Lobby_MemberUpdateOnly = 9017 , EOS_Lobby_PresenceLobbyExists = 9018 , EOS_Lobby_VoiceNotEnabled = 9019 , EOS_Lobby_PlatformNotAllowed = 9020 , EOS_TitleStorage_UserErrorFromDataCallback = 10000 , EOS_TitleStorage_EncryptionKeyNotSet = 10001 , EOS_TitleStorage_FileCorrupted = 10002 , EOS_TitleStorage_FileHeaderHasNewerVersion = 10003 , EOS_Mods_ModSdkProcessIsAlreadyRunning = 11000 , EOS_Mods_ModSdkCommandIsEmpty = 11001 , EOS_Mods_ModSdkProcessCreationFailed = 11002 , EOS_Mods_CriticalError = 11003 , EOS_Mods_ToolInternalError = 11004 , EOS_Mods_IPCFailure = 11005 , EOS_Mods_InvalidIPCResponse = 11006 , EOS_Mods_URILaunchFailure = 11007 , EOS_Mods_ModIsNotInstalled = 11008 , EOS_Mods_UserDoesNotOwnTheGame = 11009 , EOS_Mods_OfferRequestByIdInvalidResult = 11010 , EOS_Mods_CouldNotFindOffer = 11011 , EOS_Mods_OfferRequestByIdFailure = 11012 , EOS_Mods_PurchaseFailure = 11013 , EOS_Mods_InvalidGameInstallInfo = 11014 , EOS_Mods_CannotGetManifestLocation = 11015 , EOS_Mods_UnsupportedOS = 11016 , EOS_AntiCheat_ClientProtectionNotAvailable = 12000 , EOS_AntiCheat_InvalidMode = 12001 , EOS_AntiCheat_ClientProductIdMismatch = 12002 , EOS_AntiCheat_ClientSandboxIdMismatch = 12003 , EOS_AntiCheat_ProtectMessageSessionKeyRequired = 12004 , EOS_AntiCheat_ProtectMessageValidationFailed = 12005 , EOS_AntiCheat_ProtectMessageInitializationFailed = 12006 , EOS_AntiCheat_PeerAlreadyRegistered = 12007 , EOS_AntiCheat_PeerNotFound = 12008 , EOS_AntiCheat_PeerNotProtected = 12009 , EOS_AntiCheat_ClientDeploymentIdMismatch = 12010 , EOS_AntiCheat_DeviceIdAuthIsNotSupported = 12011 , EOS_RTC_TooManyParticipants = 13000 , EOS_RTC_RoomAlreadyExists = 13001 , EOS_RTC_UserKicked = 13002 , EOS_RTC_UserBanned = 13003 , EOS_RTC_RoomWasLeft = 13004 , EOS_RTC_ReconnectionTimegateExpired = 13005 , EOS_RTC_ShutdownInvoked = 13006 , EOS_RTC_UserIsInBlocklist = 13007 , EOS_ProgressionSnapshot_SnapshotIdUnavailable = 14000 , EOS_KWS_ParentEmailMissing = 15000 , EOS_KWS_UserGraduated = 15001 , EOS_Android_JavaVMNotStored = 17000 , EOS_Permission_RequiredPatchAvailable = 18000 , EOS_Permission_RequiredSystemUpdate = 18001 , EOS_Permission_AgeRestrictionFailure = 18002 , EOS_Permission_AccountTypeFailure = 18003 , EOS_Permission_ChatRestriction = 18004 , EOS_Permission_UGCRestriction = 18005 , EOS_Permission_OnlinePlayRestricted = 18006 , EOS_DesktopCrossplay_ApplicationNotBootstrapped = 19000 , EOS_DesktopCrossplay_ServiceNotInstalled = 19001 , EOS_DesktopCrossplay_ServiceStartFailed = 19002 , EOS_DesktopCrossplay_ServiceNotRunning = 19003 , EOS_CustomInvites_InviteFailed = 20000 , EOS_UserInfo_BestDisplayNameIndeterminate = 22000 , EOS_UnexpectedError = 2147483647 , } extern "C" { # [doc = " Returns a string representation of an EOS_EResult.\n The return value is never null.\n The return value must not be freed.\n\n Example: EOS_EResult_ToString(EOS_Success) returns \"EOS_Success\""] pub fn EOS_EResult_ToString (Result : EOS_EResult) -> * const :: std :: os :: raw :: c_char ; } extern "C" { # [doc = " Returns whether a result is to be considered the final result, or false if the callback that returned this result\n will be called again either after some time or from another action.\n\n @param Result The result to check against being a final result for an operation\n @return True if this result means the operation is complete, false otherwise"] pub fn EOS_EResult_IsOperationComplete (Result : EOS_EResult) -> EOS_Bool ; } extern "C" { # [doc = " Encode a byte array into hex encoded string\n\n @return An EOS_EResult that indicates whether the byte array was converted and copied into the OutBuffer.\n         EOS_Success if the encoding was successful and passed out in OutBuffer\n         EOS_InvalidParameters if you pass a null pointer on invalid length for any of the parameters\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the encoding. InOutBufferLength contains the required minimum length to perform the operation successfully."] pub fn EOS_ByteArray_ToString (ByteArray : * const u8 , Length : u32 , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut u32) -> EOS_EResult ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_EpicAccountIdDetails { _unused : [u8 ; 0] , } # [doc = " A handle to a user's Epic Account ID\n This ID is associated with a specific login associated with Epic Account Services\n\n @see EOS_Auth_Login"] pub type EOS_EpicAccountId = * mut EOS_EpicAccountIdDetails ; extern "C" { # [doc = " Check whether or not the given Epic Account ID is considered valid\n NOTE: This will return true for any EOS_EpicAccountId created with EOS_EpicAccountId_FromString as there is no validation\n\n @param AccountId The Epic Account ID to check for validity\n @return EOS_TRUE if the EOS_EpicAccountId is valid, otherwise EOS_FALSE"] pub fn EOS_EpicAccountId_IsValid (AccountId : EOS_EpicAccountId) -> EOS_Bool ; } extern "C" { # [doc = " Retrieve a null-terminated stringified Epic Account ID from an EOS_EpicAccountId. This is useful for replication of Epic Account IDs in multiplayer games.\n This string will be no larger than EOS_EPICACCOUNTID_MAX_LENGTH + 1 and will only contain UTF8-encoded printable characters as well as a null-terminator.\n\n @param AccountId The Epic Account ID for which to retrieve the stringified version.\n @param OutBuffer The buffer into which the character data should be written\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer including the null-termination character.\n\n @return An EOS_EResult that indicates whether the Epic Account ID string was copied into the OutBuffer.\n         EOS_Success - The OutBuffer was filled, and InOutBufferLength contains the number of characters copied into OutBuffer including the null-terminator.\n         EOS_InvalidParameters - Either OutBuffer or InOutBufferLength were passed as NULL parameters.\n         EOS_InvalidUser - The AccountId is invalid and cannot be stringified.\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the Epic Account ID string. InOutBufferLength contains the required minimum length to perform the operation successfully."] pub fn EOS_EpicAccountId_ToString (AccountId : EOS_EpicAccountId , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } extern "C" { # [doc = " Retrieve an EOS_EpicAccountId from a raw string representing an Epic Account ID. The input string must be null-terminated.\n NOTE: There is no validation on the string format, this should only be used with values serialized from legitimate sources such as EOS_EpicAccountId_ToString\n\n @param AccountIdString The stringified account ID for which to retrieve the Epic Account ID\n @return The EOS_EpicAccountId that corresponds to the AccountIdString"] pub fn EOS_EpicAccountId_FromString (AccountIdString : * const :: std :: os :: raw :: c_char) -> EOS_EpicAccountId ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_ProductUserIdDetails { _unused : [u8 ; 0] , } # [doc = " A handle to a user's Product User ID (game services related ecosystem)\n This ID is associated with any of the external account providers (of which Epic Account Services is one)\n\n @see EOS_Connect_Login\n @see EOS_EExternalCredentialType"] pub type EOS_ProductUserId = * mut EOS_ProductUserIdDetails ; extern "C" { # [doc = " Check whether or not the given account unique ID is considered valid\n NOTE: This will return true for any EOS_ProductUserId created with EOS_ProductUserId_FromString as there is no validation\n\n @param AccountId The Product User ID to check for validity\n @return EOS_TRUE if the EOS_ProductUserId is valid, otherwise EOS_FALSE"] pub fn EOS_ProductUserId_IsValid (AccountId : EOS_ProductUserId) -> EOS_Bool ; } extern "C" { # [doc = " Retrieve a null-terminated stringified Product User ID from an EOS_ProductUserId. This is useful for replication of Product User IDs in multiplayer games.\n This string will be no larger than EOS_PRODUCTUSERID_MAX_LENGTH + 1 and will only contain UTF8-encoded printable characters as well as the null-terminator.\n\n @param AccountId The Product User ID for which to retrieve the stringified version.\n @param OutBuffer The buffer into which the character data should be written\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer including the null-termination character.\n\n @return An EOS_EResult that indicates whether the Product User ID string was copied into the OutBuffer.\n         EOS_Success - The OutBuffer was filled, and InOutBufferLength contains the number of characters copied into OutBuffer including the null-terminator.\n         EOS_InvalidParameters - Either OutBuffer or InOutBufferLength were passed as NULL parameters.\n         EOS_InvalidUser - The AccountId is invalid and cannot be stringified.\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the Product User ID string. InOutBufferLength contains the required minimum length to perform the operation successfully."] pub fn EOS_ProductUserId_ToString (AccountId : EOS_ProductUserId , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } extern "C" { # [doc = " Retrieve an EOS_ProductUserId from a raw string representing an Epic Online Services Product User ID. The input string must be null-terminated.\n NOTE: There is no validation on the string format, this should only be used with values serialized from legitimate sources such as EOS_ProductUserId_ToString\n\n @param ProductUserIdString The stringified product user ID for which to retrieve the Epic Online Services Product User ID\n @return The EOS_ProductUserId that corresponds to the ProductUserIdString"] pub fn EOS_ProductUserId_FromString (ProductUserIdString : * const :: std :: os :: raw :: c_char) -> EOS_ProductUserId ; } # [doc = " Handle to an existing registered notification (0 is an invalid handle)"] pub type EOS_NotificationId = u64 ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_ContinuanceTokenDetails { _unused : [u8 ; 0] , } # [doc = " A handle to a continuance token @see eos_connect.h"] pub type EOS_ContinuanceToken = * mut EOS_ContinuanceTokenDetails ; extern "C" { # [doc = " Retrieve a null-terminated stringified continuance token from an EOS_ContinuanceToken.\n\n To get the required buffer size, call once with OutBuffer set to NULL, InOutBufferLength will contain the buffer size needed.\n Call again with valid params to get the stringified continuance token which will only contain UTF8-encoded printable characters as well as the null-terminator.\n\n @param ContinuanceToken The continuance token for which to retrieve the stringified version.\n @param OutBuffer The buffer into which the character data should be written\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer including the null-termination character.\n\n @return An EOS_EResult that indicates whether the continuance token string was copied into the OutBuffer.\n         EOS_Success - The OutBuffer was filled, and InOutBufferLength contains the number of characters copied into OutBuffer including the null-terminator.\n         EOS_InvalidParameters - Either OutBuffer or InOutBufferLength were passed as NULL parameters.\n         EOS_InvalidUser - The AccountId is invalid and cannot be stringified.\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the continuance token string. InOutBufferLength contains the required minimum length to perform the operation successfully."] pub fn EOS_ContinuanceToken_ToString (ContinuanceToken : EOS_ContinuanceToken , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PageQuery { pub ApiVersion : i32 , pub StartIndex : i32 , pub MaxCount : i32 , } # [test] fn bindgen_test_layout__tagEOS_PageQuery () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PageQuery > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PageQuery > () , 12usize , concat ! ("Size of: " , stringify ! (_tagEOS_PageQuery))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PageQuery > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PageQuery))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PageQuery) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StartIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PageQuery) , "::" , stringify ! (StartIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxCount) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PageQuery) , "::" , stringify ! (MaxCount))) ; } pub type EOS_PageQuery = _tagEOS_PageQuery ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PageResult { pub StartIndex : i32 , pub Count : i32 , pub TotalCount : i32 , } # [test] fn bindgen_test_layout__tagEOS_PageResult () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PageResult > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PageResult > () , 12usize , concat ! ("Size of: " , stringify ! (_tagEOS_PageResult))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PageResult > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PageResult))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StartIndex) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PageResult) , "::" , stringify ! (StartIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Count) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PageResult) , "::" , stringify ! (Count))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TotalCount) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PageResult) , "::" , stringify ! (TotalCount))) ; } pub type EOS_PageResult = _tagEOS_PageResult ; # [repr (i32)] # [non_exhaustive] # [doc = " All possible states of a local user\n\n @see EOS_Auth_AddNotifyLoginStatusChanged\n @see EOS_Auth_GetLoginStatus\n @see EOS_Auth_Login\n @see EOS_Connect_AddNotifyLoginStatusChanged\n @see EOS_Connect_GetLoginStatus\n @see EOS_Connect_Login"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ELoginStatus { EOS_LS_NotLoggedIn = 0 , EOS_LS_UsingLocalProfile = 1 , EOS_LS_LoggedIn = 2 , } # [repr (i32)] # [non_exhaustive] # [doc = " Supported types of data that can be stored with inside an attribute (used by sessions/lobbies/etc)\n\n @see EOS_LobbySearch_SetParameter\n @see EOS_SessionSearch_SetParameter"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAttributeType { EOS_AT_BOOLEAN = 0 , EOS_AT_INT64 = 1 , EOS_AT_DOUBLE = 2 , EOS_AT_STRING = 3 , } # [doc = " Supported types of data that can be stored with inside an attribute (used by sessions/lobbies/etc)\n\n @see EOS_LobbySearch_SetParameter\n @see EOS_SessionSearch_SetParameter"] pub use self :: EOS_EAttributeType as EOS_ESessionAttributeType ; # [doc = " Supported types of data that can be stored with inside an attribute (used by sessions/lobbies/etc)\n\n @see EOS_LobbySearch_SetParameter\n @see EOS_SessionSearch_SetParameter"] pub use self :: EOS_EAttributeType as EOS_ELobbyAttributeType ; # [repr (i32)] # [non_exhaustive] # [doc = " All comparison operators associated with parameters in a search query\n\n @see EOS_LobbySearch_SetParameter\n @see EOS_SessionSearch_SetParameter"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EComparisonOp { EOS_CO_EQUAL = 0 , EOS_CO_NOTEQUAL = 1 , EOS_CO_GREATERTHAN = 2 , EOS_CO_GREATERTHANOREQUAL = 3 , EOS_CO_LESSTHAN = 4 , EOS_CO_LESSTHANOREQUAL = 5 , EOS_CO_DISTANCE = 6 , EOS_CO_ANYOF = 7 , EOS_CO_NOTANYOF = 8 , EOS_CO_ONEOF = 9 , EOS_CO_NOTONEOF = 10 , EOS_CO_CONTAINS = 11 , } # [doc = " All comparison operators associated with parameters in a search query\n\n @see EOS_LobbySearch_SetParameter\n @see EOS_SessionSearch_SetParameter"] pub use self :: EOS_EComparisonOp as EOS_EOnlineComparisonOp ; # [repr (i32)] # [non_exhaustive] # [doc = " All supported external account providers\n\n @see EOS_Connect_QueryExternalAccountMappings"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EExternalAccountType { EOS_EAT_EPIC = 0 , EOS_EAT_STEAM = 1 , EOS_EAT_PSN = 2 , EOS_EAT_XBL = 3 , EOS_EAT_DISCORD = 4 , EOS_EAT_GOG = 5 , EOS_EAT_NINTENDO = 6 , EOS_EAT_UPLAY = 7 , EOS_EAT_OPENID = 8 , EOS_EAT_APPLE = 9 , EOS_EAT_GOOGLE = 10 , EOS_EAT_OCULUS = 11 , EOS_EAT_ITCHIO = 12 , EOS_EAT_AMAZON = 13 , } # [repr (i32)] # [non_exhaustive] # [doc = " List of the supported identity providers to authenticate a user.\n\n The type of authentication token is specific to each provider.\n Tokens in string format should be passed as-is to the function.\n Tokens retrieved as raw byte arrays should be converted into a hex-encoded UTF-8 string (e.g. \"FA87097A..\") before being passed to the function.\n EOS_ByteArray_ToString can be used for this conversion.\n\n @see EOS_Auth_Login\n @see EOS_Connect_Login"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EExternalCredentialType { EOS_ECT_EPIC = 0 , EOS_ECT_STEAM_APP_TICKET = 1 , EOS_ECT_PSN_ID_TOKEN = 2 , EOS_ECT_XBL_XSTS_TOKEN = 3 , EOS_ECT_DISCORD_ACCESS_TOKEN = 4 , EOS_ECT_GOG_SESSION_TICKET = 5 , EOS_ECT_NINTENDO_ID_TOKEN = 6 , EOS_ECT_NINTENDO_NSA_ID_TOKEN = 7 , EOS_ECT_UPLAY_ACCESS_TOKEN = 8 , EOS_ECT_OPENID_ACCESS_TOKEN = 9 , EOS_ECT_DEVICEID_ACCESS_TOKEN = 10 , EOS_ECT_APPLE_ID_TOKEN = 11 , EOS_ECT_GOOGLE_ID_TOKEN = 12 , EOS_ECT_OCULUS_USERID_NONCE = 13 , EOS_ECT_ITCHIO_JWT = 14 , EOS_ECT_ITCHIO_KEY = 15 , EOS_ECT_EPIC_ID_TOKEN = 16 , EOS_ECT_AMAZON_ACCESS_TOKEN = 17 , EOS_ECT_STEAM_SESSION_TICKET = 18 , } # [doc = " This type is used to distinguish between different supported integrated platforms.\n Integrated platforms which are common across multiple host platforms will be defined here."] pub type EOS_IntegratedPlatformType = * const :: std :: os :: raw :: c_char ; # [doc = " This type is used to distinguish between different online platforms."] pub type EOS_OnlinePlatformType = u32 ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_IntegratedPlatformOptionsContainerHandle { _unused : [u8 ; 0] , } pub type EOS_HIntegratedPlatformOptionsContainer = * mut EOS_IntegratedPlatformOptionsContainerHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_IntegratedPlatformHandle { _unused : [u8 ; 0] , } pub type EOS_HIntegratedPlatform = * mut EOS_IntegratedPlatformHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " These flags are used to determine how a specific Integrated Platform will be managed."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EIntegratedPlatformManagementFlags { EOS_IPMF_Disabled = 1 , EOS_IPMF_LibraryManagedByApplication = 2 , EOS_IPMF_LibraryManagedBySDK = 4 , EOS_IPMF_DisablePresenceMirroring = 8 , EOS_IPMF_DisableSDKManagedSessions = 16 , EOS_IPMF_PreferEOSIdentity = 32 , EOS_IPMF_PreferIntegratedIdentity = 64 , EOS_IPMF_ApplicationManagedIdentityLogin = 128 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_Options { pub ApiVersion : i32 , pub Type : EOS_IntegratedPlatformType , pub Flags : EOS_EIntegratedPlatformManagementFlags , pub InitOptions : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_Options () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_Options > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_Options > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_Options))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_Options > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_Options))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Options) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Options) , "::" , stringify ! (Type))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Flags) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Options) , "::" , stringify ! (Flags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InitOptions) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Options) , "::" , stringify ! (InitOptions))) ; } pub type EOS_IntegratedPlatform_Options = _tagEOS_IntegratedPlatform_Options ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_Steam_Options { pub ApiVersion : i32 , pub OverrideLibraryPath : * const :: std :: os :: raw :: c_char , pub SteamMajorVersion : u32 , pub SteamMinorVersion : u32 , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_Steam_Options () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_Steam_Options > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_Steam_Options > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_Steam_Options))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_Steam_Options > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_Steam_Options))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Steam_Options) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverrideLibraryPath) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Steam_Options) , "::" , stringify ! (OverrideLibraryPath))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SteamMajorVersion) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Steam_Options) , "::" , stringify ! (SteamMajorVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SteamMinorVersion) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_Steam_Options) , "::" , stringify ! (SteamMinorVersion))) ; } pub type EOS_IntegratedPlatform_Steam_Options = _tagEOS_IntegratedPlatform_Steam_Options ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions = _tagEOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions ; extern "C" { # [doc = " Creates an integrated platform options container handle. This handle can used to add multiple options to your container which will then be applied with EOS_Platform_Create.\n The resulting handle must be released by calling EOS_IntegratedPlatformOptionsContainer_Release once it has been passed to EOS_Platform_Create.\n\n @param Options structure containing operation input parameters.\n @param OutIntegratedPlatformOptionsContainerHandle Pointer to an integrated platform options container handle to be set if successful.\n @return Success if we successfully created the integrated platform options container handle pointed at in OutIntegratedPlatformOptionsContainerHandle, or an error result if the input data was invalid.\n\n @see EOS_IntegratedPlatformOptionsContainer_Release\n @see EOS_Platform_Create\n @see EOS_IntegratedPlatformOptionsContainer_Add"] pub fn EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer (Options : * const EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerOptions , OutIntegratedPlatformOptionsContainerHandle : * mut EOS_HIntegratedPlatformOptionsContainer) -> EOS_EResult ; } extern "C" { # [doc = " Release the memory associated with an EOS_HIntegratedPlatformOptionsContainer handle. This must be called on Handles retrieved from EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer.\n This can be safely called on a NULL integrated platform options container handle.\n\n @param IntegratedPlatformOptionsContainerHandle The integrated platform options container handle to release.\n\n @see EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer"] pub fn EOS_IntegratedPlatformOptionsContainer_Release (IntegratedPlatformOptionsContainerHandle : EOS_HIntegratedPlatformOptionsContainer) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatformOptionsContainer_AddOptions { pub ApiVersion : i32 , pub Options : * const EOS_IntegratedPlatform_Options , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatformOptionsContainer_AddOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatformOptionsContainer_AddOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatformOptionsContainer_AddOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatformOptionsContainer_AddOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatformOptionsContainer_AddOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatformOptionsContainer_AddOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatformOptionsContainer_AddOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Options) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatformOptionsContainer_AddOptions) , "::" , stringify ! (Options))) ; } pub type EOS_IntegratedPlatformOptionsContainer_AddOptions = _tagEOS_IntegratedPlatformOptionsContainer_AddOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_SetUserLoginStatusOptions { pub ApiVersion : i32 , pub PlatformType : EOS_IntegratedPlatformType , pub LocalPlatformUserId : * const :: std :: os :: raw :: c_char , pub CurrentLoginStatus : EOS_ELoginStatus , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_SetUserLoginStatusOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_SetUserLoginStatusOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_SetUserLoginStatusOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_SetUserLoginStatusOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_SetUserLoginStatusOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_SetUserLoginStatusOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_SetUserLoginStatusOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlatformType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_SetUserLoginStatusOptions) , "::" , stringify ! (PlatformType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalPlatformUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_SetUserLoginStatusOptions) , "::" , stringify ! (LocalPlatformUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentLoginStatus) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_SetUserLoginStatusOptions) , "::" , stringify ! (CurrentLoginStatus))) ; } pub type EOS_IntegratedPlatform_SetUserLoginStatusOptions = _tagEOS_IntegratedPlatform_SetUserLoginStatusOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions = _tagEOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub PlatformType : EOS_IntegratedPlatformType , pub LocalPlatformUserId : * const :: std :: os :: raw :: c_char , pub AccountId : EOS_EpicAccountId , pub ProductUserId : EOS_ProductUserId , pub PreviousLoginStatus : EOS_ELoginStatus , pub CurrentLoginStatus : EOS_ELoginStatus , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlatformType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) , "::" , stringify ! (PlatformType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalPlatformUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) , "::" , stringify ! (LocalPlatformUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) , "::" , stringify ! (ProductUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PreviousLoginStatus) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) , "::" , stringify ! (PreviousLoginStatus))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentLoginStatus) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) , "::" , stringify ! (CurrentLoginStatus))) ; } pub type EOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo = _tagEOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo ; pub type EOS_IntegratedPlatform_OnUserLoginStatusChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_IntegratedPlatform_UserLoginStatusChangedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions = _tagEOS_IntegratedPlatform_SetUserPreLogoutCallbackOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " The return value for the EOS_IntegratedPlatform_OnUserPreLogoutCallback callback function. This signifies what the application wants to do for\n the provided user of the integrated platform."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EIntegratedPlatformPreLogoutAction { EOS_IPLA_ProcessLogoutImmediately = 0 , EOS_IPLA_DeferLogout = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub PlatformType : EOS_IntegratedPlatformType , pub LocalPlatformUserId : * const :: std :: os :: raw :: c_char , pub AccountId : EOS_EpicAccountId , pub ProductUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlatformType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo) , "::" , stringify ! (PlatformType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalPlatformUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo) , "::" , stringify ! (LocalPlatformUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo) , "::" , stringify ! (ProductUserId))) ; } pub type EOS_IntegratedPlatform_UserPreLogoutCallbackInfo = _tagEOS_IntegratedPlatform_UserPreLogoutCallbackInfo ; pub type EOS_IntegratedPlatform_OnUserPreLogoutCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_IntegratedPlatform_UserPreLogoutCallbackInfo) -> EOS_EIntegratedPlatformPreLogoutAction > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions = _tagEOS_IntegratedPlatform_ClearUserPreLogoutCallbackOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions { pub ApiVersion : i32 , pub PlatformType : EOS_IntegratedPlatformType , pub LocalPlatformUserId : * const :: std :: os :: raw :: c_char , pub ExpectedLoginStatus : EOS_ELoginStatus , } # [test] fn bindgen_test_layout__tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlatformType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions) , "::" , stringify ! (PlatformType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalPlatformUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions) , "::" , stringify ! (LocalPlatformUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExpectedLoginStatus) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions) , "::" , stringify ! (ExpectedLoginStatus))) ; } pub type EOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions = _tagEOS_IntegratedPlatform_FinalizeDeferredUserLogoutOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_PlatformHandle { _unused : [u8 ; 0] , } pub type EOS_HPlatform = * mut EOS_PlatformHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Platform_ClientCredentials { pub ClientId : * const :: std :: os :: raw :: c_char , pub ClientSecret : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Platform_ClientCredentials () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Platform_ClientCredentials > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Platform_ClientCredentials > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Platform_ClientCredentials))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Platform_ClientCredentials > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Platform_ClientCredentials))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientId) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_ClientCredentials) , "::" , stringify ! (ClientId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientSecret) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_ClientCredentials) , "::" , stringify ! (ClientSecret))) ; } pub type EOS_Platform_ClientCredentials = _tagEOS_Platform_ClientCredentials ; # [repr (i32)] # [non_exhaustive] # [doc = " All background modes supported by the RTC components"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ERTCBackgroundMode { EOS_RTCBM_LeaveRooms = 0 , EOS_RTCBM_KeepRoomsAlive = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Platform_RTCOptions { pub ApiVersion : i32 , pub PlatformSpecificOptions : * mut :: std :: os :: raw :: c_void , pub BackgroundMode : EOS_ERTCBackgroundMode , } # [test] fn bindgen_test_layout__tagEOS_Platform_RTCOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Platform_RTCOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Platform_RTCOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Platform_RTCOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Platform_RTCOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Platform_RTCOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_RTCOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlatformSpecificOptions) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_RTCOptions) , "::" , stringify ! (PlatformSpecificOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BackgroundMode) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_RTCOptions) , "::" , stringify ! (BackgroundMode))) ; } pub type EOS_Platform_RTCOptions = _tagEOS_Platform_RTCOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Platform_Options { pub ApiVersion : i32 , pub Reserved : * mut :: std :: os :: raw :: c_void , pub ProductId : * const :: std :: os :: raw :: c_char , pub SandboxId : * const :: std :: os :: raw :: c_char , pub ClientCredentials : EOS_Platform_ClientCredentials , pub bIsServer : EOS_Bool , pub EncryptionKey : * const :: std :: os :: raw :: c_char , pub OverrideCountryCode : * const :: std :: os :: raw :: c_char , pub OverrideLocaleCode : * const :: std :: os :: raw :: c_char , pub DeploymentId : * const :: std :: os :: raw :: c_char , pub Flags : u64 , pub CacheDirectory : * const :: std :: os :: raw :: c_char , pub TickBudgetInMilliseconds : u32 , pub RTCOptions : * const EOS_Platform_RTCOptions , pub IntegratedPlatformOptionsContainerHandle : EOS_HIntegratedPlatformOptionsContainer , pub SystemSpecificOptions : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Platform_Options () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Platform_Options > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Platform_Options > () , 136usize , concat ! ("Size of: " , stringify ! (_tagEOS_Platform_Options))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Platform_Options > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Platform_Options))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Reserved) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (Reserved))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (ProductId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (SandboxId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientCredentials) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (ClientCredentials))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsServer) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (bIsServer))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EncryptionKey) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (EncryptionKey))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverrideCountryCode) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (OverrideCountryCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverrideLocaleCode) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (OverrideLocaleCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DeploymentId) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (DeploymentId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Flags) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (Flags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CacheDirectory) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (CacheDirectory))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TickBudgetInMilliseconds) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (TickBudgetInMilliseconds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RTCOptions) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (RTCOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IntegratedPlatformOptionsContainerHandle) as usize - ptr as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (IntegratedPlatformOptionsContainerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SystemSpecificOptions) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_Options) , "::" , stringify ! (SystemSpecificOptions))) ; } pub type EOS_Platform_Options = _tagEOS_Platform_Options ; # [repr (i32)] # [non_exhaustive] # [doc = " All possible states of the application."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EApplicationStatus { EOS_AS_BackgroundConstrained = 0 , EOS_AS_BackgroundUnconstrained = 1 , EOS_AS_BackgroundSuspended = 2 , EOS_AS_Foreground = 3 , } extern "C" { # [doc = " Gets the string representation of an EOS_EApplicationStatus value.\n\n Example: EOS_EApplicationStatus_ToString(EOS_EApplicationStatus::EOS_AS_Foreground) returns \"EOS_AS_Foreground\".\n\n @param ApplicationStatus EOS_EApplicationStatus value to get as string.\n\n @return Pointer to a static string representing the input enum value.\n         The returned string is guaranteed to be non-null, and must not be freed by the application."] pub fn EOS_EApplicationStatus_ToString (ApplicationStatus : EOS_EApplicationStatus) -> * const :: std :: os :: raw :: c_char ; } # [repr (i32)] # [non_exhaustive] # [doc = " All possible states of the network."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ENetworkStatus { EOS_NS_Disabled = 0 , EOS_NS_Offline = 1 , EOS_NS_Online = 2 , } extern "C" { # [doc = " Gets the string representation of an EOS_ENetworkStatus value.\n\n Example: EOS_ENetworkStatus_ToString(EOS_ENetworkStatus::EOS_NS_Online) returns \"EOS_NS_Online\".\n\n @param NetworkStatus EOS_ENetworkStatus value to get as string.\n\n @return Pointer to a static string representing the input enum value.\n         The returned string is guaranteed to be non-null, and must not be freed by the application."] pub fn EOS_ENetworkStatus_ToString (NetworkStatus : EOS_ENetworkStatus) -> * const :: std :: os :: raw :: c_char ; } # [repr (i32)] # [non_exhaustive] # [doc = " Possible statuses for the availability of desktop crossplay functionality.\n\n @see EOS_Platform_GetDesktopCrossplayStatus"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EDesktopCrossplayStatus { EOS_DCS_OK = 0 , EOS_DCS_ApplicationNotBootstrapped = 1 , EOS_DCS_ServiceNotInstalled = 2 , EOS_DCS_ServiceStartFailed = 3 , EOS_DCS_ServiceNotRunning = 4 , EOS_DCS_OverlayDisabled = 5 , EOS_DCS_OverlayNotInstalled = 6 , EOS_DCS_OverlayTrustCheckFailed = 7 , EOS_DCS_OverlayLoadFailed = 8 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Platform_GetDesktopCrossplayStatusOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Platform_GetDesktopCrossplayStatusOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Platform_GetDesktopCrossplayStatusOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Platform_GetDesktopCrossplayStatusOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Platform_GetDesktopCrossplayStatusOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Platform_GetDesktopCrossplayStatusOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Platform_GetDesktopCrossplayStatusOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_GetDesktopCrossplayStatusOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Platform_GetDesktopCrossplayStatusOptions = _tagEOS_Platform_GetDesktopCrossplayStatusOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Platform_DesktopCrossplayStatusInfo { pub Status : EOS_EDesktopCrossplayStatus , pub ServiceInitResult : i32 , } # [test] fn bindgen_test_layout__tagEOS_Platform_DesktopCrossplayStatusInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Platform_DesktopCrossplayStatusInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Platform_DesktopCrossplayStatusInfo > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Platform_DesktopCrossplayStatusInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Platform_DesktopCrossplayStatusInfo > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Platform_DesktopCrossplayStatusInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Status) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_DesktopCrossplayStatusInfo) , "::" , stringify ! (Status))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ServiceInitResult) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Platform_DesktopCrossplayStatusInfo) , "::" , stringify ! (ServiceInitResult))) ; } pub type EOS_Platform_DesktopCrossplayStatusInfo = _tagEOS_Platform_DesktopCrossplayStatusInfo ; # [doc = " Function prototype type definition for functions that allocate memory.\n\n Functions passed to EOS_Initialize to serve as memory allocators should return a pointer to the allocated memory.\n\n The returned pointer should have at least SizeInBytes available capacity and the memory address should be a multiple of Alignment.\n The SDK will always call the provided function with an Alignment that is a power of 2.\n Allocation failures should return a null pointer."] pub type EOS_AllocateMemoryFunc = :: std :: option :: Option < unsafe extern "C" fn (SizeInBytes : usize , Alignment : usize) -> * mut :: std :: os :: raw :: c_void > ; # [doc = " Function prototype type definition for functions that reallocate memory.\n\n Functions passed to EOS_Initialize to serve as memory reallocators should return a pointer to the reallocated memory.\n The returned pointer should have at least SizeInBytes available capacity and the memory address should be a multiple of alignment.\n The SDK will always call the provided function with an Alignment that is a power of 2.\n Reallocation failures should return a null pointer."] pub type EOS_ReallocateMemoryFunc = :: std :: option :: Option < unsafe extern "C" fn (Pointer : * mut :: std :: os :: raw :: c_void , SizeInBytes : usize , Alignment : usize) -> * mut :: std :: os :: raw :: c_void > ; # [doc = " Function prototype type definition for functions that release memory.\n\n When the SDK is done with memory that has been allocated by a custom allocator passed to EOS_Initialize, it will call the corresponding memory release function."] pub type EOS_ReleaseMemoryFunc = :: std :: option :: Option < unsafe extern "C" fn (Pointer : * mut :: std :: os :: raw :: c_void) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Initialize_ThreadAffinity { pub ApiVersion : i32 , pub NetworkWork : u64 , pub StorageIo : u64 , pub WebSocketIo : u64 , pub P2PIo : u64 , pub HttpRequestIo : u64 , pub RTCIo : u64 , } # [test] fn bindgen_test_layout__tagEOS_Initialize_ThreadAffinity () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Initialize_ThreadAffinity > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Initialize_ThreadAffinity > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_Initialize_ThreadAffinity))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Initialize_ThreadAffinity > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Initialize_ThreadAffinity))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Initialize_ThreadAffinity) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NetworkWork) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Initialize_ThreadAffinity) , "::" , stringify ! (NetworkWork))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StorageIo) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Initialize_ThreadAffinity) , "::" , stringify ! (StorageIo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . WebSocketIo) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Initialize_ThreadAffinity) , "::" , stringify ! (WebSocketIo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . P2PIo) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Initialize_ThreadAffinity) , "::" , stringify ! (P2PIo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HttpRequestIo) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Initialize_ThreadAffinity) , "::" , stringify ! (HttpRequestIo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RTCIo) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Initialize_ThreadAffinity) , "::" , stringify ! (RTCIo))) ; } pub type EOS_Initialize_ThreadAffinity = _tagEOS_Initialize_ThreadAffinity ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_InitializeOptions { pub ApiVersion : i32 , pub AllocateMemoryFunction : EOS_AllocateMemoryFunc , pub ReallocateMemoryFunction : EOS_ReallocateMemoryFunc , pub ReleaseMemoryFunction : EOS_ReleaseMemoryFunc , pub ProductName : * const :: std :: os :: raw :: c_char , pub ProductVersion : * const :: std :: os :: raw :: c_char , pub Reserved : * mut :: std :: os :: raw :: c_void , pub SystemInitializeOptions : * mut :: std :: os :: raw :: c_void , pub OverrideThreadAffinity : * mut EOS_Initialize_ThreadAffinity , } # [test] fn bindgen_test_layout__tagEOS_InitializeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_InitializeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_InitializeOptions > () , 72usize , concat ! ("Size of: " , stringify ! (_tagEOS_InitializeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_InitializeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_InitializeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllocateMemoryFunction) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (AllocateMemoryFunction))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReallocateMemoryFunction) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (ReallocateMemoryFunction))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReleaseMemoryFunction) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (ReleaseMemoryFunction))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductName) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (ProductName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductVersion) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (ProductVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Reserved) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (Reserved))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SystemInitializeOptions) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (SystemInitializeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverrideThreadAffinity) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_InitializeOptions) , "::" , stringify ! (OverrideThreadAffinity))) ; } pub type EOS_InitializeOptions = _tagEOS_InitializeOptions ; extern "C" { # [doc = " Initialize the Epic Online Services SDK.\n\n Before calling any other function in the SDK, clients must call this function.\n\n This function must only be called one time and must have a corresponding EOS_Shutdown call.\n\n @param Options - The initialization options to use for the SDK.\n @return An EOS_EResult is returned to indicate success or an error.\n\n EOS_Success is returned if the SDK successfully initializes.\n EOS_AlreadyConfigured is returned if the function has already been called.\n EOS_InvalidParameters is returned if the provided options are invalid."] pub fn EOS_Initialize (Options : * const EOS_InitializeOptions) -> EOS_EResult ; } extern "C" { # [doc = " Tear down the Epic Online Services SDK.\n\n Once this function has been called, no more SDK calls are permitted; calling anything after EOS_Shutdown will result in undefined behavior.\n @return An EOS_EResult is returned to indicate success or an error.\n EOS_Success is returned if the SDK is successfully torn down.\n EOS_NotConfigured is returned if a successful call to EOS_Initialize has not been made.\n EOS_UnexpectedError is returned if EOS_Shutdown has already been called."] pub fn EOS_Shutdown () -> EOS_EResult ; } extern "C" { # [doc = " Create a single Epic Online Services Platform Instance.\n\n The platform instance is used to gain access to the various Epic Online Services.\n\n This function returns an opaque handle to the platform instance, and that handle must be passed to EOS_Platform_Release to release the instance.\n\n @return An opaque handle to the platform instance."] pub fn EOS_Platform_Create (Options : * const EOS_Platform_Options) -> EOS_HPlatform ; } extern "C" { # [doc = " Release an Epic Online Services platform instance previously returned from EOS_Platform_Create.\n\n This function should only be called once per instance returned by EOS_Platform_Create. Undefined behavior will result in calling it with a single instance more than once.\n Typically only a single platform instance needs to be created during the lifetime of a game.\n You should release each platform instance before calling the EOS_Shutdown function."] pub fn EOS_Platform_Release (Handle : EOS_HPlatform) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_MetricsHandle { _unused : [u8 ; 0] , } pub type EOS_HMetrics = * mut EOS_MetricsHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " User game controller types."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EUserControllerType { EOS_UCT_Unknown = 0 , EOS_UCT_MouseKeyboard = 1 , EOS_UCT_GamepadControl = 2 , EOS_UCT_TouchControl = 3 , } # [repr (i32)] # [non_exhaustive] # [doc = " Account ID type for EOS_Metrics_BeginPlayerSession and EOS_Metrics_EndPlayerSession."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EMetricsAccountIdType { EOS_MAIT_Epic = 0 , EOS_MAIT_External = 1 , } # [repr (C)] # [derive (Copy , Clone)] pub struct _tagEOS_Metrics_BeginPlayerSessionOptions { pub ApiVersion : i32 , pub AccountIdType : EOS_EMetricsAccountIdType , pub AccountId : _tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1 , pub DisplayName : * const :: std :: os :: raw :: c_char , pub ControllerType : EOS_EUserControllerType , pub ServerIp : * const :: std :: os :: raw :: c_char , pub GameSessionId : * const :: std :: os :: raw :: c_char , } # [doc = " BeginPlayerSession."] # [repr (C)] # [derive (Copy , Clone)] pub union _tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1 { pub Epic : EOS_EpicAccountId , pub External : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1 () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1 > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1 > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1 > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Epic) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1) , "::" , stringify ! (Epic))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . External) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions__bindgen_ty_1) , "::" , stringify ! (External))) ; } # [test] fn bindgen_test_layout__tagEOS_Metrics_BeginPlayerSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Metrics_BeginPlayerSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Metrics_BeginPlayerSessionOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Metrics_BeginPlayerSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions) , "::" , stringify ! (AccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ControllerType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions) , "::" , stringify ! (ControllerType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ServerIp) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions) , "::" , stringify ! (ServerIp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . GameSessionId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_BeginPlayerSessionOptions) , "::" , stringify ! (GameSessionId))) ; } pub type EOS_Metrics_BeginPlayerSessionOptions = _tagEOS_Metrics_BeginPlayerSessionOptions ; # [repr (C)] # [derive (Copy , Clone)] pub struct _tagEOS_Metrics_EndPlayerSessionOptions { pub ApiVersion : i32 , pub AccountIdType : EOS_EMetricsAccountIdType , pub AccountId : _tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1 , } # [doc = " EndPlayerSession."] # [repr (C)] # [derive (Copy , Clone)] pub union _tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1 { pub Epic : EOS_EpicAccountId , pub External : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1 () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1 > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1 > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1 > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Epic) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1) , "::" , stringify ! (Epic))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . External) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions__bindgen_ty_1) , "::" , stringify ! (External))) ; } # [test] fn bindgen_test_layout__tagEOS_Metrics_EndPlayerSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Metrics_EndPlayerSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Metrics_EndPlayerSessionOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Metrics_EndPlayerSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions) , "::" , stringify ! (AccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Metrics_EndPlayerSessionOptions) , "::" , stringify ! (AccountId))) ; } pub type EOS_Metrics_EndPlayerSessionOptions = _tagEOS_Metrics_EndPlayerSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_AccountFeatureRestrictedInfo { pub ApiVersion : i32 , pub VerificationURI : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Auth_AccountFeatureRestrictedInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_AccountFeatureRestrictedInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_AccountFeatureRestrictedInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_AccountFeatureRestrictedInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_AccountFeatureRestrictedInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_AccountFeatureRestrictedInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_AccountFeatureRestrictedInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . VerificationURI) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_AccountFeatureRestrictedInfo) , "::" , stringify ! (VerificationURI))) ; } pub type EOS_Auth_AccountFeatureRestrictedInfo = _tagEOS_Auth_AccountFeatureRestrictedInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_AuthHandle { _unused : [u8 ; 0] , } pub type EOS_HAuth = * mut EOS_AuthHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " All possible types of login methods, availability depends on permissions granted to the client.\n\n @see EOS_Auth_Login\n @see EOS_Auth_Credentials"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ELoginCredentialType { EOS_LCT_Password = 0 , EOS_LCT_ExchangeCode = 1 , EOS_LCT_PersistentAuth = 2 , EOS_LCT_DeviceCode = 3 , EOS_LCT_Developer = 4 , EOS_LCT_RefreshToken = 5 , EOS_LCT_AccountPortal = 6 , EOS_LCT_ExternalAuth = 7 , } # [repr (i32)] # [non_exhaustive] # [doc = " Types of auth tokens\n\n @see EOS_Auth_CopyUserAuthToken\n @see EOS_Auth_Token"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAuthTokenType { EOS_ATT_Client = 0 , EOS_ATT_User = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_Token { pub ApiVersion : i32 , pub App : * const :: std :: os :: raw :: c_char , pub ClientId : * const :: std :: os :: raw :: c_char , pub AccountId : EOS_EpicAccountId , pub AccessToken : * const :: std :: os :: raw :: c_char , pub ExpiresIn : f64 , pub ExpiresAt : * const :: std :: os :: raw :: c_char , pub AuthType : EOS_EAuthTokenType , pub RefreshToken : * const :: std :: os :: raw :: c_char , pub RefreshExpiresIn : f64 , pub RefreshExpiresAt : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Auth_Token () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_Token > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_Token > () , 88usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_Token))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_Token > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_Token))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . App) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (App))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (ClientId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccessToken) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (AccessToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExpiresIn) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (ExpiresIn))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExpiresAt) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (ExpiresAt))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AuthType) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (AuthType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RefreshToken) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (RefreshToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RefreshExpiresIn) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (RefreshExpiresIn))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RefreshExpiresAt) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Token) , "::" , stringify ! (RefreshExpiresAt))) ; } pub type EOS_Auth_Token = _tagEOS_Auth_Token ; extern "C" { # [doc = " Release the memory associated with an EOS_Auth_Token structure. This must be called on data retrieved from EOS_Auth_CopyUserAuthToken.\n\n @param AuthToken The auth token structure to be released.\n\n @see EOS_Auth_Token\n @see EOS_Auth_CopyUserAuthToken"] pub fn EOS_Auth_Token_Release (AuthToken : * mut EOS_Auth_Token) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_Credentials { pub ApiVersion : i32 , pub Id : * const :: std :: os :: raw :: c_char , pub Token : * const :: std :: os :: raw :: c_char , pub Type : EOS_ELoginCredentialType , pub SystemAuthCredentialsOptions : * mut :: std :: os :: raw :: c_void , pub ExternalType : EOS_EExternalCredentialType , } # [test] fn bindgen_test_layout__tagEOS_Auth_Credentials () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_Credentials > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_Credentials > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_Credentials))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_Credentials > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_Credentials))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Credentials) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Id) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Credentials) , "::" , stringify ! (Id))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Token) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Credentials) , "::" , stringify ! (Token))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Credentials) , "::" , stringify ! (Type))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SystemAuthCredentialsOptions) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Credentials) , "::" , stringify ! (SystemAuthCredentialsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalType) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_Credentials) , "::" , stringify ! (ExternalType))) ; } pub type EOS_Auth_Credentials = _tagEOS_Auth_Credentials ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_PinGrantInfo { pub ApiVersion : i32 , pub UserCode : * const :: std :: os :: raw :: c_char , pub VerificationURI : * const :: std :: os :: raw :: c_char , pub ExpiresIn : i32 , pub VerificationURIComplete : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Auth_PinGrantInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_PinGrantInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_PinGrantInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_PinGrantInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_PinGrantInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_PinGrantInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_PinGrantInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserCode) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_PinGrantInfo) , "::" , stringify ! (UserCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . VerificationURI) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_PinGrantInfo) , "::" , stringify ! (VerificationURI))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExpiresIn) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_PinGrantInfo) , "::" , stringify ! (ExpiresIn))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . VerificationURIComplete) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_PinGrantInfo) , "::" , stringify ! (VerificationURIComplete))) ; } pub type EOS_Auth_PinGrantInfo = _tagEOS_Auth_PinGrantInfo ; # [repr (i32)] # [non_exhaustive] # [doc = " Flags that describe user permissions"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAuthScopeFlags { EOS_AS_NoFlags = 0 , EOS_AS_BasicProfile = 1 , EOS_AS_FriendsList = 2 , EOS_AS_Presence = 4 , EOS_AS_FriendsManagement = 8 , EOS_AS_Email = 16 , EOS_AS_Country = 32 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_LoginOptions { pub ApiVersion : i32 , pub Credentials : * const EOS_Auth_Credentials , pub ScopeFlags : EOS_EAuthScopeFlags , pub LoginFlags : u64 , } # [test] fn bindgen_test_layout__tagEOS_Auth_LoginOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_LoginOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_LoginOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_LoginOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_LoginOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_LoginOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Credentials) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginOptions) , "::" , stringify ! (Credentials))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ScopeFlags) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginOptions) , "::" , stringify ! (ScopeFlags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LoginFlags) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginOptions) , "::" , stringify ! (LoginFlags))) ; } pub type EOS_Auth_LoginOptions = _tagEOS_Auth_LoginOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_LoginCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub PinGrantInfo : * const EOS_Auth_PinGrantInfo , pub ContinuanceToken : EOS_ContinuanceToken , pub AccountFeatureRestrictedInfo_DEPRECATED : * const EOS_Auth_AccountFeatureRestrictedInfo , pub SelectedAccountId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_LoginCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_LoginCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_LoginCallbackInfo > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_LoginCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_LoginCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PinGrantInfo) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo) , "::" , stringify ! (PinGrantInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ContinuanceToken) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo) , "::" , stringify ! (ContinuanceToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountFeatureRestrictedInfo_DEPRECATED) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo) , "::" , stringify ! (AccountFeatureRestrictedInfo_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SelectedAccountId) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginCallbackInfo) , "::" , stringify ! (SelectedAccountId))) ; } pub type EOS_Auth_LoginCallbackInfo = _tagEOS_Auth_LoginCallbackInfo ; pub type EOS_Auth_OnLoginCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_LoginCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_LogoutOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_LogoutOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_LogoutOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_LogoutOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_LogoutOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_LogoutOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_LogoutOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LogoutOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LogoutOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Auth_LogoutOptions = _tagEOS_Auth_LogoutOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_LogoutCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_LogoutCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_LogoutCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_LogoutCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_LogoutCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_LogoutCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_LogoutCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LogoutCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LogoutCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LogoutCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Auth_LogoutCallbackInfo = _tagEOS_Auth_LogoutCallbackInfo ; pub type EOS_Auth_OnLogoutCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_LogoutCallbackInfo) > ; # [repr (i32)] # [non_exhaustive] # [doc = " Flags used to describe how the account linking operation is to be performed.\n\n @see EOS_Auth_LinkAccount"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ELinkAccountFlags { EOS_LA_NoFlags = 0 , EOS_LA_NintendoNsaId = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_LinkAccountOptions { pub ApiVersion : i32 , pub LinkAccountFlags : EOS_ELinkAccountFlags , pub ContinuanceToken : EOS_ContinuanceToken , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_LinkAccountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_LinkAccountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_LinkAccountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_LinkAccountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_LinkAccountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_LinkAccountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LinkAccountFlags) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountOptions) , "::" , stringify ! (LinkAccountFlags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ContinuanceToken) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountOptions) , "::" , stringify ! (ContinuanceToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Auth_LinkAccountOptions = _tagEOS_Auth_LinkAccountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_LinkAccountCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub PinGrantInfo : * const EOS_Auth_PinGrantInfo , pub SelectedAccountId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_LinkAccountCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_LinkAccountCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_LinkAccountCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_LinkAccountCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_LinkAccountCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_LinkAccountCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PinGrantInfo) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountCallbackInfo) , "::" , stringify ! (PinGrantInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SelectedAccountId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LinkAccountCallbackInfo) , "::" , stringify ! (SelectedAccountId))) ; } pub type EOS_Auth_LinkAccountCallbackInfo = _tagEOS_Auth_LinkAccountCallbackInfo ; pub type EOS_Auth_OnLinkAccountCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_LinkAccountCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_VerifyUserAuthOptions { pub ApiVersion : i32 , pub AuthToken : * const EOS_Auth_Token , } # [test] fn bindgen_test_layout__tagEOS_Auth_VerifyUserAuthOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_VerifyUserAuthOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_VerifyUserAuthOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_VerifyUserAuthOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_VerifyUserAuthOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_VerifyUserAuthOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyUserAuthOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AuthToken) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyUserAuthOptions) , "::" , stringify ! (AuthToken))) ; } pub type EOS_Auth_VerifyUserAuthOptions = _tagEOS_Auth_VerifyUserAuthOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_VerifyUserAuthCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Auth_VerifyUserAuthCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_VerifyUserAuthCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_VerifyUserAuthCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_VerifyUserAuthCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_VerifyUserAuthCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_VerifyUserAuthCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyUserAuthCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyUserAuthCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Auth_VerifyUserAuthCallbackInfo = _tagEOS_Auth_VerifyUserAuthCallbackInfo ; pub type EOS_Auth_OnVerifyUserAuthCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_VerifyUserAuthCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_CopyUserAuthTokenOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Auth_CopyUserAuthTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_CopyUserAuthTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_CopyUserAuthTokenOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_CopyUserAuthTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_CopyUserAuthTokenOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_CopyUserAuthTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_CopyUserAuthTokenOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Auth_CopyUserAuthTokenOptions = _tagEOS_Auth_CopyUserAuthTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_CopyIdTokenOptions { pub ApiVersion : i32 , pub AccountId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_CopyIdTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_CopyIdTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_CopyIdTokenOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_CopyIdTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_CopyIdTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_CopyIdTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_CopyIdTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_CopyIdTokenOptions) , "::" , stringify ! (AccountId))) ; } pub type EOS_Auth_CopyIdTokenOptions = _tagEOS_Auth_CopyIdTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_IdToken { pub ApiVersion : i32 , pub AccountId : EOS_EpicAccountId , pub JsonWebToken : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Auth_IdToken () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_IdToken > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_IdToken > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_IdToken))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_IdToken > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_IdToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_IdToken) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_IdToken) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . JsonWebToken) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_IdToken) , "::" , stringify ! (JsonWebToken))) ; } pub type EOS_Auth_IdToken = _tagEOS_Auth_IdToken ; extern "C" { # [doc = " Release the memory associated with an EOS_Auth_IdToken structure. This must be called on data retrieved from EOS_Auth_CopyIdToken.\n\n @param IdToken The ID token structure to be released.\n\n @see EOS_Auth_IdToken\n @see EOS_Auth_CopyIdToken"] pub fn EOS_Auth_IdToken_Release (IdToken : * mut EOS_Auth_IdToken) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_QueryIdTokenOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetAccountId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_QueryIdTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_QueryIdTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_QueryIdTokenOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_QueryIdTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_QueryIdTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_QueryIdTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_QueryIdTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_QueryIdTokenOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetAccountId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_QueryIdTokenOptions) , "::" , stringify ! (TargetAccountId))) ; } pub type EOS_Auth_QueryIdTokenOptions = _tagEOS_Auth_QueryIdTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_QueryIdTokenCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetAccountId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Auth_QueryIdTokenCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_QueryIdTokenCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_QueryIdTokenCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_QueryIdTokenCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_QueryIdTokenCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_QueryIdTokenCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_QueryIdTokenCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_QueryIdTokenCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_QueryIdTokenCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetAccountId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_QueryIdTokenCallbackInfo) , "::" , stringify ! (TargetAccountId))) ; } pub type EOS_Auth_QueryIdTokenCallbackInfo = _tagEOS_Auth_QueryIdTokenCallbackInfo ; pub type EOS_Auth_OnQueryIdTokenCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_QueryIdTokenCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_VerifyIdTokenOptions { pub ApiVersion : i32 , pub IdToken : * const EOS_Auth_IdToken , } # [test] fn bindgen_test_layout__tagEOS_Auth_VerifyIdTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_VerifyIdTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_VerifyIdTokenOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_VerifyIdTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_VerifyIdTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_VerifyIdTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IdToken) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenOptions) , "::" , stringify ! (IdToken))) ; } pub type EOS_Auth_VerifyIdTokenOptions = _tagEOS_Auth_VerifyIdTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_VerifyIdTokenCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub ApplicationId : * const :: std :: os :: raw :: c_char , pub ClientId : * const :: std :: os :: raw :: c_char , pub ProductId : * const :: std :: os :: raw :: c_char , pub SandboxId : * const :: std :: os :: raw :: c_char , pub DeploymentId : * const :: std :: os :: raw :: c_char , pub DisplayName : * const :: std :: os :: raw :: c_char , pub bIsExternalAccountInfoPresent : EOS_Bool , pub ExternalAccountIdType : EOS_EExternalAccountType , pub ExternalAccountId : * const :: std :: os :: raw :: c_char , pub ExternalAccountDisplayName : * const :: std :: os :: raw :: c_char , pub Platform : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Auth_VerifyIdTokenCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_VerifyIdTokenCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_VerifyIdTokenCallbackInfo > () , 96usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_VerifyIdTokenCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApplicationId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ApplicationId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ClientId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ProductId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (SandboxId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DeploymentId) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (DeploymentId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsExternalAccountInfoPresent) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (bIsExternalAccountInfoPresent))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountIdType) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ExternalAccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountId) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ExternalAccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountDisplayName) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ExternalAccountDisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Platform) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_VerifyIdTokenCallbackInfo) , "::" , stringify ! (Platform))) ; } pub type EOS_Auth_VerifyIdTokenCallbackInfo = _tagEOS_Auth_VerifyIdTokenCallbackInfo ; pub type EOS_Auth_OnVerifyIdTokenCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_VerifyIdTokenCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_AddNotifyLoginStatusChangedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Auth_AddNotifyLoginStatusChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_AddNotifyLoginStatusChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_AddNotifyLoginStatusChangedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_AddNotifyLoginStatusChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_AddNotifyLoginStatusChangedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_AddNotifyLoginStatusChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_AddNotifyLoginStatusChangedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Auth_AddNotifyLoginStatusChangedOptions = _tagEOS_Auth_AddNotifyLoginStatusChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_DeletePersistentAuthOptions { pub ApiVersion : i32 , pub RefreshToken : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Auth_DeletePersistentAuthOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_DeletePersistentAuthOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_DeletePersistentAuthOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_DeletePersistentAuthOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_DeletePersistentAuthOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_DeletePersistentAuthOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_DeletePersistentAuthOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RefreshToken) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_DeletePersistentAuthOptions) , "::" , stringify ! (RefreshToken))) ; } pub type EOS_Auth_DeletePersistentAuthOptions = _tagEOS_Auth_DeletePersistentAuthOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_DeletePersistentAuthCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Auth_DeletePersistentAuthCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_DeletePersistentAuthCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_DeletePersistentAuthCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_DeletePersistentAuthCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_DeletePersistentAuthCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_DeletePersistentAuthCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_DeletePersistentAuthCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_DeletePersistentAuthCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Auth_DeletePersistentAuthCallbackInfo = _tagEOS_Auth_DeletePersistentAuthCallbackInfo ; pub type EOS_Auth_OnDeletePersistentAuthCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_DeletePersistentAuthCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Auth_LoginStatusChangedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub PrevStatus : EOS_ELoginStatus , pub CurrentStatus : EOS_ELoginStatus , } # [test] fn bindgen_test_layout__tagEOS_Auth_LoginStatusChangedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Auth_LoginStatusChangedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Auth_LoginStatusChangedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Auth_LoginStatusChangedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Auth_LoginStatusChangedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Auth_LoginStatusChangedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginStatusChangedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginStatusChangedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PrevStatus) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginStatusChangedCallbackInfo) , "::" , stringify ! (PrevStatus))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentStatus) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Auth_LoginStatusChangedCallbackInfo) , "::" , stringify ! (CurrentStatus))) ; } pub type EOS_Auth_LoginStatusChangedCallbackInfo = _tagEOS_Auth_LoginStatusChangedCallbackInfo ; pub type EOS_Auth_OnLoginStatusChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Auth_LoginStatusChangedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_EcomHandle { _unused : [u8 ; 0] , } pub type EOS_HEcom = * mut EOS_EcomHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_Ecom_TransactionHandle { _unused : [u8 ; 0] , } # [doc = " This handle is copied when EOS_Ecom_CopyTransactionById or EOS_Ecom_CopyTransactionByIndex is called.\n A EOS_Ecom_CheckoutCallbackInfo provides the ID for the copy.\n After being copied, EOS_Ecom_Transaction_Release must be called.\n\n @see EOS_Ecom_CheckoutCallbackInfo\n @see EOS_Ecom_CopyTransactionById\n @see EOS_Ecom_CopyTransactionByIndex\n @see EOS_Ecom_Transaction_Release"] pub type EOS_Ecom_HTransaction = * mut EOS_Ecom_TransactionHandle ; # [doc = " A unique identifier for a catalog item defined and stored with the backend catalog service.\n A catalog item represents a distinct object within the catalog.  When acquired by an account, an\n entitlement is granted that references a specific catalog item."] pub type EOS_Ecom_CatalogItemId = * const :: std :: os :: raw :: c_char ; # [doc = " A unique identifier for a catalog offer defined and stored with the backend catalog service.\n A catalog offer is a purchasable collection of 1 or more items, associated with a price (which\n could be 0).  When an offer is purchased an entitlement is granted for each of the items\n referenced by the offer."] pub type EOS_Ecom_CatalogOfferId = * const :: std :: os :: raw :: c_char ; # [doc = " An identifier which is defined on a catalog item and stored with the backend catalog service.\n The entitlement name may not be unique.  A catalog may be configured with multiple items with the\n same entitlement name in order to define a logical grouping of entitlements.  This is used to\n retrieve all entitlements granted to an account grouped in this way.\n\n @see EOS_Ecom_QueryEntitlements"] pub type EOS_Ecom_EntitlementName = * const :: std :: os :: raw :: c_char ; # [doc = " A unique identifier for an entitlement owned by an account.  An entitlement is always associated\n with a single account.  The entitlement ID is provided to allow redeeming the entitlement as\n well as identify individual entitlement grants.\n\n @see EOS_Ecom_QueryEntitlements\n @see EOS_Ecom_RedeemEntitlements"] pub type EOS_Ecom_EntitlementId = * const :: std :: os :: raw :: c_char ; # [doc = " A unique identifier for the Sandbox.\n\n @see EOS_Ecom_QueryOwnershipBySandboxIds"] pub type EOS_Ecom_SandboxId = * const :: std :: os :: raw :: c_char ; # [repr (i32)] # [non_exhaustive] # [doc = " An enumeration of the different ownership statuses."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EOwnershipStatus { EOS_OS_NotOwned = 0 , EOS_OS_Owned = 1 , } # [repr (i32)] # [non_exhaustive] # [doc = " An enumeration defining the type of catalog item.  The primary use is to identify how the item is expended."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EEcomItemType { EOS_EIT_Durable = 0 , EOS_EIT_Consumable = 1 , EOS_EIT_Other = 2 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_Entitlement { pub ApiVersion : i32 , pub EntitlementName : EOS_Ecom_EntitlementName , pub EntitlementId : EOS_Ecom_EntitlementId , pub CatalogItemId : EOS_Ecom_CatalogItemId , pub ServerIndex : i32 , pub bRedeemed : EOS_Bool , pub EndTimestamp : i64 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_Entitlement () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_Entitlement > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_Entitlement > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_Entitlement))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_Entitlement > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_Entitlement))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Entitlement) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Entitlement) , "::" , stringify ! (EntitlementName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Entitlement) , "::" , stringify ! (EntitlementId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogItemId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Entitlement) , "::" , stringify ! (CatalogItemId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ServerIndex) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Entitlement) , "::" , stringify ! (ServerIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bRedeemed) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Entitlement) , "::" , stringify ! (bRedeemed))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EndTimestamp) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Entitlement) , "::" , stringify ! (EndTimestamp))) ; } pub type EOS_Ecom_Entitlement = _tagEOS_Ecom_Entitlement ; extern "C" { # [doc = " Release the memory associated with an EOS_Ecom_Entitlement structure. This must be called on data\n retrieved from EOS_Ecom_CopyEntitlementByIndex and EOS_Ecom_CopyEntitlementById.\n\n @param Entitlement - The entitlement structure to be released\n\n @see EOS_Ecom_Entitlement\n @see EOS_Ecom_CopyEntitlementByIndex\n @see EOS_Ecom_CopyEntitlementById"] pub fn EOS_Ecom_Entitlement_Release (Entitlement : * mut EOS_Ecom_Entitlement) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_ItemOwnership { pub ApiVersion : i32 , pub Id : EOS_Ecom_CatalogItemId , pub OwnershipStatus : EOS_EOwnershipStatus , } # [test] fn bindgen_test_layout__tagEOS_Ecom_ItemOwnership () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_ItemOwnership > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_ItemOwnership > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_ItemOwnership))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_ItemOwnership > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_ItemOwnership))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_ItemOwnership) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Id) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_ItemOwnership) , "::" , stringify ! (Id))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OwnershipStatus) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_ItemOwnership) , "::" , stringify ! (OwnershipStatus))) ; } pub type EOS_Ecom_ItemOwnership = _tagEOS_Ecom_ItemOwnership ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CatalogItem { pub ApiVersion : i32 , pub CatalogNamespace : * const :: std :: os :: raw :: c_char , pub Id : EOS_Ecom_CatalogItemId , pub EntitlementName : EOS_Ecom_EntitlementName , pub TitleText : * const :: std :: os :: raw :: c_char , pub DescriptionText : * const :: std :: os :: raw :: c_char , pub LongDescriptionText : * const :: std :: os :: raw :: c_char , pub TechnicalDetailsText : * const :: std :: os :: raw :: c_char , pub DeveloperText : * const :: std :: os :: raw :: c_char , pub ItemType : EOS_EEcomItemType , pub EntitlementEndTimestamp : i64 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CatalogItem () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CatalogItem > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CatalogItem > () , 88usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CatalogItem))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CatalogItem > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CatalogItem))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogNamespace) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (CatalogNamespace))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Id) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (Id))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (EntitlementName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TitleText) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (TitleText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DescriptionText) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (DescriptionText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LongDescriptionText) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (LongDescriptionText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TechnicalDetailsText) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (TechnicalDetailsText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DeveloperText) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (DeveloperText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemType) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (ItemType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementEndTimestamp) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogItem) , "::" , stringify ! (EntitlementEndTimestamp))) ; } pub type EOS_Ecom_CatalogItem = _tagEOS_Ecom_CatalogItem ; extern "C" { # [doc = " Release the memory associated with an EOS_Ecom_CatalogItem structure. This must be called on data\n retrieved from EOS_Ecom_CopyOfferItemByIndex.\n\n @param CatalogItem - The catalog item structure to be released\n\n @see EOS_Ecom_CatalogItem\n @see EOS_Ecom_CopyOfferItemByIndex"] pub fn EOS_Ecom_CatalogItem_Release (CatalogItem : * mut EOS_Ecom_CatalogItem) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CatalogOffer { pub ApiVersion : i32 , pub ServerIndex : i32 , pub CatalogNamespace : * const :: std :: os :: raw :: c_char , pub Id : EOS_Ecom_CatalogOfferId , pub TitleText : * const :: std :: os :: raw :: c_char , pub DescriptionText : * const :: std :: os :: raw :: c_char , pub LongDescriptionText : * const :: std :: os :: raw :: c_char , pub TechnicalDetailsText_DEPRECATED : * const :: std :: os :: raw :: c_char , pub CurrencyCode : * const :: std :: os :: raw :: c_char , pub PriceResult : EOS_EResult , pub OriginalPrice_DEPRECATED : u32 , pub CurrentPrice_DEPRECATED : u32 , pub DiscountPercentage : u8 , pub ExpirationTimestamp : i64 , pub PurchasedCount_DEPRECATED : u32 , pub PurchaseLimit : i32 , pub bAvailableForPurchase : EOS_Bool , pub OriginalPrice64 : u64 , pub CurrentPrice64 : u64 , pub DecimalPoint : u32 , pub ReleaseDateTimestamp : i64 , pub EffectiveDateTimestamp : i64 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CatalogOffer () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CatalogOffer > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CatalogOffer > () , 144usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CatalogOffer))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CatalogOffer > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CatalogOffer))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ServerIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (ServerIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogNamespace) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (CatalogNamespace))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Id) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (Id))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TitleText) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (TitleText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DescriptionText) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (DescriptionText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LongDescriptionText) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (LongDescriptionText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TechnicalDetailsText_DEPRECATED) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (TechnicalDetailsText_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrencyCode) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (CurrencyCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PriceResult) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (PriceResult))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OriginalPrice_DEPRECATED) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (OriginalPrice_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentPrice_DEPRECATED) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (CurrentPrice_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DiscountPercentage) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (DiscountPercentage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExpirationTimestamp) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (ExpirationTimestamp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PurchasedCount_DEPRECATED) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (PurchasedCount_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PurchaseLimit) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (PurchaseLimit))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAvailableForPurchase) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (bAvailableForPurchase))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OriginalPrice64) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (OriginalPrice64))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentPrice64) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (CurrentPrice64))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DecimalPoint) as usize - ptr as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (DecimalPoint))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReleaseDateTimestamp) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (ReleaseDateTimestamp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EffectiveDateTimestamp) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogOffer) , "::" , stringify ! (EffectiveDateTimestamp))) ; } pub type EOS_Ecom_CatalogOffer = _tagEOS_Ecom_CatalogOffer ; extern "C" { # [doc = " Release the memory associated with an EOS_Ecom_CatalogOffer structure. This must be called on data\n retrieved from EOS_Ecom_CopyOfferByIndex.\n\n @param CatalogOffer - The catalog offer structure to be released\n\n @see EOS_Ecom_CatalogOffer\n @see EOS_Ecom_CopyOfferByIndex"] pub fn EOS_Ecom_CatalogOffer_Release (CatalogOffer : * mut EOS_Ecom_CatalogOffer) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_KeyImageInfo { pub ApiVersion : i32 , pub Type : * const :: std :: os :: raw :: c_char , pub Url : * const :: std :: os :: raw :: c_char , pub Width : u32 , pub Height : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_KeyImageInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_KeyImageInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_KeyImageInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_KeyImageInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_KeyImageInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_KeyImageInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_KeyImageInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_KeyImageInfo) , "::" , stringify ! (Type))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Url) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_KeyImageInfo) , "::" , stringify ! (Url))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Width) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_KeyImageInfo) , "::" , stringify ! (Width))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Height) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_KeyImageInfo) , "::" , stringify ! (Height))) ; } pub type EOS_Ecom_KeyImageInfo = _tagEOS_Ecom_KeyImageInfo ; extern "C" { # [doc = " Release the memory associated with an EOS_Ecom_KeyImageInfo structure. This must be called on data\n retrieved from EOS_Ecom_CopyItemImageInfoByIndex.\n\n @param KeyImageInfo - The key image info structure to be released\n\n @see EOS_Ecom_KeyImageInfo\n @see EOS_Ecom_CopyItemImageInfoByIndex"] pub fn EOS_Ecom_KeyImageInfo_Release (KeyImageInfo : * mut EOS_Ecom_KeyImageInfo) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CatalogRelease { pub ApiVersion : i32 , pub CompatibleAppIdCount : u32 , pub CompatibleAppIds : * mut * const :: std :: os :: raw :: c_char , pub CompatiblePlatformCount : u32 , pub CompatiblePlatforms : * mut * const :: std :: os :: raw :: c_char , pub ReleaseNote : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CatalogRelease () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CatalogRelease > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CatalogRelease > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CatalogRelease))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CatalogRelease > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CatalogRelease))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogRelease) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CompatibleAppIdCount) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogRelease) , "::" , stringify ! (CompatibleAppIdCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CompatibleAppIds) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogRelease) , "::" , stringify ! (CompatibleAppIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CompatiblePlatformCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogRelease) , "::" , stringify ! (CompatiblePlatformCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CompatiblePlatforms) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogRelease) , "::" , stringify ! (CompatiblePlatforms))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReleaseNote) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CatalogRelease) , "::" , stringify ! (ReleaseNote))) ; } pub type EOS_Ecom_CatalogRelease = _tagEOS_Ecom_CatalogRelease ; extern "C" { # [doc = " Release the memory associated with an EOS_Ecom_CatalogRelease structure. This must be called on\n data retrieved from EOS_Ecom_CopyItemReleaseByIndex.\n\n @param CatalogRelease - The catalog release structure to be released\n\n @see EOS_Ecom_CatalogRelease\n @see EOS_Ecom_CopyItemReleaseByIndex"] pub fn EOS_Ecom_CatalogRelease_Release (CatalogRelease : * mut EOS_Ecom_CatalogRelease) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CheckoutEntry { pub ApiVersion : i32 , pub OfferId : EOS_Ecom_CatalogOfferId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CheckoutEntry () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CheckoutEntry > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CheckoutEntry > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CheckoutEntry))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CheckoutEntry > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CheckoutEntry))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutEntry) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OfferId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutEntry) , "::" , stringify ! (OfferId))) ; } pub type EOS_Ecom_CheckoutEntry = _tagEOS_Ecom_CheckoutEntry ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOwnershipOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub CatalogItemIds : * mut EOS_Ecom_CatalogItemId , pub CatalogItemIdCount : u32 , pub CatalogNamespace : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOwnershipOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOwnershipOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOwnershipOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOwnershipOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOwnershipOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOwnershipOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogItemIds) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipOptions) , "::" , stringify ! (CatalogItemIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogItemIdCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipOptions) , "::" , stringify ! (CatalogItemIdCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogNamespace) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipOptions) , "::" , stringify ! (CatalogNamespace))) ; } pub type EOS_Ecom_QueryOwnershipOptions = _tagEOS_Ecom_QueryOwnershipOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOwnershipCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub ItemOwnership : * const EOS_Ecom_ItemOwnership , pub ItemOwnershipCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOwnershipCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOwnershipCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOwnershipCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOwnershipCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOwnershipCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOwnershipCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemOwnership) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipCallbackInfo) , "::" , stringify ! (ItemOwnership))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemOwnershipCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipCallbackInfo) , "::" , stringify ! (ItemOwnershipCount))) ; } pub type EOS_Ecom_QueryOwnershipCallbackInfo = _tagEOS_Ecom_QueryOwnershipCallbackInfo ; pub type EOS_Ecom_OnQueryOwnershipCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_QueryOwnershipCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub SandboxIds : * mut EOS_Ecom_SandboxId , pub SandboxIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxIds) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions) , "::" , stringify ! (SandboxIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxIdsCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions) , "::" , stringify ! (SandboxIdsCount))) ; } pub type EOS_Ecom_QueryOwnershipBySandboxIdsOptions = _tagEOS_Ecom_QueryOwnershipBySandboxIdsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_SandboxIdItemOwnership { pub SandboxId : EOS_Ecom_SandboxId , pub OwnedCatalogItemIds : * const EOS_Ecom_CatalogItemId , pub OwnedCatalogItemIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_SandboxIdItemOwnership () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_SandboxIdItemOwnership > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_SandboxIdItemOwnership > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_SandboxIdItemOwnership))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_SandboxIdItemOwnership > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_SandboxIdItemOwnership))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxId) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_SandboxIdItemOwnership) , "::" , stringify ! (SandboxId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OwnedCatalogItemIds) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_SandboxIdItemOwnership) , "::" , stringify ! (OwnedCatalogItemIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OwnedCatalogItemIdsCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_SandboxIdItemOwnership) , "::" , stringify ! (OwnedCatalogItemIdsCount))) ; } pub type EOS_Ecom_SandboxIdItemOwnership = _tagEOS_Ecom_SandboxIdItemOwnership ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub SandboxIdItemOwnerships : * const EOS_Ecom_SandboxIdItemOwnership , pub SandboxIdItemOwnershipsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxIdItemOwnerships) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo) , "::" , stringify ! (SandboxIdItemOwnerships))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxIdItemOwnershipsCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo) , "::" , stringify ! (SandboxIdItemOwnershipsCount))) ; } pub type EOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo = _tagEOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo ; pub type EOS_Ecom_OnQueryOwnershipBySandboxIdsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_QueryOwnershipBySandboxIdsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOwnershipTokenOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub CatalogItemIds : * mut EOS_Ecom_CatalogItemId , pub CatalogItemIdCount : u32 , pub CatalogNamespace : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOwnershipTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOwnershipTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOwnershipTokenOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOwnershipTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogItemIds) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenOptions) , "::" , stringify ! (CatalogItemIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogItemIdCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenOptions) , "::" , stringify ! (CatalogItemIdCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CatalogNamespace) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenOptions) , "::" , stringify ! (CatalogNamespace))) ; } pub type EOS_Ecom_QueryOwnershipTokenOptions = _tagEOS_Ecom_QueryOwnershipTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOwnershipTokenCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub OwnershipToken : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOwnershipTokenCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOwnershipTokenCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOwnershipTokenCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOwnershipTokenCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OwnershipToken) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOwnershipTokenCallbackInfo) , "::" , stringify ! (OwnershipToken))) ; } pub type EOS_Ecom_QueryOwnershipTokenCallbackInfo = _tagEOS_Ecom_QueryOwnershipTokenCallbackInfo ; pub type EOS_Ecom_OnQueryOwnershipTokenCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_QueryOwnershipTokenCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryEntitlementsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub EntitlementNames : * mut EOS_Ecom_EntitlementName , pub EntitlementNameCount : u32 , pub bIncludeRedeemed : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryEntitlementsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryEntitlementsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryEntitlementsOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryEntitlementsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryEntitlementsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementNames) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsOptions) , "::" , stringify ! (EntitlementNames))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementNameCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsOptions) , "::" , stringify ! (EntitlementNameCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIncludeRedeemed) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsOptions) , "::" , stringify ! (bIncludeRedeemed))) ; } pub type EOS_Ecom_QueryEntitlementsOptions = _tagEOS_Ecom_QueryEntitlementsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryEntitlementsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryEntitlementsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryEntitlementsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryEntitlementsCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryEntitlementsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryEntitlementsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Ecom_QueryEntitlementsCallbackInfo = _tagEOS_Ecom_QueryEntitlementsCallbackInfo ; pub type EOS_Ecom_OnQueryEntitlementsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_QueryEntitlementsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryEntitlementTokenOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub EntitlementNames : * mut EOS_Ecom_EntitlementName , pub EntitlementNameCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryEntitlementTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryEntitlementTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryEntitlementTokenOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryEntitlementTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementNames) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenOptions) , "::" , stringify ! (EntitlementNames))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementNameCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenOptions) , "::" , stringify ! (EntitlementNameCount))) ; } pub type EOS_Ecom_QueryEntitlementTokenOptions = _tagEOS_Ecom_QueryEntitlementTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryEntitlementTokenCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub EntitlementToken : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryEntitlementTokenCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryEntitlementTokenCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryEntitlementTokenCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryEntitlementTokenCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementToken) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryEntitlementTokenCallbackInfo) , "::" , stringify ! (EntitlementToken))) ; } pub type EOS_Ecom_QueryEntitlementTokenCallbackInfo = _tagEOS_Ecom_QueryEntitlementTokenCallbackInfo ; pub type EOS_Ecom_OnQueryEntitlementTokenCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_QueryEntitlementTokenCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOffersOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OverrideCatalogNamespace : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOffersOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOffersOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOffersOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOffersOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOffersOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOffersOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOffersOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOffersOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverrideCatalogNamespace) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOffersOptions) , "::" , stringify ! (OverrideCatalogNamespace))) ; } pub type EOS_Ecom_QueryOffersOptions = _tagEOS_Ecom_QueryOffersOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_QueryOffersCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_QueryOffersCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_QueryOffersCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_QueryOffersCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_QueryOffersCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_QueryOffersCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_QueryOffersCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOffersCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOffersCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_QueryOffersCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Ecom_QueryOffersCallbackInfo = _tagEOS_Ecom_QueryOffersCallbackInfo ; pub type EOS_Ecom_OnQueryOffersCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_QueryOffersCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CheckoutOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OverrideCatalogNamespace : * const :: std :: os :: raw :: c_char , pub EntryCount : u32 , pub Entries : * const EOS_Ecom_CheckoutEntry , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CheckoutOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CheckoutOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CheckoutOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CheckoutOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CheckoutOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CheckoutOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverrideCatalogNamespace) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutOptions) , "::" , stringify ! (OverrideCatalogNamespace))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntryCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutOptions) , "::" , stringify ! (EntryCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Entries) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutOptions) , "::" , stringify ! (Entries))) ; } pub type EOS_Ecom_CheckoutOptions = _tagEOS_Ecom_CheckoutOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CheckoutCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TransactionId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CheckoutCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CheckoutCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CheckoutCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CheckoutCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CheckoutCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CheckoutCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TransactionId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CheckoutCallbackInfo) , "::" , stringify ! (TransactionId))) ; } pub type EOS_Ecom_CheckoutCallbackInfo = _tagEOS_Ecom_CheckoutCallbackInfo ; pub type EOS_Ecom_OnCheckoutCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_CheckoutCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_RedeemEntitlementsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub EntitlementIdCount : u32 , pub EntitlementIds : * mut EOS_Ecom_EntitlementId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_RedeemEntitlementsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_RedeemEntitlementsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_RedeemEntitlementsOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_RedeemEntitlementsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementIdCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsOptions) , "::" , stringify ! (EntitlementIdCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementIds) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsOptions) , "::" , stringify ! (EntitlementIds))) ; } pub type EOS_Ecom_RedeemEntitlementsOptions = _tagEOS_Ecom_RedeemEntitlementsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_RedeemEntitlementsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub RedeemedEntitlementIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_RedeemEntitlementsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_RedeemEntitlementsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_RedeemEntitlementsCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_RedeemEntitlementsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RedeemedEntitlementIdsCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_RedeemEntitlementsCallbackInfo) , "::" , stringify ! (RedeemedEntitlementIdsCount))) ; } pub type EOS_Ecom_RedeemEntitlementsCallbackInfo = _tagEOS_Ecom_RedeemEntitlementsCallbackInfo ; pub type EOS_Ecom_OnRedeemEntitlementsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Ecom_RedeemEntitlementsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Ecom_GetLastRedeemedEntitlementsCountOptions = _tagEOS_Ecom_GetLastRedeemedEntitlementsCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub RedeemedEntitlementIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RedeemedEntitlementIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions) , "::" , stringify ! (RedeemedEntitlementIndex))) ; } pub type EOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions = _tagEOS_Ecom_CopyLastRedeemedEntitlementByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetEntitlementsCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetEntitlementsCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetEntitlementsCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetEntitlementsCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetEntitlementsCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetEntitlementsCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetEntitlementsCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetEntitlementsCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetEntitlementsCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Ecom_GetEntitlementsCountOptions = _tagEOS_Ecom_GetEntitlementsCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetEntitlementsByNameCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub EntitlementName : EOS_Ecom_EntitlementName , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetEntitlementsByNameCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetEntitlementsByNameCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetEntitlementsByNameCountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetEntitlementsByNameCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetEntitlementsByNameCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetEntitlementsByNameCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetEntitlementsByNameCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetEntitlementsByNameCountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetEntitlementsByNameCountOptions) , "::" , stringify ! (EntitlementName))) ; } pub type EOS_Ecom_GetEntitlementsByNameCountOptions = _tagEOS_Ecom_GetEntitlementsByNameCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyEntitlementByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub EntitlementIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyEntitlementByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyEntitlementByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyEntitlementByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyEntitlementByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIndexOptions) , "::" , stringify ! (EntitlementIndex))) ; } pub type EOS_Ecom_CopyEntitlementByIndexOptions = _tagEOS_Ecom_CopyEntitlementByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub EntitlementName : EOS_Ecom_EntitlementName , pub Index : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions) , "::" , stringify ! (EntitlementName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_Ecom_CopyEntitlementByNameAndIndexOptions = _tagEOS_Ecom_CopyEntitlementByNameAndIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyEntitlementByIdOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub EntitlementId : EOS_Ecom_EntitlementId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyEntitlementByIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyEntitlementByIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyEntitlementByIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyEntitlementByIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIdOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyEntitlementByIdOptions) , "::" , stringify ! (EntitlementId))) ; } pub type EOS_Ecom_CopyEntitlementByIdOptions = _tagEOS_Ecom_CopyEntitlementByIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetOfferCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetOfferCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetOfferCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetOfferCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetOfferCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetOfferCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetOfferCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Ecom_GetOfferCountOptions = _tagEOS_Ecom_GetOfferCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyOfferByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OfferIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyOfferByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyOfferByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyOfferByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyOfferByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyOfferByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyOfferByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OfferIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferByIndexOptions) , "::" , stringify ! (OfferIndex))) ; } pub type EOS_Ecom_CopyOfferByIndexOptions = _tagEOS_Ecom_CopyOfferByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyOfferByIdOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OfferId : EOS_Ecom_CatalogOfferId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyOfferByIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyOfferByIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyOfferByIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyOfferByIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyOfferByIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyOfferByIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferByIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferByIdOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OfferId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferByIdOptions) , "::" , stringify ! (OfferId))) ; } pub type EOS_Ecom_CopyOfferByIdOptions = _tagEOS_Ecom_CopyOfferByIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetOfferItemCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OfferId : EOS_Ecom_CatalogOfferId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetOfferItemCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetOfferItemCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetOfferItemCountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetOfferItemCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetOfferItemCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetOfferItemCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferItemCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferItemCountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OfferId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferItemCountOptions) , "::" , stringify ! (OfferId))) ; } pub type EOS_Ecom_GetOfferItemCountOptions = _tagEOS_Ecom_GetOfferItemCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyOfferItemByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OfferId : EOS_Ecom_CatalogOfferId , pub ItemIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyOfferItemByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyOfferItemByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyOfferItemByIndexOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyOfferItemByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyOfferItemByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyOfferItemByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferItemByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferItemByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OfferId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferItemByIndexOptions) , "::" , stringify ! (OfferId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemIndex) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferItemByIndexOptions) , "::" , stringify ! (ItemIndex))) ; } pub type EOS_Ecom_CopyOfferItemByIndexOptions = _tagEOS_Ecom_CopyOfferItemByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyItemByIdOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub ItemId : EOS_Ecom_CatalogItemId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyItemByIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyItemByIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyItemByIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyItemByIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyItemByIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyItemByIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemByIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemByIdOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemByIdOptions) , "::" , stringify ! (ItemId))) ; } pub type EOS_Ecom_CopyItemByIdOptions = _tagEOS_Ecom_CopyItemByIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetOfferImageInfoCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OfferId : EOS_Ecom_CatalogOfferId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetOfferImageInfoCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetOfferImageInfoCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetOfferImageInfoCountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetOfferImageInfoCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetOfferImageInfoCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetOfferImageInfoCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferImageInfoCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferImageInfoCountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OfferId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetOfferImageInfoCountOptions) , "::" , stringify ! (OfferId))) ; } pub type EOS_Ecom_GetOfferImageInfoCountOptions = _tagEOS_Ecom_GetOfferImageInfoCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyOfferImageInfoByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub OfferId : EOS_Ecom_CatalogOfferId , pub ImageInfoIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyOfferImageInfoByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyOfferImageInfoByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyOfferImageInfoByIndexOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyOfferImageInfoByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyOfferImageInfoByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyOfferImageInfoByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferImageInfoByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferImageInfoByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OfferId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferImageInfoByIndexOptions) , "::" , stringify ! (OfferId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ImageInfoIndex) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyOfferImageInfoByIndexOptions) , "::" , stringify ! (ImageInfoIndex))) ; } pub type EOS_Ecom_CopyOfferImageInfoByIndexOptions = _tagEOS_Ecom_CopyOfferImageInfoByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetItemImageInfoCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub ItemId : EOS_Ecom_CatalogItemId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetItemImageInfoCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetItemImageInfoCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetItemImageInfoCountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetItemImageInfoCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetItemImageInfoCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetItemImageInfoCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetItemImageInfoCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetItemImageInfoCountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetItemImageInfoCountOptions) , "::" , stringify ! (ItemId))) ; } pub type EOS_Ecom_GetItemImageInfoCountOptions = _tagEOS_Ecom_GetItemImageInfoCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyItemImageInfoByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub ItemId : EOS_Ecom_CatalogItemId , pub ImageInfoIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyItemImageInfoByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyItemImageInfoByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyItemImageInfoByIndexOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyItemImageInfoByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyItemImageInfoByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyItemImageInfoByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemImageInfoByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemImageInfoByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemImageInfoByIndexOptions) , "::" , stringify ! (ItemId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ImageInfoIndex) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemImageInfoByIndexOptions) , "::" , stringify ! (ImageInfoIndex))) ; } pub type EOS_Ecom_CopyItemImageInfoByIndexOptions = _tagEOS_Ecom_CopyItemImageInfoByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetItemReleaseCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub ItemId : EOS_Ecom_CatalogItemId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetItemReleaseCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetItemReleaseCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetItemReleaseCountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetItemReleaseCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetItemReleaseCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetItemReleaseCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetItemReleaseCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetItemReleaseCountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetItemReleaseCountOptions) , "::" , stringify ! (ItemId))) ; } pub type EOS_Ecom_GetItemReleaseCountOptions = _tagEOS_Ecom_GetItemReleaseCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyItemReleaseByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub ItemId : EOS_Ecom_CatalogItemId , pub ReleaseIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyItemReleaseByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyItemReleaseByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyItemReleaseByIndexOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyItemReleaseByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyItemReleaseByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyItemReleaseByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemReleaseByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemReleaseByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemReleaseByIndexOptions) , "::" , stringify ! (ItemId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReleaseIndex) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyItemReleaseByIndexOptions) , "::" , stringify ! (ReleaseIndex))) ; } pub type EOS_Ecom_CopyItemReleaseByIndexOptions = _tagEOS_Ecom_CopyItemReleaseByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_GetTransactionCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Ecom_GetTransactionCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_GetTransactionCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_GetTransactionCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_GetTransactionCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_GetTransactionCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_GetTransactionCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetTransactionCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_GetTransactionCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Ecom_GetTransactionCountOptions = _tagEOS_Ecom_GetTransactionCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyTransactionByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TransactionIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyTransactionByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyTransactionByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyTransactionByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyTransactionByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyTransactionByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TransactionIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIndexOptions) , "::" , stringify ! (TransactionIndex))) ; } pub type EOS_Ecom_CopyTransactionByIndexOptions = _tagEOS_Ecom_CopyTransactionByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_CopyTransactionByIdOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TransactionId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Ecom_CopyTransactionByIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_CopyTransactionByIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_CopyTransactionByIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_CopyTransactionByIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_CopyTransactionByIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIdOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TransactionId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_CopyTransactionByIdOptions) , "::" , stringify ! (TransactionId))) ; } pub type EOS_Ecom_CopyTransactionByIdOptions = _tagEOS_Ecom_CopyTransactionByIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_Transaction_GetEntitlementsCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_Transaction_GetEntitlementsCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_Transaction_GetEntitlementsCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_Transaction_GetEntitlementsCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_Transaction_GetEntitlementsCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_Transaction_GetEntitlementsCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_Transaction_GetEntitlementsCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Transaction_GetEntitlementsCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Ecom_Transaction_GetEntitlementsCountOptions = _tagEOS_Ecom_Transaction_GetEntitlementsCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions { pub ApiVersion : i32 , pub EntitlementIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EntitlementIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions) , "::" , stringify ! (EntitlementIndex))) ; } pub type EOS_Ecom_Transaction_CopyEntitlementByIndexOptions = _tagEOS_Ecom_Transaction_CopyEntitlementByIndexOptions ; extern "C" { # [doc = " Release the memory associated with an EOS_Ecom_HTransaction.  Is expected to be called after\n being received from a EOS_Ecom_CheckoutCallbackInfo.\n\n @param Transaction A handle to a transaction.\n\n @see EOS_Ecom_CheckoutCallbackInfo\n @see EOS_Ecom_GetTransactionCount\n @see EOS_Ecom_CopyTransactionByIndex"] pub fn EOS_Ecom_Transaction_Release (Transaction : EOS_Ecom_HTransaction) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_UIHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the UI interface"] pub type EOS_HUI = * mut EOS_UIHandle ; # [doc = " ID representing a specific UI event."] pub type EOS_UI_EventId = u64 ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_ShowFriendsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_ShowFriendsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_ShowFriendsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_ShowFriendsOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_ShowFriendsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_ShowFriendsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_ShowFriendsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowFriendsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowFriendsOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_UI_ShowFriendsOptions = _tagEOS_UI_ShowFriendsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_ShowFriendsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_ShowFriendsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_ShowFriendsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_ShowFriendsCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_ShowFriendsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_ShowFriendsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_ShowFriendsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowFriendsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowFriendsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowFriendsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_UI_ShowFriendsCallbackInfo = _tagEOS_UI_ShowFriendsCallbackInfo ; pub type EOS_UI_OnShowFriendsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UI_ShowFriendsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_HideFriendsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_HideFriendsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_HideFriendsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_HideFriendsOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_HideFriendsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_HideFriendsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_HideFriendsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_HideFriendsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_HideFriendsOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_UI_HideFriendsOptions = _tagEOS_UI_HideFriendsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_HideFriendsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_HideFriendsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_HideFriendsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_HideFriendsCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_HideFriendsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_HideFriendsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_HideFriendsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_HideFriendsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_HideFriendsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_HideFriendsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_UI_HideFriendsCallbackInfo = _tagEOS_UI_HideFriendsCallbackInfo ; pub type EOS_UI_OnHideFriendsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UI_HideFriendsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_GetFriendsVisibleOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_GetFriendsVisibleOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_GetFriendsVisibleOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_GetFriendsVisibleOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_GetFriendsVisibleOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_GetFriendsVisibleOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_GetFriendsVisibleOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_GetFriendsVisibleOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_GetFriendsVisibleOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_UI_GetFriendsVisibleOptions = _tagEOS_UI_GetFriendsVisibleOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_GetFriendsExclusiveInputOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_GetFriendsExclusiveInputOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_GetFriendsExclusiveInputOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_GetFriendsExclusiveInputOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_GetFriendsExclusiveInputOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_GetFriendsExclusiveInputOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_GetFriendsExclusiveInputOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_GetFriendsExclusiveInputOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_GetFriendsExclusiveInputOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_UI_GetFriendsExclusiveInputOptions = _tagEOS_UI_GetFriendsExclusiveInputOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_UI_AddNotifyDisplaySettingsUpdatedOptions = _tagEOS_UI_AddNotifyDisplaySettingsUpdatedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub bIsVisible : EOS_Bool , pub bIsExclusiveInput : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsVisible) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo) , "::" , stringify ! (bIsVisible))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsExclusiveInput) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo) , "::" , stringify ! (bIsExclusiveInput))) ; } pub type EOS_UI_OnDisplaySettingsUpdatedCallbackInfo = _tagEOS_UI_OnDisplaySettingsUpdatedCallbackInfo ; pub type EOS_UI_OnDisplaySettingsUpdatedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UI_OnDisplaySettingsUpdatedCallbackInfo) > ; impl EOS_UI_EKeyCombination { pub const EOS_UIK_Key1 : EOS_UI_EKeyCombination = EOS_UI_EKeyCombination :: EOS_UIK_ModifierShift ; } # [repr (i32)] # [non_exhaustive] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_UI_EKeyCombination { EOS_UIK_ModifierShift = 16 , EOS_UIK_KeyTypeMask = 65535 , EOS_UIK_ModifierMask = - 65536 , EOS_UIK_Shift = 65536 , EOS_UIK_Control = 131072 , EOS_UIK_Alt = 262144 , EOS_UIK_Meta = 524288 , EOS_UIK_ValidModifierMask = 983040 , EOS_UIK_None = 0 , EOS_UIK_Space = 1 , EOS_UIK_Backspace = 2 , EOS_UIK_Tab = 3 , EOS_UIK_Escape = 4 , EOS_UIK_PageUp = 5 , EOS_UIK_PageDown = 6 , EOS_UIK_End = 7 , EOS_UIK_Home = 8 , EOS_UIK_Insert = 9 , EOS_UIK_Delete = 10 , EOS_UIK_Left = 11 , EOS_UIK_Up = 12 , EOS_UIK_Right = 13 , EOS_UIK_Down = 14 , EOS_UIK_Key0 = 15 , EOS_UIK_Key2 = 17 , EOS_UIK_Key3 = 18 , EOS_UIK_Key4 = 19 , EOS_UIK_Key5 = 20 , EOS_UIK_Key6 = 21 , EOS_UIK_Key7 = 22 , EOS_UIK_Key8 = 23 , EOS_UIK_Key9 = 24 , EOS_UIK_KeyA = 25 , EOS_UIK_KeyB = 26 , EOS_UIK_KeyC = 27 , EOS_UIK_KeyD = 28 , EOS_UIK_KeyE = 29 , EOS_UIK_KeyF = 30 , EOS_UIK_KeyG = 31 , EOS_UIK_KeyH = 32 , EOS_UIK_KeyI = 33 , EOS_UIK_KeyJ = 34 , EOS_UIK_KeyK = 35 , EOS_UIK_KeyL = 36 , EOS_UIK_KeyM = 37 , EOS_UIK_KeyN = 38 , EOS_UIK_KeyO = 39 , EOS_UIK_KeyP = 40 , EOS_UIK_KeyQ = 41 , EOS_UIK_KeyR = 42 , EOS_UIK_KeyS = 43 , EOS_UIK_KeyT = 44 , EOS_UIK_KeyU = 45 , EOS_UIK_KeyV = 46 , EOS_UIK_KeyW = 47 , EOS_UIK_KeyX = 48 , EOS_UIK_KeyY = 49 , EOS_UIK_KeyZ = 50 , EOS_UIK_Numpad0 = 51 , EOS_UIK_Numpad1 = 52 , EOS_UIK_Numpad2 = 53 , EOS_UIK_Numpad3 = 54 , EOS_UIK_Numpad4 = 55 , EOS_UIK_Numpad5 = 56 , EOS_UIK_Numpad6 = 57 , EOS_UIK_Numpad7 = 58 , EOS_UIK_Numpad8 = 59 , EOS_UIK_Numpad9 = 60 , EOS_UIK_NumpadAsterisk = 61 , EOS_UIK_NumpadPlus = 62 , EOS_UIK_NumpadMinus = 63 , EOS_UIK_NumpadPeriod = 64 , EOS_UIK_NumpadDivide = 65 , EOS_UIK_F1 = 66 , EOS_UIK_F2 = 67 , EOS_UIK_F3 = 68 , EOS_UIK_F4 = 69 , EOS_UIK_F5 = 70 , EOS_UIK_F6 = 71 , EOS_UIK_F7 = 72 , EOS_UIK_F8 = 73 , EOS_UIK_F9 = 74 , EOS_UIK_F10 = 75 , EOS_UIK_F11 = 76 , EOS_UIK_F12 = 77 , EOS_UIK_F13 = 78 , EOS_UIK_F14 = 79 , EOS_UIK_F15 = 80 , EOS_UIK_F16 = 81 , EOS_UIK_F17 = 82 , EOS_UIK_F18 = 83 , EOS_UIK_F19 = 84 , EOS_UIK_F20 = 85 , EOS_UIK_F21 = 86 , EOS_UIK_F22 = 87 , EOS_UIK_F23 = 88 , EOS_UIK_F24 = 89 , EOS_UIK_OemPlus = 90 , EOS_UIK_OemComma = 91 , EOS_UIK_OemMinus = 92 , EOS_UIK_OemPeriod = 93 , EOS_UIK_Oem1 = 94 , EOS_UIK_Oem2 = 95 , EOS_UIK_Oem3 = 96 , EOS_UIK_Oem4 = 97 , EOS_UIK_Oem5 = 98 , EOS_UIK_Oem6 = 99 , EOS_UIK_Oem7 = 100 , EOS_UIK_Oem8 = 101 , EOS_UIK_MaxKeyType = 102 , } # [repr (i32)] # [non_exhaustive] # [doc = " Flags used in EOS_UI_ReportInputStateOptions to identify buttons which are down."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_UI_EInputStateButtonFlags { EOS_UISBF_None = 0 , EOS_UISBF_DPad_Left = 1 , EOS_UISBF_DPad_Right = 2 , EOS_UISBF_DPad_Down = 4 , EOS_UISBF_DPad_Up = 8 , EOS_UISBF_FaceButton_Left = 16 , EOS_UISBF_FaceButton_Right = 32 , EOS_UISBF_FaceButton_Bottom = 64 , EOS_UISBF_FaceButton_Top = 128 , EOS_UISBF_LeftShoulder = 256 , EOS_UISBF_RightShoulder = 512 , EOS_UISBF_LeftTrigger = 1024 , EOS_UISBF_RightTrigger = 2048 , EOS_UISBF_Special_Left = 4096 , EOS_UISBF_Special_Right = 8192 , EOS_UISBF_LeftThumbstick = 16384 , EOS_UISBF_RightThumbstick = 32768 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_SetToggleFriendsKeyOptions { pub ApiVersion : i32 , pub KeyCombination : EOS_UI_EKeyCombination , } # [test] fn bindgen_test_layout__tagEOS_UI_SetToggleFriendsKeyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_SetToggleFriendsKeyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_SetToggleFriendsKeyOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_SetToggleFriendsKeyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_SetToggleFriendsKeyOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_SetToggleFriendsKeyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_SetToggleFriendsKeyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . KeyCombination) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_SetToggleFriendsKeyOptions) , "::" , stringify ! (KeyCombination))) ; } pub type EOS_UI_SetToggleFriendsKeyOptions = _tagEOS_UI_SetToggleFriendsKeyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_GetToggleFriendsKeyOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_UI_GetToggleFriendsKeyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_GetToggleFriendsKeyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_GetToggleFriendsKeyOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_GetToggleFriendsKeyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_GetToggleFriendsKeyOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_GetToggleFriendsKeyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_GetToggleFriendsKeyOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_UI_GetToggleFriendsKeyOptions = _tagEOS_UI_GetToggleFriendsKeyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_SetToggleFriendsButtonOptions { pub ApiVersion : i32 , pub ButtonCombination : EOS_UI_EInputStateButtonFlags , } # [test] fn bindgen_test_layout__tagEOS_UI_SetToggleFriendsButtonOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_SetToggleFriendsButtonOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_SetToggleFriendsButtonOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_SetToggleFriendsButtonOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_SetToggleFriendsButtonOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_SetToggleFriendsButtonOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_SetToggleFriendsButtonOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ButtonCombination) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_SetToggleFriendsButtonOptions) , "::" , stringify ! (ButtonCombination))) ; } pub type EOS_UI_SetToggleFriendsButtonOptions = _tagEOS_UI_SetToggleFriendsButtonOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_GetToggleFriendsButtonOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_UI_GetToggleFriendsButtonOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_GetToggleFriendsButtonOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_GetToggleFriendsButtonOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_GetToggleFriendsButtonOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_GetToggleFriendsButtonOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_GetToggleFriendsButtonOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_GetToggleFriendsButtonOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_UI_GetToggleFriendsButtonOptions = _tagEOS_UI_GetToggleFriendsButtonOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " Notification locations to be used to set the preference\n for pop-up.\n\n @see EOS_UI_SetDisplayPreference"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_UI_ENotificationLocation { EOS_UNL_TopLeft = 0 , EOS_UNL_TopRight = 1 , EOS_UNL_BottomLeft = 2 , EOS_UNL_BottomRight = 3 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_SetDisplayPreferenceOptions { pub ApiVersion : i32 , pub NotificationLocation : EOS_UI_ENotificationLocation , } # [test] fn bindgen_test_layout__tagEOS_UI_SetDisplayPreferenceOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_SetDisplayPreferenceOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_SetDisplayPreferenceOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_SetDisplayPreferenceOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_SetDisplayPreferenceOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_SetDisplayPreferenceOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_SetDisplayPreferenceOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NotificationLocation) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_SetDisplayPreferenceOptions) , "::" , stringify ! (NotificationLocation))) ; } pub type EOS_UI_SetDisplayPreferenceOptions = _tagEOS_UI_SetDisplayPreferenceOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_AcknowledgeEventIdOptions { pub ApiVersion : i32 , pub UiEventId : EOS_UI_EventId , pub Result : EOS_EResult , } # [test] fn bindgen_test_layout__tagEOS_UI_AcknowledgeEventIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_AcknowledgeEventIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_AcknowledgeEventIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_AcknowledgeEventIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_AcknowledgeEventIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_AcknowledgeEventIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_AcknowledgeEventIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_AcknowledgeEventIdOptions) , "::" , stringify ! (UiEventId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Result) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_AcknowledgeEventIdOptions) , "::" , stringify ! (Result))) ; } pub type EOS_UI_AcknowledgeEventIdOptions = _tagEOS_UI_AcknowledgeEventIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_ReportInputStateOptions { pub ApiVersion : i32 , pub ButtonDownFlags : EOS_UI_EInputStateButtonFlags , pub bAcceptIsFaceButtonRight : EOS_Bool , pub bMouseButtonDown : EOS_Bool , pub MousePosX : u32 , pub MousePosY : u32 , pub GamepadIndex : u32 , pub LeftStickX : f32 , pub LeftStickY : f32 , pub RightStickX : f32 , pub RightStickY : f32 , pub LeftTrigger : f32 , pub RightTrigger : f32 , } # [test] fn bindgen_test_layout__tagEOS_UI_ReportInputStateOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_ReportInputStateOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_ReportInputStateOptions > () , 52usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_ReportInputStateOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_ReportInputStateOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_ReportInputStateOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ButtonDownFlags) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (ButtonDownFlags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAcceptIsFaceButtonRight) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (bAcceptIsFaceButtonRight))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bMouseButtonDown) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (bMouseButtonDown))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MousePosX) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (MousePosX))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MousePosY) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (MousePosY))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . GamepadIndex) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (GamepadIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeftStickX) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (LeftStickX))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeftStickY) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (LeftStickY))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RightStickX) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (RightStickX))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RightStickY) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (RightStickY))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeftTrigger) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (LeftTrigger))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RightTrigger) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ReportInputStateOptions) , "::" , stringify ! (RightTrigger))) ; } pub type EOS_UI_ReportInputStateOptions = _tagEOS_UI_ReportInputStateOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_PrePresentOptions { pub ApiVersion : i32 , pub PlatformSpecificData : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_UI_PrePresentOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_PrePresentOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_PrePresentOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_PrePresentOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_PrePresentOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_PrePresentOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_PrePresentOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlatformSpecificData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_PrePresentOptions) , "::" , stringify ! (PlatformSpecificData))) ; } pub type EOS_UI_PrePresentOptions = _tagEOS_UI_PrePresentOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_ShowBlockPlayerOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_ShowBlockPlayerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_ShowBlockPlayerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_ShowBlockPlayerOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_ShowBlockPlayerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_ShowBlockPlayerOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_ShowBlockPlayerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowBlockPlayerOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowBlockPlayerOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowBlockPlayerOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UI_ShowBlockPlayerOptions = _tagEOS_UI_ShowBlockPlayerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_OnShowBlockPlayerCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_OnShowBlockPlayerCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_OnShowBlockPlayerCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_OnShowBlockPlayerCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_OnShowBlockPlayerCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_OnShowBlockPlayerCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_OnShowBlockPlayerCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowBlockPlayerCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowBlockPlayerCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowBlockPlayerCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowBlockPlayerCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UI_OnShowBlockPlayerCallbackInfo = _tagEOS_UI_OnShowBlockPlayerCallbackInfo ; pub type EOS_UI_OnShowBlockPlayerCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UI_OnShowBlockPlayerCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_ShowReportPlayerOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_ShowReportPlayerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_ShowReportPlayerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_ShowReportPlayerOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_ShowReportPlayerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_ShowReportPlayerOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_ShowReportPlayerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowReportPlayerOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowReportPlayerOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowReportPlayerOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UI_ShowReportPlayerOptions = _tagEOS_UI_ShowReportPlayerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_OnShowReportPlayerCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_OnShowReportPlayerCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_OnShowReportPlayerCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_OnShowReportPlayerCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_OnShowReportPlayerCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_OnShowReportPlayerCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_OnShowReportPlayerCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowReportPlayerCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowReportPlayerCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowReportPlayerCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_OnShowReportPlayerCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UI_OnShowReportPlayerCallbackInfo = _tagEOS_UI_OnShowReportPlayerCallbackInfo ; pub type EOS_UI_OnShowReportPlayerCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UI_OnShowReportPlayerCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_ShowNativeProfileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_ShowNativeProfileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_ShowNativeProfileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_ShowNativeProfileOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_ShowNativeProfileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_ShowNativeProfileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_ShowNativeProfileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowNativeProfileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowNativeProfileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowNativeProfileOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UI_ShowNativeProfileOptions = _tagEOS_UI_ShowNativeProfileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_ShowNativeProfileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UI_ShowNativeProfileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_ShowNativeProfileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_ShowNativeProfileCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_ShowNativeProfileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_ShowNativeProfileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_ShowNativeProfileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowNativeProfileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowNativeProfileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowNativeProfileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_ShowNativeProfileCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UI_ShowNativeProfileCallbackInfo = _tagEOS_UI_ShowNativeProfileCallbackInfo ; pub type EOS_UI_OnShowNativeProfileCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UI_ShowNativeProfileCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_PauseSocialOverlayOptions { pub ApiVersion : i32 , pub bIsPaused : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_UI_PauseSocialOverlayOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_PauseSocialOverlayOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_PauseSocialOverlayOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_PauseSocialOverlayOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_PauseSocialOverlayOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_PauseSocialOverlayOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_PauseSocialOverlayOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsPaused) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_PauseSocialOverlayOptions) , "::" , stringify ! (bIsPaused))) ; } pub type EOS_UI_PauseSocialOverlayOptions = _tagEOS_UI_PauseSocialOverlayOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_IsSocialOverlayPausedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_UI_IsSocialOverlayPausedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_IsSocialOverlayPausedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_IsSocialOverlayPausedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_IsSocialOverlayPausedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_IsSocialOverlayPausedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_IsSocialOverlayPausedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_IsSocialOverlayPausedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_UI_IsSocialOverlayPausedOptions = _tagEOS_UI_IsSocialOverlayPausedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_Rect { pub ApiVersion : i32 , pub X : i32 , pub Y : i32 , pub Width : u32 , pub Height : u32 , } # [test] fn bindgen_test_layout__tagEOS_UI_Rect () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_Rect > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_Rect > () , 20usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_Rect))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_Rect > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_Rect))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_Rect) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . X) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_Rect) , "::" , stringify ! (X))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Y) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_Rect) , "::" , stringify ! (Y))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Width) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_Rect) , "::" , stringify ! (Width))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Height) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_Rect) , "::" , stringify ! (Height))) ; } pub type EOS_UI_Rect = _tagEOS_UI_Rect ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_MemoryMonitorCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub SystemMemoryMonitorReport : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_UI_MemoryMonitorCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_MemoryMonitorCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_MemoryMonitorCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_MemoryMonitorCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_MemoryMonitorCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_MemoryMonitorCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_MemoryMonitorCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SystemMemoryMonitorReport) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_MemoryMonitorCallbackInfo) , "::" , stringify ! (SystemMemoryMonitorReport))) ; } pub type EOS_UI_MemoryMonitorCallbackInfo = _tagEOS_UI_MemoryMonitorCallbackInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UI_AddNotifyMemoryMonitorOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_UI_AddNotifyMemoryMonitorOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UI_AddNotifyMemoryMonitorOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UI_AddNotifyMemoryMonitorOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_UI_AddNotifyMemoryMonitorOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UI_AddNotifyMemoryMonitorOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UI_AddNotifyMemoryMonitorOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UI_AddNotifyMemoryMonitorOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_UI_AddNotifyMemoryMonitorOptions = _tagEOS_UI_AddNotifyMemoryMonitorOptions ; pub type EOS_UI_OnMemoryMonitorCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UI_MemoryMonitorCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_FriendsHandle { _unused : [u8 ; 0] , } pub type EOS_HFriends = * mut EOS_FriendsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_QueryFriendsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_QueryFriendsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_QueryFriendsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_QueryFriendsOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_QueryFriendsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_QueryFriendsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_QueryFriendsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_QueryFriendsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_QueryFriendsOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Friends_QueryFriendsOptions = _tagEOS_Friends_QueryFriendsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_QueryFriendsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_QueryFriendsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_QueryFriendsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_QueryFriendsCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_QueryFriendsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_QueryFriendsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_QueryFriendsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_QueryFriendsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_QueryFriendsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_QueryFriendsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Friends_QueryFriendsCallbackInfo = _tagEOS_Friends_QueryFriendsCallbackInfo ; pub type EOS_Friends_OnQueryFriendsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Friends_QueryFriendsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_SendInviteOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_SendInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_SendInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_SendInviteOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_SendInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_SendInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_SendInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_SendInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_SendInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_SendInviteOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Friends_SendInviteOptions = _tagEOS_Friends_SendInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_SendInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_SendInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_SendInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_SendInviteCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_SendInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_SendInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_SendInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_SendInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_SendInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_SendInviteCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_SendInviteCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Friends_SendInviteCallbackInfo = _tagEOS_Friends_SendInviteCallbackInfo ; pub type EOS_Friends_OnSendInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Friends_SendInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_AcceptInviteOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_AcceptInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_AcceptInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_AcceptInviteOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_AcceptInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_AcceptInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_AcceptInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AcceptInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AcceptInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AcceptInviteOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Friends_AcceptInviteOptions = _tagEOS_Friends_AcceptInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_AcceptInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_AcceptInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_AcceptInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_AcceptInviteCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_AcceptInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_AcceptInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_AcceptInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AcceptInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AcceptInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AcceptInviteCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AcceptInviteCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Friends_AcceptInviteCallbackInfo = _tagEOS_Friends_AcceptInviteCallbackInfo ; pub type EOS_Friends_OnAcceptInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Friends_AcceptInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_RejectInviteOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_RejectInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_RejectInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_RejectInviteOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_RejectInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_RejectInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_RejectInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_RejectInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_RejectInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_RejectInviteOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Friends_RejectInviteOptions = _tagEOS_Friends_RejectInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_RejectInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_RejectInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_RejectInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_RejectInviteCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_RejectInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_RejectInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_RejectInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_RejectInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_RejectInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_RejectInviteCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_RejectInviteCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Friends_RejectInviteCallbackInfo = _tagEOS_Friends_RejectInviteCallbackInfo ; pub type EOS_Friends_OnRejectInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Friends_RejectInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_GetFriendsCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_GetFriendsCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_GetFriendsCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_GetFriendsCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_GetFriendsCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_GetFriendsCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_GetFriendsCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetFriendsCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetFriendsCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Friends_GetFriendsCountOptions = _tagEOS_Friends_GetFriendsCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_GetFriendAtIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub Index : i32 , } # [test] fn bindgen_test_layout__tagEOS_Friends_GetFriendAtIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_GetFriendAtIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_GetFriendAtIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_GetFriendAtIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_GetFriendAtIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_GetFriendAtIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetFriendAtIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetFriendAtIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetFriendAtIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_Friends_GetFriendAtIndexOptions = _tagEOS_Friends_GetFriendAtIndexOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " An enumeration of the different friendship statuses."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EFriendsStatus { EOS_FS_NotFriends = 0 , EOS_FS_InviteSent = 1 , EOS_FS_InviteReceived = 2 , EOS_FS_Friends = 3 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_GetStatusOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_GetStatusOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_GetStatusOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_GetStatusOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_GetStatusOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_GetStatusOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_GetStatusOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetStatusOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetStatusOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetStatusOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Friends_GetStatusOptions = _tagEOS_Friends_GetStatusOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_AddNotifyFriendsUpdateOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Friends_AddNotifyFriendsUpdateOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_AddNotifyFriendsUpdateOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_AddNotifyFriendsUpdateOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_AddNotifyFriendsUpdateOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_AddNotifyFriendsUpdateOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_AddNotifyFriendsUpdateOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AddNotifyFriendsUpdateOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Friends_AddNotifyFriendsUpdateOptions = _tagEOS_Friends_AddNotifyFriendsUpdateOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_OnFriendsUpdateInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub PreviousStatus : EOS_EFriendsStatus , pub CurrentStatus : EOS_EFriendsStatus , } # [test] fn bindgen_test_layout__tagEOS_Friends_OnFriendsUpdateInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_OnFriendsUpdateInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_OnFriendsUpdateInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_OnFriendsUpdateInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_OnFriendsUpdateInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_OnFriendsUpdateInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnFriendsUpdateInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnFriendsUpdateInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnFriendsUpdateInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PreviousStatus) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnFriendsUpdateInfo) , "::" , stringify ! (PreviousStatus))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentStatus) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnFriendsUpdateInfo) , "::" , stringify ! (CurrentStatus))) ; } pub type EOS_Friends_OnFriendsUpdateInfo = _tagEOS_Friends_OnFriendsUpdateInfo ; pub type EOS_Friends_OnFriendsUpdateCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Friends_OnFriendsUpdateInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_GetBlockedUsersCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Friends_GetBlockedUsersCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_GetBlockedUsersCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_GetBlockedUsersCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_GetBlockedUsersCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_GetBlockedUsersCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_GetBlockedUsersCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetBlockedUsersCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetBlockedUsersCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Friends_GetBlockedUsersCountOptions = _tagEOS_Friends_GetBlockedUsersCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_GetBlockedUserAtIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub Index : i32 , } # [test] fn bindgen_test_layout__tagEOS_Friends_GetBlockedUserAtIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_GetBlockedUserAtIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_GetBlockedUserAtIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_GetBlockedUserAtIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_GetBlockedUserAtIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_GetBlockedUserAtIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetBlockedUserAtIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetBlockedUserAtIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_GetBlockedUserAtIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_Friends_GetBlockedUserAtIndexOptions = _tagEOS_Friends_GetBlockedUserAtIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Friends_AddNotifyBlockedUsersUpdateOptions = _tagEOS_Friends_AddNotifyBlockedUsersUpdateOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Friends_OnBlockedUsersUpdateInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub bBlocked : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Friends_OnBlockedUsersUpdateInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Friends_OnBlockedUsersUpdateInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Friends_OnBlockedUsersUpdateInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Friends_OnBlockedUsersUpdateInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Friends_OnBlockedUsersUpdateInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Friends_OnBlockedUsersUpdateInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnBlockedUsersUpdateInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnBlockedUsersUpdateInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnBlockedUsersUpdateInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bBlocked) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Friends_OnBlockedUsersUpdateInfo) , "::" , stringify ! (bBlocked))) ; } pub type EOS_Friends_OnBlockedUsersUpdateInfo = _tagEOS_Friends_OnBlockedUsersUpdateInfo ; pub type EOS_Friends_OnBlockedUsersUpdateCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Friends_OnBlockedUsersUpdateInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_PresenceHandle { _unused : [u8 ; 0] , } pub type EOS_HPresence = * mut EOS_PresenceHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_PresenceModificationHandle { _unused : [u8 ; 0] , } pub type EOS_HPresenceModification = * mut EOS_PresenceModificationHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " Presence Status states of a user\n\n @see EOS_Presence_CopyPresence\n @see EOS_PresenceModification_SetStatus"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_Presence_EStatus { EOS_PS_Offline = 0 , EOS_PS_Online = 1 , EOS_PS_Away = 2 , EOS_PS_ExtendedAway = 3 , EOS_PS_DoNotDisturb = 4 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_DataRecord { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , pub Value : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Presence_DataRecord () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_DataRecord > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_DataRecord > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_DataRecord))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_DataRecord > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_DataRecord))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_DataRecord) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_DataRecord) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Value) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_DataRecord) , "::" , stringify ! (Value))) ; } pub type EOS_Presence_DataRecord = _tagEOS_Presence_DataRecord ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_Info { pub ApiVersion : i32 , pub Status : EOS_Presence_EStatus , pub UserId : EOS_EpicAccountId , pub ProductId : * const :: std :: os :: raw :: c_char , pub ProductVersion : * const :: std :: os :: raw :: c_char , pub Platform : * const :: std :: os :: raw :: c_char , pub RichText : * const :: std :: os :: raw :: c_char , pub RecordsCount : i32 , pub Records : * const EOS_Presence_DataRecord , pub ProductName : * const :: std :: os :: raw :: c_char , pub IntegratedPlatform : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Presence_Info () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_Info > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_Info > () , 80usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_Info))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_Info > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_Info))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Status) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (Status))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (ProductId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductVersion) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (ProductVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Platform) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (Platform))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RichText) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (RichText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RecordsCount) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (RecordsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Records) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (Records))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductName) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (ProductName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IntegratedPlatform) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_Info) , "::" , stringify ! (IntegratedPlatform))) ; } pub type EOS_Presence_Info = _tagEOS_Presence_Info ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_QueryPresenceOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_QueryPresenceOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_QueryPresenceOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_QueryPresenceOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_QueryPresenceOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_QueryPresenceOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_QueryPresenceOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_QueryPresenceOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_QueryPresenceOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_QueryPresenceOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Presence_QueryPresenceOptions = _tagEOS_Presence_QueryPresenceOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_QueryPresenceCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_QueryPresenceCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_QueryPresenceCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_QueryPresenceCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_QueryPresenceCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_QueryPresenceCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_QueryPresenceCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_QueryPresenceCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_QueryPresenceCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_QueryPresenceCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_QueryPresenceCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Presence_QueryPresenceCallbackInfo = _tagEOS_Presence_QueryPresenceCallbackInfo ; pub type EOS_Presence_OnQueryPresenceCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Presence_QueryPresenceCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_HasPresenceOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_HasPresenceOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_HasPresenceOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_HasPresenceOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_HasPresenceOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_HasPresenceOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_HasPresenceOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_HasPresenceOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_HasPresenceOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_HasPresenceOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Presence_HasPresenceOptions = _tagEOS_Presence_HasPresenceOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_CopyPresenceOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_CopyPresenceOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_CopyPresenceOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_CopyPresenceOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_CopyPresenceOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_CopyPresenceOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_CopyPresenceOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_CopyPresenceOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_CopyPresenceOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_CopyPresenceOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Presence_CopyPresenceOptions = _tagEOS_Presence_CopyPresenceOptions ; extern "C" { # [doc = " Release the memory associated with an EOS_Presence_Info structure and its sub-objects. This must be called on data retrieved from EOS_Presence_CopyPresence.\n This can be safely called on a NULL presence info object.\n\n @param PresenceInfo The presence info structure to be release"] pub fn EOS_Presence_Info_Release (PresenceInfo : * mut EOS_Presence_Info) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_CreatePresenceModificationOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_CreatePresenceModificationOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_CreatePresenceModificationOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_CreatePresenceModificationOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_CreatePresenceModificationOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_CreatePresenceModificationOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_CreatePresenceModificationOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_CreatePresenceModificationOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_CreatePresenceModificationOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Presence_CreatePresenceModificationOptions = _tagEOS_Presence_CreatePresenceModificationOptions ; extern "C" { # [doc = " Release the memory associated with an EOS_HPresenceModification handle. This must be called on Handles retrieved from EOS_Presence_CreatePresenceModification.\n This can be safely called on a NULL presence modification handle. This also may be safely called while a call to SetPresence is still pending.\n\n @param PresenceModificationHandle The presence modification handle to release\n\n @see EOS_Presence_CreatePresenceModification"] pub fn EOS_PresenceModification_Release (PresenceModificationHandle : EOS_HPresenceModification) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_SetPresenceOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub PresenceModificationHandle : EOS_HPresenceModification , } # [test] fn bindgen_test_layout__tagEOS_Presence_SetPresenceOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_SetPresenceOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_SetPresenceOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_SetPresenceOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_SetPresenceOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_SetPresenceOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_SetPresenceOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_SetPresenceOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PresenceModificationHandle) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_SetPresenceOptions) , "::" , stringify ! (PresenceModificationHandle))) ; } pub type EOS_Presence_SetPresenceOptions = _tagEOS_Presence_SetPresenceOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_SetPresenceCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_SetPresenceCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_SetPresenceCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_SetPresenceCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_SetPresenceCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_SetPresenceCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_SetPresenceCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_SetPresenceCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_SetPresenceCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_SetPresenceCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Presence_SetPresenceCallbackInfo = _tagEOS_Presence_SetPresenceCallbackInfo ; pub type EOS_Presence_SetPresenceCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Presence_SetPresenceCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_AddNotifyOnPresenceChangedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Presence_AddNotifyOnPresenceChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_AddNotifyOnPresenceChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_AddNotifyOnPresenceChangedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_AddNotifyOnPresenceChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_AddNotifyOnPresenceChangedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_AddNotifyOnPresenceChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_AddNotifyOnPresenceChangedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Presence_AddNotifyOnPresenceChangedOptions = _tagEOS_Presence_AddNotifyOnPresenceChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_PresenceChangedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub PresenceUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_PresenceChangedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_PresenceChangedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_PresenceChangedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_PresenceChangedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_PresenceChangedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_PresenceChangedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_PresenceChangedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_PresenceChangedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PresenceUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_PresenceChangedCallbackInfo) , "::" , stringify ! (PresenceUserId))) ; } pub type EOS_Presence_PresenceChangedCallbackInfo = _tagEOS_Presence_PresenceChangedCallbackInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_AddNotifyJoinGameAcceptedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Presence_AddNotifyJoinGameAcceptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_AddNotifyJoinGameAcceptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_AddNotifyJoinGameAcceptedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_AddNotifyJoinGameAcceptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_AddNotifyJoinGameAcceptedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_AddNotifyJoinGameAcceptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_AddNotifyJoinGameAcceptedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Presence_AddNotifyJoinGameAcceptedOptions = _tagEOS_Presence_AddNotifyJoinGameAcceptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_JoinGameAcceptedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub JoinInfo : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub UiEventId : EOS_UI_EventId , } # [test] fn bindgen_test_layout__tagEOS_Presence_JoinGameAcceptedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_JoinGameAcceptedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_JoinGameAcceptedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_JoinGameAcceptedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_JoinGameAcceptedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_JoinGameAcceptedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_JoinGameAcceptedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . JoinInfo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_JoinGameAcceptedCallbackInfo) , "::" , stringify ! (JoinInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_JoinGameAcceptedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_JoinGameAcceptedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_JoinGameAcceptedCallbackInfo) , "::" , stringify ! (UiEventId))) ; } pub type EOS_Presence_JoinGameAcceptedCallbackInfo = _tagEOS_Presence_JoinGameAcceptedCallbackInfo ; pub type EOS_Presence_OnJoinGameAcceptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Presence_JoinGameAcceptedCallbackInfo) > ; pub type EOS_Presence_OnPresenceChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Presence_PresenceChangedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Presence_GetJoinInfoOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_Presence_GetJoinInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Presence_GetJoinInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Presence_GetJoinInfoOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Presence_GetJoinInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Presence_GetJoinInfoOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Presence_GetJoinInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_GetJoinInfoOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_GetJoinInfoOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Presence_GetJoinInfoOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Presence_GetJoinInfoOptions = _tagEOS_Presence_GetJoinInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PresenceModification_SetJoinInfoOptions { pub ApiVersion : i32 , pub JoinInfo : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PresenceModification_SetJoinInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PresenceModification_SetJoinInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PresenceModification_SetJoinInfoOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PresenceModification_SetJoinInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PresenceModification_SetJoinInfoOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PresenceModification_SetJoinInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetJoinInfoOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . JoinInfo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetJoinInfoOptions) , "::" , stringify ! (JoinInfo))) ; } pub type EOS_PresenceModification_SetJoinInfoOptions = _tagEOS_PresenceModification_SetJoinInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PresenceModification_SetStatusOptions { pub ApiVersion : i32 , pub Status : EOS_Presence_EStatus , } # [test] fn bindgen_test_layout__tagEOS_PresenceModification_SetStatusOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PresenceModification_SetStatusOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PresenceModification_SetStatusOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_PresenceModification_SetStatusOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PresenceModification_SetStatusOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PresenceModification_SetStatusOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetStatusOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Status) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetStatusOptions) , "::" , stringify ! (Status))) ; } pub type EOS_PresenceModification_SetStatusOptions = _tagEOS_PresenceModification_SetStatusOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PresenceModification_SetRawRichTextOptions { pub ApiVersion : i32 , pub RichText : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PresenceModification_SetRawRichTextOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PresenceModification_SetRawRichTextOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PresenceModification_SetRawRichTextOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PresenceModification_SetRawRichTextOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PresenceModification_SetRawRichTextOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PresenceModification_SetRawRichTextOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetRawRichTextOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RichText) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetRawRichTextOptions) , "::" , stringify ! (RichText))) ; } pub type EOS_PresenceModification_SetRawRichTextOptions = _tagEOS_PresenceModification_SetRawRichTextOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PresenceModification_SetDataOptions { pub ApiVersion : i32 , pub RecordsCount : i32 , pub Records : * const EOS_Presence_DataRecord , } # [test] fn bindgen_test_layout__tagEOS_PresenceModification_SetDataOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PresenceModification_SetDataOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PresenceModification_SetDataOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PresenceModification_SetDataOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PresenceModification_SetDataOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PresenceModification_SetDataOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetDataOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RecordsCount) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetDataOptions) , "::" , stringify ! (RecordsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Records) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_SetDataOptions) , "::" , stringify ! (Records))) ; } pub type EOS_PresenceModification_SetDataOptions = _tagEOS_PresenceModification_SetDataOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PresenceModification_DataRecordId { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PresenceModification_DataRecordId () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PresenceModification_DataRecordId > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PresenceModification_DataRecordId > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PresenceModification_DataRecordId))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PresenceModification_DataRecordId > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PresenceModification_DataRecordId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_DataRecordId) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_DataRecordId) , "::" , stringify ! (Key))) ; } pub type EOS_PresenceModification_DataRecordId = _tagEOS_PresenceModification_DataRecordId ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PresenceModification_DeleteDataOptions { pub ApiVersion : i32 , pub RecordsCount : i32 , pub Records : * const EOS_PresenceModification_DataRecordId , } # [test] fn bindgen_test_layout__tagEOS_PresenceModification_DeleteDataOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PresenceModification_DeleteDataOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PresenceModification_DeleteDataOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PresenceModification_DeleteDataOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PresenceModification_DeleteDataOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PresenceModification_DeleteDataOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_DeleteDataOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RecordsCount) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_DeleteDataOptions) , "::" , stringify ! (RecordsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Records) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PresenceModification_DeleteDataOptions) , "::" , stringify ! (Records))) ; } pub type EOS_PresenceModification_DeleteDataOptions = _tagEOS_PresenceModification_DeleteDataOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_P2PHandle { _unused : [u8 ; 0] , } pub type EOS_HP2P = * mut EOS_P2PHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " Categories of NAT strictness."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ENATType { EOS_NAT_Unknown = 0 , EOS_NAT_Open = 1 , EOS_NAT_Moderate = 2 , EOS_NAT_Strict = 3 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_SocketId { pub ApiVersion : i32 , pub SocketName : [:: std :: os :: raw :: c_char ; 33usize] , } # [test] fn bindgen_test_layout__tagEOS_P2P_SocketId () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_SocketId > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_SocketId > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_SocketId))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_SocketId > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_SocketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SocketId) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketName) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SocketId) , "::" , stringify ! (SocketName))) ; } pub type EOS_P2P_SocketId = _tagEOS_P2P_SocketId ; # [repr (i32)] # [non_exhaustive] # [doc = " Types of packet reliability.\n\n Ordered packets will only be ordered relative to other ordered packets. Reliable/unreliable and ordered/unordered communication\n can be sent on the same Socket ID and Channel."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EPacketReliability { EOS_PR_UnreliableUnordered = 0 , EOS_PR_ReliableUnordered = 1 , EOS_PR_ReliableOrdered = 2 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_SendPacketOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , pub Channel : u8 , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , pub bAllowDelayedDelivery : EOS_Bool , pub Reliability : EOS_EPacketReliability , pub bDisableAutoAcceptConnection : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_P2P_SendPacketOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_SendPacketOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_SendPacketOptions > () , 64usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_SendPacketOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_SendPacketOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_SendPacketOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (SocketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Channel) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (Channel))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (Data))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowDelayedDelivery) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (bAllowDelayedDelivery))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Reliability) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (Reliability))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bDisableAutoAcceptConnection) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SendPacketOptions) , "::" , stringify ! (bDisableAutoAcceptConnection))) ; } pub type EOS_P2P_SendPacketOptions = _tagEOS_P2P_SendPacketOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_GetNextReceivedPacketSizeOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RequestedChannel : * const u8 , } # [test] fn bindgen_test_layout__tagEOS_P2P_GetNextReceivedPacketSizeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_GetNextReceivedPacketSizeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_GetNextReceivedPacketSizeOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_GetNextReceivedPacketSizeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_GetNextReceivedPacketSizeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_GetNextReceivedPacketSizeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_GetNextReceivedPacketSizeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_GetNextReceivedPacketSizeOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RequestedChannel) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_GetNextReceivedPacketSizeOptions) , "::" , stringify ! (RequestedChannel))) ; } pub type EOS_P2P_GetNextReceivedPacketSizeOptions = _tagEOS_P2P_GetNextReceivedPacketSizeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_ReceivePacketOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub MaxDataSizeBytes : u32 , pub RequestedChannel : * const u8 , } # [test] fn bindgen_test_layout__tagEOS_P2P_ReceivePacketOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_ReceivePacketOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_ReceivePacketOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_ReceivePacketOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_ReceivePacketOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_ReceivePacketOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ReceivePacketOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ReceivePacketOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxDataSizeBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ReceivePacketOptions) , "::" , stringify ! (MaxDataSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RequestedChannel) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ReceivePacketOptions) , "::" , stringify ! (RequestedChannel))) ; } pub type EOS_P2P_ReceivePacketOptions = _tagEOS_P2P_ReceivePacketOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_AddNotifyPeerConnectionRequestOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_AddNotifyPeerConnectionRequestOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_AddNotifyPeerConnectionRequestOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_AddNotifyPeerConnectionRequestOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionRequestOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_AddNotifyPeerConnectionRequestOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionRequestOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionRequestOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionRequestOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionRequestOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_AddNotifyPeerConnectionRequestOptions = _tagEOS_P2P_AddNotifyPeerConnectionRequestOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_OnIncomingConnectionRequestInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_OnIncomingConnectionRequestInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_OnIncomingConnectionRequestInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_OnIncomingConnectionRequestInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_OnIncomingConnectionRequestInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_OnIncomingConnectionRequestInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_OnIncomingConnectionRequestInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingConnectionRequestInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingConnectionRequestInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingConnectionRequestInfo) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingConnectionRequestInfo) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_OnIncomingConnectionRequestInfo = _tagEOS_P2P_OnIncomingConnectionRequestInfo ; pub type EOS_P2P_OnIncomingConnectionRequestCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_P2P_OnIncomingConnectionRequestInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_AddNotifyPeerConnectionEstablishedOptions = _tagEOS_P2P_AddNotifyPeerConnectionEstablishedOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " Type of established connection"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EConnectionEstablishedType { EOS_CET_NewConnection = 0 , EOS_CET_Reconnection = 1 , } # [repr (i32)] # [non_exhaustive] # [doc = " Types of network connections."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ENetworkConnectionType { EOS_NCT_NoConnection = 0 , EOS_NCT_DirectConnection = 1 , EOS_NCT_RelayedConnection = 2 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_OnPeerConnectionEstablishedInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , pub ConnectionType : EOS_EConnectionEstablishedType , pub NetworkType : EOS_ENetworkConnectionType , } # [test] fn bindgen_test_layout__tagEOS_P2P_OnPeerConnectionEstablishedInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_OnPeerConnectionEstablishedInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_OnPeerConnectionEstablishedInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_OnPeerConnectionEstablishedInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo) , "::" , stringify ! (SocketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ConnectionType) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo) , "::" , stringify ! (ConnectionType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NetworkType) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionEstablishedInfo) , "::" , stringify ! (NetworkType))) ; } pub type EOS_P2P_OnPeerConnectionEstablishedInfo = _tagEOS_P2P_OnPeerConnectionEstablishedInfo ; pub type EOS_P2P_OnPeerConnectionEstablishedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_P2P_OnPeerConnectionEstablishedInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_AddNotifyPeerConnectionInterruptedOptions = _tagEOS_P2P_AddNotifyPeerConnectionInterruptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_OnPeerConnectionInterruptedInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_OnPeerConnectionInterruptedInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_OnPeerConnectionInterruptedInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_OnPeerConnectionInterruptedInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_OnPeerConnectionInterruptedInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_OnPeerConnectionInterruptedInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_OnPeerConnectionInterruptedInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionInterruptedInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionInterruptedInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionInterruptedInfo) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnPeerConnectionInterruptedInfo) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_OnPeerConnectionInterruptedInfo = _tagEOS_P2P_OnPeerConnectionInterruptedInfo ; pub type EOS_P2P_OnPeerConnectionInterruptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_P2P_OnPeerConnectionInterruptedInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_AddNotifyPeerConnectionClosedOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_AddNotifyPeerConnectionClosedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_AddNotifyPeerConnectionClosedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_AddNotifyPeerConnectionClosedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionClosedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_AddNotifyPeerConnectionClosedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionClosedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionClosedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionClosedOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyPeerConnectionClosedOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_AddNotifyPeerConnectionClosedOptions = _tagEOS_P2P_AddNotifyPeerConnectionClosedOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " Reasons why a P2P connection was closed"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EConnectionClosedReason { EOS_CCR_Unknown = 0 , EOS_CCR_ClosedByLocalUser = 1 , EOS_CCR_ClosedByPeer = 2 , EOS_CCR_TimedOut = 3 , EOS_CCR_TooManyConnections = 4 , EOS_CCR_InvalidMessage = 5 , EOS_CCR_InvalidData = 6 , EOS_CCR_ConnectionFailed = 7 , EOS_CCR_ConnectionClosed = 8 , EOS_CCR_NegotiationFailed = 9 , EOS_CCR_UnexpectedError = 10 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_OnRemoteConnectionClosedInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , pub Reason : EOS_EConnectionClosedReason , } # [test] fn bindgen_test_layout__tagEOS_P2P_OnRemoteConnectionClosedInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_OnRemoteConnectionClosedInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_OnRemoteConnectionClosedInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_OnRemoteConnectionClosedInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_OnRemoteConnectionClosedInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_OnRemoteConnectionClosedInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnRemoteConnectionClosedInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnRemoteConnectionClosedInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnRemoteConnectionClosedInfo) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnRemoteConnectionClosedInfo) , "::" , stringify ! (SocketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Reason) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnRemoteConnectionClosedInfo) , "::" , stringify ! (Reason))) ; } pub type EOS_P2P_OnRemoteConnectionClosedInfo = _tagEOS_P2P_OnRemoteConnectionClosedInfo ; pub type EOS_P2P_OnRemoteConnectionClosedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_P2P_OnRemoteConnectionClosedInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_AcceptConnectionOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_AcceptConnectionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_AcceptConnectionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_AcceptConnectionOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_AcceptConnectionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_AcceptConnectionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_AcceptConnectionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AcceptConnectionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AcceptConnectionOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AcceptConnectionOptions) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AcceptConnectionOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_AcceptConnectionOptions = _tagEOS_P2P_AcceptConnectionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_CloseConnectionOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_CloseConnectionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_CloseConnectionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_CloseConnectionOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_CloseConnectionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_CloseConnectionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_CloseConnectionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_CloseConnectionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_CloseConnectionOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_CloseConnectionOptions) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_CloseConnectionOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_CloseConnectionOptions = _tagEOS_P2P_CloseConnectionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_CloseConnectionsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_CloseConnectionsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_CloseConnectionsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_CloseConnectionsOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_CloseConnectionsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_CloseConnectionsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_CloseConnectionsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_CloseConnectionsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_CloseConnectionsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_CloseConnectionsOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_CloseConnectionsOptions = _tagEOS_P2P_CloseConnectionsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_QueryNATTypeOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_P2P_QueryNATTypeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_QueryNATTypeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_QueryNATTypeOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_QueryNATTypeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_QueryNATTypeOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_QueryNATTypeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_QueryNATTypeOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_P2P_QueryNATTypeOptions = _tagEOS_P2P_QueryNATTypeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_OnQueryNATTypeCompleteInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub NATType : EOS_ENATType , } # [test] fn bindgen_test_layout__tagEOS_P2P_OnQueryNATTypeCompleteInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_OnQueryNATTypeCompleteInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_OnQueryNATTypeCompleteInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_OnQueryNATTypeCompleteInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_OnQueryNATTypeCompleteInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_OnQueryNATTypeCompleteInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnQueryNATTypeCompleteInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnQueryNATTypeCompleteInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NATType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnQueryNATTypeCompleteInfo) , "::" , stringify ! (NATType))) ; } pub type EOS_P2P_OnQueryNATTypeCompleteInfo = _tagEOS_P2P_OnQueryNATTypeCompleteInfo ; pub type EOS_P2P_OnQueryNATTypeCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_P2P_OnQueryNATTypeCompleteInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_GetNATTypeOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_P2P_GetNATTypeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_GetNATTypeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_GetNATTypeOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_GetNATTypeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_GetNATTypeOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_GetNATTypeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_GetNATTypeOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_P2P_GetNATTypeOptions = _tagEOS_P2P_GetNATTypeOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " Setting for controlling whether relay servers are used.\n\n Please see the following EOS_ERelayControl value compatibility-chart to better understand how changing this value\n can affect compatibility between clients with different settings.\n\n +------------------------------+---------------------+-------------------------------+---------------------+\n |                              |   EOS_RC_NoRelays   |  EOS_RC_AllowRelays (Default) |  EOS_RC_ForceRelays |\n +------------------------------+---------------------+-------------------------------+---------------------+\n | EOS_RC_NoRelays              |  Compatible         |  Compatible                   |  Connection Failure |\n | EOS_RC_AllowRelays (Default) |  Compatible         |  Compatible                   |  Compatible         |\n | EOS_RC_ForceRelays           |  Connection Failure |  Compatible                   |  Compatible         |\n +------------------------------+---------------------+-------------------------------+---------------------+"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ERelayControl { EOS_RC_NoRelays = 0 , EOS_RC_AllowRelays = 1 , EOS_RC_ForceRelays = 2 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_SetRelayControlOptions { pub ApiVersion : i32 , pub RelayControl : EOS_ERelayControl , } # [test] fn bindgen_test_layout__tagEOS_P2P_SetRelayControlOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_SetRelayControlOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_SetRelayControlOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_SetRelayControlOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_SetRelayControlOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_SetRelayControlOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetRelayControlOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RelayControl) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetRelayControlOptions) , "::" , stringify ! (RelayControl))) ; } pub type EOS_P2P_SetRelayControlOptions = _tagEOS_P2P_SetRelayControlOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_GetRelayControlOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_P2P_GetRelayControlOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_GetRelayControlOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_GetRelayControlOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_GetRelayControlOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_GetRelayControlOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_GetRelayControlOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_GetRelayControlOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_P2P_GetRelayControlOptions = _tagEOS_P2P_GetRelayControlOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_SetPortRangeOptions { pub ApiVersion : i32 , pub Port : u16 , pub MaxAdditionalPortsToTry : u16 , } # [test] fn bindgen_test_layout__tagEOS_P2P_SetPortRangeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_SetPortRangeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_SetPortRangeOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_SetPortRangeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_SetPortRangeOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_SetPortRangeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetPortRangeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Port) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetPortRangeOptions) , "::" , stringify ! (Port))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxAdditionalPortsToTry) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetPortRangeOptions) , "::" , stringify ! (MaxAdditionalPortsToTry))) ; } pub type EOS_P2P_SetPortRangeOptions = _tagEOS_P2P_SetPortRangeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_GetPortRangeOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_P2P_GetPortRangeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_GetPortRangeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_GetPortRangeOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_GetPortRangeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_GetPortRangeOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_GetPortRangeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_GetPortRangeOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_P2P_GetPortRangeOptions = _tagEOS_P2P_GetPortRangeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_SetPacketQueueSizeOptions { pub ApiVersion : i32 , pub IncomingPacketQueueMaxSizeBytes : u64 , pub OutgoingPacketQueueMaxSizeBytes : u64 , } # [test] fn bindgen_test_layout__tagEOS_P2P_SetPacketQueueSizeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_SetPacketQueueSizeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_SetPacketQueueSizeOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_SetPacketQueueSizeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_SetPacketQueueSizeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_SetPacketQueueSizeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetPacketQueueSizeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IncomingPacketQueueMaxSizeBytes) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetPacketQueueSizeOptions) , "::" , stringify ! (IncomingPacketQueueMaxSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutgoingPacketQueueMaxSizeBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_SetPacketQueueSizeOptions) , "::" , stringify ! (OutgoingPacketQueueMaxSizeBytes))) ; } pub type EOS_P2P_SetPacketQueueSizeOptions = _tagEOS_P2P_SetPacketQueueSizeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_GetPacketQueueInfoOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_P2P_GetPacketQueueInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_GetPacketQueueInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_GetPacketQueueInfoOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_GetPacketQueueInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_GetPacketQueueInfoOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_GetPacketQueueInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_GetPacketQueueInfoOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_P2P_GetPacketQueueInfoOptions = _tagEOS_P2P_GetPacketQueueInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_PacketQueueInfo { pub IncomingPacketQueueMaxSizeBytes : u64 , pub IncomingPacketQueueCurrentSizeBytes : u64 , pub IncomingPacketQueueCurrentPacketCount : u64 , pub OutgoingPacketQueueMaxSizeBytes : u64 , pub OutgoingPacketQueueCurrentSizeBytes : u64 , pub OutgoingPacketQueueCurrentPacketCount : u64 , } # [test] fn bindgen_test_layout__tagEOS_P2P_PacketQueueInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_PacketQueueInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_PacketQueueInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_PacketQueueInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_PacketQueueInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_PacketQueueInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IncomingPacketQueueMaxSizeBytes) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_PacketQueueInfo) , "::" , stringify ! (IncomingPacketQueueMaxSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IncomingPacketQueueCurrentSizeBytes) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_PacketQueueInfo) , "::" , stringify ! (IncomingPacketQueueCurrentSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IncomingPacketQueueCurrentPacketCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_PacketQueueInfo) , "::" , stringify ! (IncomingPacketQueueCurrentPacketCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutgoingPacketQueueMaxSizeBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_PacketQueueInfo) , "::" , stringify ! (OutgoingPacketQueueMaxSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutgoingPacketQueueCurrentSizeBytes) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_PacketQueueInfo) , "::" , stringify ! (OutgoingPacketQueueCurrentSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutgoingPacketQueueCurrentPacketCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_PacketQueueInfo) , "::" , stringify ! (OutgoingPacketQueueCurrentPacketCount))) ; } pub type EOS_P2P_PacketQueueInfo = _tagEOS_P2P_PacketQueueInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_P2P_AddNotifyIncomingPacketQueueFullOptions = _tagEOS_P2P_AddNotifyIncomingPacketQueueFullOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_OnIncomingPacketQueueFullInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub PacketQueueMaxSizeBytes : u64 , pub PacketQueueCurrentSizeBytes : u64 , pub OverflowPacketLocalUserId : EOS_ProductUserId , pub OverflowPacketChannel : u8 , pub OverflowPacketSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_P2P_OnIncomingPacketQueueFullInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_OnIncomingPacketQueueFullInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_OnIncomingPacketQueueFullInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_OnIncomingPacketQueueFullInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PacketQueueMaxSizeBytes) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo) , "::" , stringify ! (PacketQueueMaxSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PacketQueueCurrentSizeBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo) , "::" , stringify ! (PacketQueueCurrentSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverflowPacketLocalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo) , "::" , stringify ! (OverflowPacketLocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverflowPacketChannel) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo) , "::" , stringify ! (OverflowPacketChannel))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OverflowPacketSizeBytes) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_OnIncomingPacketQueueFullInfo) , "::" , stringify ! (OverflowPacketSizeBytes))) ; } pub type EOS_P2P_OnIncomingPacketQueueFullInfo = _tagEOS_P2P_OnIncomingPacketQueueFullInfo ; pub type EOS_P2P_OnIncomingPacketQueueFullCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_P2P_OnIncomingPacketQueueFullInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_P2P_ClearPacketQueueOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RemoteUserId : EOS_ProductUserId , pub SocketId : * const EOS_P2P_SocketId , } # [test] fn bindgen_test_layout__tagEOS_P2P_ClearPacketQueueOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_P2P_ClearPacketQueueOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_P2P_ClearPacketQueueOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_P2P_ClearPacketQueueOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_P2P_ClearPacketQueueOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_P2P_ClearPacketQueueOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ClearPacketQueueOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ClearPacketQueueOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RemoteUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ClearPacketQueueOptions) , "::" , stringify ! (RemoteUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SocketId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_P2P_ClearPacketQueueOptions) , "::" , stringify ! (SocketId))) ; } pub type EOS_P2P_ClearPacketQueueOptions = _tagEOS_P2P_ClearPacketQueueOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_SessionsHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the sessions interface"] pub type EOS_HSessions = * mut EOS_SessionsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_SessionModificationHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the calls responsible for creating/updating sessions"] pub type EOS_HSessionModification = * mut EOS_SessionModificationHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_ActiveSessionHandle { _unused : [u8 ; 0] , } # [doc = " Handle to a single named session that exists locally"] pub type EOS_HActiveSession = * mut EOS_ActiveSessionHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_SessionDetailsHandle { _unused : [u8 ; 0] , } # [doc = " Handle to a single session that may be part of a named session, search result, or invite"] pub type EOS_HSessionDetails = * mut EOS_SessionDetailsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_SessionSearchHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the calls responsible for creating a search object"] pub type EOS_HSessionSearch = * mut EOS_SessionSearchHandle ; extern "C" { # [doc = " Release the memory associated with session modification.\n This must be called on data retrieved from EOS_Sessions_CreateSessionModification or EOS_Sessions_UpdateSessionModification\n\n @param SessionModificationHandle - The session modification handle to release\n\n @see EOS_Sessions_CreateSessionModification\n @see EOS_Sessions_UpdateSessionModification"] pub fn EOS_SessionModification_Release (SessionModificationHandle : EOS_HSessionModification) ; } extern "C" { # [doc = " Release the memory associated with an active session.\n This must be called on data retrieved from EOS_Sessions_CopyActiveSessionHandle\n\n @param ActiveSessionHandle - The active session handle to release\n\n @see EOS_Sessions_CopyActiveSessionHandle"] pub fn EOS_ActiveSession_Release (ActiveSessionHandle : EOS_HActiveSession) ; } extern "C" { # [doc = " Release the memory associated with a single session. This must be called on data retrieved from EOS_SessionSearch_CopySearchResultByIndex.\n\n @param SessionHandle - The session handle to release\n\n @see EOS_SessionSearch_CopySearchResultByIndex"] pub fn EOS_SessionDetails_Release (SessionHandle : EOS_HSessionDetails) ; } extern "C" { # [doc = " Release the memory associated with a session search. This must be called on data retrieved from EOS_Sessions_CreateSessionSearch.\n\n @param SessionSearchHandle - The session search handle to release\n\n @see EOS_Sessions_CreateSessionSearch"] pub fn EOS_SessionSearch_Release (SessionSearchHandle : EOS_HSessionSearch) ; } # [repr (i32)] # [non_exhaustive] # [doc = " All possible states of an existing named session"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EOnlineSessionState { EOS_OSS_NoSession = 0 , EOS_OSS_Creating = 1 , EOS_OSS_Pending = 2 , EOS_OSS_Starting = 3 , EOS_OSS_InProgress = 4 , EOS_OSS_Ending = 5 , EOS_OSS_Ended = 6 , EOS_OSS_Destroying = 7 , } # [repr (i32)] # [non_exhaustive] # [doc = " Advertisement properties for a single attribute associated with a session"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ESessionAttributeAdvertisementType { EOS_SAAT_DontAdvertise = 0 , EOS_SAAT_Advertise = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_CreateSessionModificationOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , pub BucketId : * const :: std :: os :: raw :: c_char , pub MaxPlayers : u32 , pub LocalUserId : EOS_ProductUserId , pub bPresenceEnabled : EOS_Bool , pub SessionId : * const :: std :: os :: raw :: c_char , pub bSanctionsEnabled : EOS_Bool , pub AllowedPlatformIds : * const u32 , pub AllowedPlatformIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_CreateSessionModificationOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_CreateSessionModificationOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_CreateSessionModificationOptions > () , 80usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_CreateSessionModificationOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BucketId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (BucketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxPlayers) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (MaxPlayers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bPresenceEnabled) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (bPresenceEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionId) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (SessionId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bSanctionsEnabled) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (bSanctionsEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIds) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (AllowedPlatformIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIdsCount) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionModificationOptions) , "::" , stringify ! (AllowedPlatformIdsCount))) ; } pub type EOS_Sessions_CreateSessionModificationOptions = _tagEOS_Sessions_CreateSessionModificationOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_UpdateSessionModificationOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_UpdateSessionModificationOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_UpdateSessionModificationOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_UpdateSessionModificationOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_UpdateSessionModificationOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_UpdateSessionModificationOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_UpdateSessionModificationOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionModificationOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionModificationOptions) , "::" , stringify ! (SessionName))) ; } pub type EOS_Sessions_UpdateSessionModificationOptions = _tagEOS_Sessions_UpdateSessionModificationOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_SendInviteOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_SendInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_SendInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_SendInviteOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_SendInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_SendInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_SendInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendInviteOptions) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendInviteOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Sessions_SendInviteOptions = _tagEOS_Sessions_SendInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_SendInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Sessions_SendInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_SendInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_SendInviteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_SendInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_SendInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_SendInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Sessions_SendInviteCallbackInfo = _tagEOS_Sessions_SendInviteCallbackInfo ; pub type EOS_Sessions_OnSendInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_SendInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_RejectInviteOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub InviteId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_RejectInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_RejectInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_RejectInviteOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_RejectInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_RejectInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_RejectInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RejectInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RejectInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RejectInviteOptions) , "::" , stringify ! (InviteId))) ; } pub type EOS_Sessions_RejectInviteOptions = _tagEOS_Sessions_RejectInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_RejectInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Sessions_RejectInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_RejectInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_RejectInviteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_RejectInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_RejectInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_RejectInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RejectInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RejectInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Sessions_RejectInviteCallbackInfo = _tagEOS_Sessions_RejectInviteCallbackInfo ; pub type EOS_Sessions_OnRejectInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_RejectInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_QueryInvitesOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_QueryInvitesOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_QueryInvitesOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_QueryInvitesOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_QueryInvitesOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_QueryInvitesOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_QueryInvitesOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_QueryInvitesOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_QueryInvitesOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Sessions_QueryInvitesOptions = _tagEOS_Sessions_QueryInvitesOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_QueryInvitesCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_QueryInvitesCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_QueryInvitesCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_QueryInvitesCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_QueryInvitesCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_QueryInvitesCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_QueryInvitesCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_QueryInvitesCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_QueryInvitesCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_QueryInvitesCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Sessions_QueryInvitesCallbackInfo = _tagEOS_Sessions_QueryInvitesCallbackInfo ; pub type EOS_Sessions_OnQueryInvitesCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_QueryInvitesCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_GetInviteCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_GetInviteCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_GetInviteCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_GetInviteCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_GetInviteCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_GetInviteCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_GetInviteCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_GetInviteCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_GetInviteCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Sessions_GetInviteCountOptions = _tagEOS_Sessions_GetInviteCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_GetInviteIdByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Index : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_GetInviteIdByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_GetInviteIdByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_GetInviteIdByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_GetInviteIdByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_GetInviteIdByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_GetInviteIdByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_GetInviteIdByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_GetInviteIdByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_GetInviteIdByIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_Sessions_GetInviteIdByIndexOptions = _tagEOS_Sessions_GetInviteIdByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_CreateSessionSearchOptions { pub ApiVersion : i32 , pub MaxSearchResults : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_CreateSessionSearchOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_CreateSessionSearchOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_CreateSessionSearchOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_CreateSessionSearchOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_CreateSessionSearchOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_CreateSessionSearchOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionSearchOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxSearchResults) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CreateSessionSearchOptions) , "::" , stringify ! (MaxSearchResults))) ; } pub type EOS_Sessions_CreateSessionSearchOptions = _tagEOS_Sessions_CreateSessionSearchOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_UpdateSessionOptions { pub ApiVersion : i32 , pub SessionModificationHandle : EOS_HSessionModification , } # [test] fn bindgen_test_layout__tagEOS_Sessions_UpdateSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_UpdateSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_UpdateSessionOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_UpdateSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_UpdateSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_UpdateSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionModificationHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionOptions) , "::" , stringify ! (SessionModificationHandle))) ; } pub type EOS_Sessions_UpdateSessionOptions = _tagEOS_Sessions_UpdateSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_UpdateSessionCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub SessionName : * const :: std :: os :: raw :: c_char , pub SessionId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_UpdateSessionCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_UpdateSessionCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_UpdateSessionCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_UpdateSessionCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_UpdateSessionCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_UpdateSessionCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionCallbackInfo) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UpdateSessionCallbackInfo) , "::" , stringify ! (SessionId))) ; } pub type EOS_Sessions_UpdateSessionCallbackInfo = _tagEOS_Sessions_UpdateSessionCallbackInfo ; pub type EOS_Sessions_OnUpdateSessionCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_UpdateSessionCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_DestroySessionOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_DestroySessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_DestroySessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_DestroySessionOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_DestroySessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_DestroySessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_DestroySessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_DestroySessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_DestroySessionOptions) , "::" , stringify ! (SessionName))) ; } pub type EOS_Sessions_DestroySessionOptions = _tagEOS_Sessions_DestroySessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_DestroySessionCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Sessions_DestroySessionCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_DestroySessionCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_DestroySessionCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_DestroySessionCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_DestroySessionCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_DestroySessionCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_DestroySessionCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_DestroySessionCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Sessions_DestroySessionCallbackInfo = _tagEOS_Sessions_DestroySessionCallbackInfo ; pub type EOS_Sessions_OnDestroySessionCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_DestroySessionCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_JoinSessionOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , pub SessionHandle : EOS_HSessionDetails , pub LocalUserId : EOS_ProductUserId , pub bPresenceEnabled : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Sessions_JoinSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_JoinSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_JoinSessionOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_JoinSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_JoinSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_JoinSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionOptions) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionHandle) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionOptions) , "::" , stringify ! (SessionHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bPresenceEnabled) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionOptions) , "::" , stringify ! (bPresenceEnabled))) ; } pub type EOS_Sessions_JoinSessionOptions = _tagEOS_Sessions_JoinSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_JoinSessionCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Sessions_JoinSessionCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_JoinSessionCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_JoinSessionCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_JoinSessionCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_JoinSessionCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_JoinSessionCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Sessions_JoinSessionCallbackInfo = _tagEOS_Sessions_JoinSessionCallbackInfo ; pub type EOS_Sessions_OnJoinSessionCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_JoinSessionCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_StartSessionOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_StartSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_StartSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_StartSessionOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_StartSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_StartSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_StartSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_StartSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_StartSessionOptions) , "::" , stringify ! (SessionName))) ; } pub type EOS_Sessions_StartSessionOptions = _tagEOS_Sessions_StartSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_StartSessionCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Sessions_StartSessionCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_StartSessionCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_StartSessionCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_StartSessionCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_StartSessionCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_StartSessionCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_StartSessionCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_StartSessionCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Sessions_StartSessionCallbackInfo = _tagEOS_Sessions_StartSessionCallbackInfo ; pub type EOS_Sessions_OnStartSessionCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_StartSessionCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_EndSessionOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_EndSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_EndSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_EndSessionOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_EndSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_EndSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_EndSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_EndSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_EndSessionOptions) , "::" , stringify ! (SessionName))) ; } pub type EOS_Sessions_EndSessionOptions = _tagEOS_Sessions_EndSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_EndSessionCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Sessions_EndSessionCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_EndSessionCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_EndSessionCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_EndSessionCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_EndSessionCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_EndSessionCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_EndSessionCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_EndSessionCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Sessions_EndSessionCallbackInfo = _tagEOS_Sessions_EndSessionCallbackInfo ; pub type EOS_Sessions_OnEndSessionCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_EndSessionCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_RegisterPlayersOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , pub PlayersToRegister : * mut EOS_ProductUserId , pub PlayersToRegisterCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_RegisterPlayersOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_RegisterPlayersOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_RegisterPlayersOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_RegisterPlayersOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_RegisterPlayersOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_RegisterPlayersOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersOptions) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayersToRegister) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersOptions) , "::" , stringify ! (PlayersToRegister))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayersToRegisterCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersOptions) , "::" , stringify ! (PlayersToRegisterCount))) ; } pub type EOS_Sessions_RegisterPlayersOptions = _tagEOS_Sessions_RegisterPlayersOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_RegisterPlayersCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub RegisteredPlayers : * mut EOS_ProductUserId , pub RegisteredPlayersCount : u32 , pub SanctionedPlayers : * mut EOS_ProductUserId , pub SanctionedPlayersCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_RegisterPlayersCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_RegisterPlayersCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_RegisterPlayersCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_RegisterPlayersCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RegisteredPlayers) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo) , "::" , stringify ! (RegisteredPlayers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RegisteredPlayersCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo) , "::" , stringify ! (RegisteredPlayersCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SanctionedPlayers) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo) , "::" , stringify ! (SanctionedPlayers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SanctionedPlayersCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_RegisterPlayersCallbackInfo) , "::" , stringify ! (SanctionedPlayersCount))) ; } pub type EOS_Sessions_RegisterPlayersCallbackInfo = _tagEOS_Sessions_RegisterPlayersCallbackInfo ; pub type EOS_Sessions_OnRegisterPlayersCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_RegisterPlayersCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_UnregisterPlayersOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , pub PlayersToUnregister : * mut EOS_ProductUserId , pub PlayersToUnregisterCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_UnregisterPlayersOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_UnregisterPlayersOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_UnregisterPlayersOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_UnregisterPlayersOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_UnregisterPlayersOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersOptions) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayersToUnregister) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersOptions) , "::" , stringify ! (PlayersToUnregister))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayersToUnregisterCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersOptions) , "::" , stringify ! (PlayersToUnregisterCount))) ; } pub type EOS_Sessions_UnregisterPlayersOptions = _tagEOS_Sessions_UnregisterPlayersOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_UnregisterPlayersCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub UnregisteredPlayers : * mut EOS_ProductUserId , pub UnregisteredPlayersCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_UnregisterPlayersCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_UnregisterPlayersCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_UnregisterPlayersCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_UnregisterPlayersCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_UnregisterPlayersCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnregisteredPlayers) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersCallbackInfo) , "::" , stringify ! (UnregisteredPlayers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnregisteredPlayersCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_UnregisterPlayersCallbackInfo) , "::" , stringify ! (UnregisteredPlayersCount))) ; } pub type EOS_Sessions_UnregisterPlayersCallbackInfo = _tagEOS_Sessions_UnregisterPlayersCallbackInfo ; pub type EOS_Sessions_OnUnregisterPlayersCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_UnregisterPlayersCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_SetBucketIdOptions { pub ApiVersion : i32 , pub BucketId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_SetBucketIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_SetBucketIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_SetBucketIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_SetBucketIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_SetBucketIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_SetBucketIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetBucketIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BucketId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetBucketIdOptions) , "::" , stringify ! (BucketId))) ; } pub type EOS_SessionModification_SetBucketIdOptions = _tagEOS_SessionModification_SetBucketIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_SetHostAddressOptions { pub ApiVersion : i32 , pub HostAddress : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_SetHostAddressOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_SetHostAddressOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_SetHostAddressOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_SetHostAddressOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_SetHostAddressOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_SetHostAddressOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetHostAddressOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HostAddress) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetHostAddressOptions) , "::" , stringify ! (HostAddress))) ; } pub type EOS_SessionModification_SetHostAddressOptions = _tagEOS_SessionModification_SetHostAddressOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " Permission level gets more restrictive further down"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EOnlineSessionPermissionLevel { EOS_OSPF_PublicAdvertised = 0 , EOS_OSPF_JoinViaPresence = 1 , EOS_OSPF_InviteOnly = 2 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_SetPermissionLevelOptions { pub ApiVersion : i32 , pub PermissionLevel : EOS_EOnlineSessionPermissionLevel , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_SetPermissionLevelOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_SetPermissionLevelOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_SetPermissionLevelOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_SetPermissionLevelOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_SetPermissionLevelOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_SetPermissionLevelOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetPermissionLevelOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PermissionLevel) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetPermissionLevelOptions) , "::" , stringify ! (PermissionLevel))) ; } pub type EOS_SessionModification_SetPermissionLevelOptions = _tagEOS_SessionModification_SetPermissionLevelOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_SetJoinInProgressAllowedOptions { pub ApiVersion : i32 , pub bAllowJoinInProgress : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_SetJoinInProgressAllowedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_SetJoinInProgressAllowedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_SetJoinInProgressAllowedOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_SetJoinInProgressAllowedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_SetJoinInProgressAllowedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_SetJoinInProgressAllowedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetJoinInProgressAllowedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowJoinInProgress) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetJoinInProgressAllowedOptions) , "::" , stringify ! (bAllowJoinInProgress))) ; } pub type EOS_SessionModification_SetJoinInProgressAllowedOptions = _tagEOS_SessionModification_SetJoinInProgressAllowedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_SetMaxPlayersOptions { pub ApiVersion : i32 , pub MaxPlayers : u32 , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_SetMaxPlayersOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_SetMaxPlayersOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_SetMaxPlayersOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_SetMaxPlayersOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_SetMaxPlayersOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_SetMaxPlayersOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetMaxPlayersOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxPlayers) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetMaxPlayersOptions) , "::" , stringify ! (MaxPlayers))) ; } pub type EOS_SessionModification_SetMaxPlayersOptions = _tagEOS_SessionModification_SetMaxPlayersOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_SetInvitesAllowedOptions { pub ApiVersion : i32 , pub bInvitesAllowed : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_SetInvitesAllowedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_SetInvitesAllowedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_SetInvitesAllowedOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_SetInvitesAllowedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_SetInvitesAllowedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_SetInvitesAllowedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetInvitesAllowedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bInvitesAllowed) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetInvitesAllowedOptions) , "::" , stringify ! (bInvitesAllowed))) ; } pub type EOS_SessionModification_SetInvitesAllowedOptions = _tagEOS_SessionModification_SetInvitesAllowedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_SetAllowedPlatformIdsOptions { pub ApiVersion : i32 , pub AllowedPlatformIds : * const u32 , pub AllowedPlatformIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_SetAllowedPlatformIdsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_SetAllowedPlatformIdsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_SetAllowedPlatformIdsOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_SetAllowedPlatformIdsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_SetAllowedPlatformIdsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_SetAllowedPlatformIdsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetAllowedPlatformIdsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIds) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetAllowedPlatformIdsOptions) , "::" , stringify ! (AllowedPlatformIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIdsCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_SetAllowedPlatformIdsOptions) , "::" , stringify ! (AllowedPlatformIdsCount))) ; } pub type EOS_SessionModification_SetAllowedPlatformIdsOptions = _tagEOS_SessionModification_SetAllowedPlatformIdsOptions ; # [repr (C)] # [derive (Copy , Clone)] pub struct _tagEOS_Sessions_AttributeData { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , pub Value : _tagEOS_Sessions_AttributeData__bindgen_ty_1 , pub ValueType : EOS_ESessionAttributeType , } # [doc = " Contains information about both session and search parameter attribution"] # [repr (C)] # [derive (Copy , Clone)] pub union _tagEOS_Sessions_AttributeData__bindgen_ty_1 { pub AsInt64 : i64 , pub AsDouble : f64 , pub AsBool : EOS_Bool , pub AsUtf8 : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_AttributeData__bindgen_ty_1 () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AttributeData__bindgen_ty_1 > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AttributeData__bindgen_ty_1 > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AttributeData__bindgen_ty_1))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AttributeData__bindgen_ty_1 > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AttributeData__bindgen_ty_1))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsInt64) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsInt64))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsDouble) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsDouble))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsBool) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsBool))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsUtf8) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsUtf8))) ; } # [test] fn bindgen_test_layout__tagEOS_Sessions_AttributeData () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AttributeData > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AttributeData > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AttributeData))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AttributeData > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AttributeData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Value) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData) , "::" , stringify ! (Value))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ValueType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AttributeData) , "::" , stringify ! (ValueType))) ; } pub type EOS_Sessions_AttributeData = _tagEOS_Sessions_AttributeData ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ActiveSession_CopyInfoOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_ActiveSession_CopyInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ActiveSession_CopyInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ActiveSession_CopyInfoOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_ActiveSession_CopyInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ActiveSession_CopyInfoOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ActiveSession_CopyInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_CopyInfoOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_ActiveSession_CopyInfoOptions = _tagEOS_ActiveSession_CopyInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ActiveSession_GetRegisteredPlayerCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_ActiveSession_GetRegisteredPlayerCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ActiveSession_GetRegisteredPlayerCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ActiveSession_GetRegisteredPlayerCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_ActiveSession_GetRegisteredPlayerCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ActiveSession_GetRegisteredPlayerCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ActiveSession_GetRegisteredPlayerCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_GetRegisteredPlayerCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_ActiveSession_GetRegisteredPlayerCountOptions = _tagEOS_ActiveSession_GetRegisteredPlayerCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions { pub ApiVersion : i32 , pub PlayerIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions) , "::" , stringify ! (PlayerIndex))) ; } pub type EOS_ActiveSession_GetRegisteredPlayerByIndexOptions = _tagEOS_ActiveSession_GetRegisteredPlayerByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionDetails_Attribute { pub ApiVersion : i32 , pub Data : * mut EOS_Sessions_AttributeData , pub AdvertisementType : EOS_ESessionAttributeAdvertisementType , } # [test] fn bindgen_test_layout__tagEOS_SessionDetails_Attribute () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionDetails_Attribute > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionDetails_Attribute > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionDetails_Attribute))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionDetails_Attribute > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionDetails_Attribute))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Attribute) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Attribute) , "::" , stringify ! (Data))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AdvertisementType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Attribute) , "::" , stringify ! (AdvertisementType))) ; } pub type EOS_SessionDetails_Attribute = _tagEOS_SessionDetails_Attribute ; extern "C" { # [doc = " Release the memory associated with a session attribute. This must be called on data retrieved from EOS_SessionDetails_CopySessionAttributeByIndex.\n\n @param SessionAttribute - The session attribute to release\n\n @see EOS_SessionDetails_CopySessionAttributeByIndex"] pub fn EOS_SessionDetails_Attribute_Release (SessionAttribute : * mut EOS_SessionDetails_Attribute) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_AddAttributeOptions { pub ApiVersion : i32 , pub SessionAttribute : * const EOS_Sessions_AttributeData , pub AdvertisementType : EOS_ESessionAttributeAdvertisementType , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_AddAttributeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_AddAttributeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_AddAttributeOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_AddAttributeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_AddAttributeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_AddAttributeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_AddAttributeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionAttribute) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_AddAttributeOptions) , "::" , stringify ! (SessionAttribute))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AdvertisementType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_AddAttributeOptions) , "::" , stringify ! (AdvertisementType))) ; } pub type EOS_SessionModification_AddAttributeOptions = _tagEOS_SessionModification_AddAttributeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionModification_RemoveAttributeOptions { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_SessionModification_RemoveAttributeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionModification_RemoveAttributeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionModification_RemoveAttributeOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionModification_RemoveAttributeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionModification_RemoveAttributeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionModification_RemoveAttributeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_RemoveAttributeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionModification_RemoveAttributeOptions) , "::" , stringify ! (Key))) ; } pub type EOS_SessionModification_RemoveAttributeOptions = _tagEOS_SessionModification_RemoveAttributeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_SetMaxResultsOptions { pub ApiVersion : i32 , pub MaxSearchResults : u32 , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_SetMaxResultsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_SetMaxResultsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_SetMaxResultsOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_SetMaxResultsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_SetMaxResultsOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_SetMaxResultsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetMaxResultsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxSearchResults) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetMaxResultsOptions) , "::" , stringify ! (MaxSearchResults))) ; } pub type EOS_SessionSearch_SetMaxResultsOptions = _tagEOS_SessionSearch_SetMaxResultsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_FindOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_FindOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_FindOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_FindOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_FindOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_FindOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_FindOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_FindOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_FindOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_SessionSearch_FindOptions = _tagEOS_SessionSearch_FindOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_FindCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_FindCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_FindCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_FindCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_FindCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_FindCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_FindCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_FindCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_FindCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_SessionSearch_FindCallbackInfo = _tagEOS_SessionSearch_FindCallbackInfo ; pub type EOS_SessionSearch_OnFindCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_SessionSearch_FindCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_GetSearchResultCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_GetSearchResultCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_GetSearchResultCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_GetSearchResultCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_GetSearchResultCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_GetSearchResultCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_GetSearchResultCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_GetSearchResultCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_SessionSearch_GetSearchResultCountOptions = _tagEOS_SessionSearch_GetSearchResultCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_CopySearchResultByIndexOptions { pub ApiVersion : i32 , pub SessionIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_CopySearchResultByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_CopySearchResultByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_CopySearchResultByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_CopySearchResultByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_CopySearchResultByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_CopySearchResultByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_CopySearchResultByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_CopySearchResultByIndexOptions) , "::" , stringify ! (SessionIndex))) ; } pub type EOS_SessionSearch_CopySearchResultByIndexOptions = _tagEOS_SessionSearch_CopySearchResultByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_SetSessionIdOptions { pub ApiVersion : i32 , pub SessionId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_SetSessionIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_SetSessionIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_SetSessionIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_SetSessionIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_SetSessionIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_SetSessionIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetSessionIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetSessionIdOptions) , "::" , stringify ! (SessionId))) ; } pub type EOS_SessionSearch_SetSessionIdOptions = _tagEOS_SessionSearch_SetSessionIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_SetTargetUserIdOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_SetTargetUserIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_SetTargetUserIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_SetTargetUserIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_SetTargetUserIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_SetTargetUserIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_SetTargetUserIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetTargetUserIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetTargetUserIdOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_SessionSearch_SetTargetUserIdOptions = _tagEOS_SessionSearch_SetTargetUserIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_SetParameterOptions { pub ApiVersion : i32 , pub Parameter : * const EOS_Sessions_AttributeData , pub ComparisonOp : EOS_EOnlineComparisonOp , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_SetParameterOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_SetParameterOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_SetParameterOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_SetParameterOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_SetParameterOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_SetParameterOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetParameterOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Parameter) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetParameterOptions) , "::" , stringify ! (Parameter))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ComparisonOp) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_SetParameterOptions) , "::" , stringify ! (ComparisonOp))) ; } pub type EOS_SessionSearch_SetParameterOptions = _tagEOS_SessionSearch_SetParameterOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionSearch_RemoveParameterOptions { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , pub ComparisonOp : EOS_EOnlineComparisonOp , } # [test] fn bindgen_test_layout__tagEOS_SessionSearch_RemoveParameterOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionSearch_RemoveParameterOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionSearch_RemoveParameterOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionSearch_RemoveParameterOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionSearch_RemoveParameterOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionSearch_RemoveParameterOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_RemoveParameterOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_RemoveParameterOptions) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ComparisonOp) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionSearch_RemoveParameterOptions) , "::" , stringify ! (ComparisonOp))) ; } pub type EOS_SessionSearch_RemoveParameterOptions = _tagEOS_SessionSearch_RemoveParameterOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionDetails_Settings { pub ApiVersion : i32 , pub BucketId : * const :: std :: os :: raw :: c_char , pub NumPublicConnections : u32 , pub bAllowJoinInProgress : EOS_Bool , pub PermissionLevel : EOS_EOnlineSessionPermissionLevel , pub bInvitesAllowed : EOS_Bool , pub bSanctionsEnabled : EOS_Bool , pub AllowedPlatformIds : * const u32 , pub AllowedPlatformIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_SessionDetails_Settings () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionDetails_Settings > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionDetails_Settings > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionDetails_Settings))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionDetails_Settings > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionDetails_Settings))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BucketId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (BucketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NumPublicConnections) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (NumPublicConnections))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowJoinInProgress) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (bAllowJoinInProgress))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PermissionLevel) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (PermissionLevel))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bInvitesAllowed) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (bInvitesAllowed))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bSanctionsEnabled) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (bSanctionsEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIds) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (AllowedPlatformIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIdsCount) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Settings) , "::" , stringify ! (AllowedPlatformIdsCount))) ; } pub type EOS_SessionDetails_Settings = _tagEOS_SessionDetails_Settings ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionDetails_Info { pub ApiVersion : i32 , pub SessionId : * const :: std :: os :: raw :: c_char , pub HostAddress : * const :: std :: os :: raw :: c_char , pub NumOpenPublicConnections : u32 , pub Settings : * const EOS_SessionDetails_Settings , pub OwnerUserId : EOS_ProductUserId , pub OwnerServerClientId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_SessionDetails_Info () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionDetails_Info > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionDetails_Info > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionDetails_Info))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionDetails_Info > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionDetails_Info))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Info) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Info) , "::" , stringify ! (SessionId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HostAddress) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Info) , "::" , stringify ! (HostAddress))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NumOpenPublicConnections) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Info) , "::" , stringify ! (NumOpenPublicConnections))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Settings) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Info) , "::" , stringify ! (Settings))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OwnerUserId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Info) , "::" , stringify ! (OwnerUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OwnerServerClientId) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_Info) , "::" , stringify ! (OwnerServerClientId))) ; } pub type EOS_SessionDetails_Info = _tagEOS_SessionDetails_Info ; extern "C" { pub fn EOS_SessionDetails_Info_Release (SessionInfo : * mut EOS_SessionDetails_Info) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionDetails_CopyInfoOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_SessionDetails_CopyInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionDetails_CopyInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionDetails_CopyInfoOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionDetails_CopyInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionDetails_CopyInfoOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionDetails_CopyInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_CopyInfoOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_SessionDetails_CopyInfoOptions = _tagEOS_SessionDetails_CopyInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionDetails_GetSessionAttributeCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_SessionDetails_GetSessionAttributeCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionDetails_GetSessionAttributeCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionDetails_GetSessionAttributeCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionDetails_GetSessionAttributeCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionDetails_GetSessionAttributeCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionDetails_GetSessionAttributeCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_GetSessionAttributeCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_SessionDetails_GetSessionAttributeCountOptions = _tagEOS_SessionDetails_GetSessionAttributeCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionDetails_CopySessionAttributeByIndexOptions { pub ApiVersion : i32 , pub AttrIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_SessionDetails_CopySessionAttributeByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionDetails_CopySessionAttributeByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionDetails_CopySessionAttributeByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionDetails_CopySessionAttributeByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttrIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByIndexOptions) , "::" , stringify ! (AttrIndex))) ; } pub type EOS_SessionDetails_CopySessionAttributeByIndexOptions = _tagEOS_SessionDetails_CopySessionAttributeByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_SessionDetails_CopySessionAttributeByKeyOptions { pub ApiVersion : i32 , pub AttrKey : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_SessionDetails_CopySessionAttributeByKeyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_SessionDetails_CopySessionAttributeByKeyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_SessionDetails_CopySessionAttributeByKeyOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByKeyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_SessionDetails_CopySessionAttributeByKeyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByKeyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByKeyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttrKey) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_SessionDetails_CopySessionAttributeByKeyOptions) , "::" , stringify ! (AttrKey))) ; } pub type EOS_SessionDetails_CopySessionAttributeByKeyOptions = _tagEOS_SessionDetails_CopySessionAttributeByKeyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ActiveSession_Info { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , pub State : EOS_EOnlineSessionState , pub SessionDetails : * const EOS_SessionDetails_Info , } # [test] fn bindgen_test_layout__tagEOS_ActiveSession_Info () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ActiveSession_Info > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ActiveSession_Info > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_ActiveSession_Info))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ActiveSession_Info > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ActiveSession_Info))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_Info) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_Info) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_Info) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . State) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_Info) , "::" , stringify ! (State))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionDetails) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ActiveSession_Info) , "::" , stringify ! (SessionDetails))) ; } pub type EOS_ActiveSession_Info = _tagEOS_ActiveSession_Info ; extern "C" { # [doc = " Release the memory associated with an EOS_ActiveSession_Info structure. This must be called on data retrieved from EOS_ActiveSession_CopyInfo.\n\n @param ActiveSessionInfo - The active session structure to be released\n\n @see EOS_ActiveSession_Info\n @see EOS_ActiveSession_CopyInfo"] pub fn EOS_ActiveSession_Info_Release (ActiveSessionInfo : * mut EOS_ActiveSession_Info) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_CopyActiveSessionHandleOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_CopyActiveSessionHandleOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_CopyActiveSessionHandleOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_CopyActiveSessionHandleOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_CopyActiveSessionHandleOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_CopyActiveSessionHandleOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_CopyActiveSessionHandleOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopyActiveSessionHandleOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopyActiveSessionHandleOptions) , "::" , stringify ! (SessionName))) ; } pub type EOS_Sessions_CopyActiveSessionHandleOptions = _tagEOS_Sessions_CopyActiveSessionHandleOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_AddNotifySessionInviteReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_AddNotifySessionInviteReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AddNotifySessionInviteReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AddNotifySessionInviteReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AddNotifySessionInviteReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Sessions_AddNotifySessionInviteReceivedOptions = _tagEOS_Sessions_AddNotifySessionInviteReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_SessionInviteReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , pub InviteId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_SessionInviteReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_SessionInviteReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_SessionInviteReceivedCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_SessionInviteReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_SessionInviteReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_SessionInviteReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteReceivedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteReceivedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteReceivedCallbackInfo) , "::" , stringify ! (InviteId))) ; } pub type EOS_Sessions_SessionInviteReceivedCallbackInfo = _tagEOS_Sessions_SessionInviteReceivedCallbackInfo ; pub type EOS_Sessions_OnSessionInviteReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_SessionInviteReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Sessions_AddNotifySessionInviteAcceptedOptions = _tagEOS_Sessions_AddNotifySessionInviteAcceptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_SessionInviteAcceptedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub SessionId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , pub InviteId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_SessionInviteAcceptedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_SessionInviteAcceptedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_SessionInviteAcceptedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_SessionInviteAcceptedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_SessionInviteAcceptedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_SessionInviteAcceptedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteAcceptedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteAcceptedCallbackInfo) , "::" , stringify ! (SessionId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteAcceptedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteAcceptedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteAcceptedCallbackInfo) , "::" , stringify ! (InviteId))) ; } pub type EOS_Sessions_SessionInviteAcceptedCallbackInfo = _tagEOS_Sessions_SessionInviteAcceptedCallbackInfo ; pub type EOS_Sessions_OnSessionInviteAcceptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_SessionInviteAcceptedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_AddNotifySessionInviteRejectedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_AddNotifySessionInviteRejectedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AddNotifySessionInviteRejectedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AddNotifySessionInviteRejectedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteRejectedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AddNotifySessionInviteRejectedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteRejectedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AddNotifySessionInviteRejectedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Sessions_AddNotifySessionInviteRejectedOptions = _tagEOS_Sessions_AddNotifySessionInviteRejectedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_SessionInviteRejectedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub InviteId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , pub SessionId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_SessionInviteRejectedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_SessionInviteRejectedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_SessionInviteRejectedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_SessionInviteRejectedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_SessionInviteRejectedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_SessionInviteRejectedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteRejectedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteRejectedCallbackInfo) , "::" , stringify ! (InviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteRejectedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteRejectedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SessionInviteRejectedCallbackInfo) , "::" , stringify ! (SessionId))) ; } pub type EOS_Sessions_SessionInviteRejectedCallbackInfo = _tagEOS_Sessions_SessionInviteRejectedCallbackInfo ; pub type EOS_Sessions_OnSessionInviteRejectedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_SessionInviteRejectedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Sessions_AddNotifyJoinSessionAcceptedOptions = _tagEOS_Sessions_AddNotifyJoinSessionAcceptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_JoinSessionAcceptedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub UiEventId : EOS_UI_EventId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_JoinSessionAcceptedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_JoinSessionAcceptedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_JoinSessionAcceptedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_JoinSessionAcceptedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_JoinSessionAcceptedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_JoinSessionAcceptedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionAcceptedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionAcceptedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_JoinSessionAcceptedCallbackInfo) , "::" , stringify ! (UiEventId))) ; } pub type EOS_Sessions_JoinSessionAcceptedCallbackInfo = _tagEOS_Sessions_JoinSessionAcceptedCallbackInfo ; pub type EOS_Sessions_OnJoinSessionAcceptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_JoinSessionAcceptedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_CopySessionHandleByInviteIdOptions { pub ApiVersion : i32 , pub InviteId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_CopySessionHandleByInviteIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_CopySessionHandleByInviteIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_CopySessionHandleByInviteIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_CopySessionHandleByInviteIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_CopySessionHandleByInviteIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_CopySessionHandleByInviteIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopySessionHandleByInviteIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopySessionHandleByInviteIdOptions) , "::" , stringify ! (InviteId))) ; } pub type EOS_Sessions_CopySessionHandleByInviteIdOptions = _tagEOS_Sessions_CopySessionHandleByInviteIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_CopySessionHandleByUiEventIdOptions { pub ApiVersion : i32 , pub UiEventId : EOS_UI_EventId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_CopySessionHandleByUiEventIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_CopySessionHandleByUiEventIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_CopySessionHandleByUiEventIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_CopySessionHandleByUiEventIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_CopySessionHandleByUiEventIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_CopySessionHandleByUiEventIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopySessionHandleByUiEventIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopySessionHandleByUiEventIdOptions) , "::" , stringify ! (UiEventId))) ; } pub type EOS_Sessions_CopySessionHandleByUiEventIdOptions = _tagEOS_Sessions_CopySessionHandleByUiEventIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_CopySessionHandleForPresenceOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_CopySessionHandleForPresenceOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_CopySessionHandleForPresenceOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_CopySessionHandleForPresenceOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_CopySessionHandleForPresenceOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_CopySessionHandleForPresenceOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_CopySessionHandleForPresenceOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopySessionHandleForPresenceOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_CopySessionHandleForPresenceOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Sessions_CopySessionHandleForPresenceOptions = _tagEOS_Sessions_CopySessionHandleForPresenceOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_IsUserInSessionOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sessions_IsUserInSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_IsUserInSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_IsUserInSessionOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_IsUserInSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_IsUserInSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_IsUserInSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_IsUserInSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_IsUserInSessionOptions) , "::" , stringify ! (SessionName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_IsUserInSessionOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Sessions_IsUserInSessionOptions = _tagEOS_Sessions_IsUserInSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_DumpSessionStateOptions { pub ApiVersion : i32 , pub SessionName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_DumpSessionStateOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_DumpSessionStateOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_DumpSessionStateOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_DumpSessionStateOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_DumpSessionStateOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_DumpSessionStateOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_DumpSessionStateOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_DumpSessionStateOptions) , "::" , stringify ! (SessionName))) ; } pub type EOS_Sessions_DumpSessionStateOptions = _tagEOS_Sessions_DumpSessionStateOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Sessions_AddNotifyLeaveSessionRequestedOptions = _tagEOS_Sessions_AddNotifyLeaveSessionRequestedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_LeaveSessionRequestedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub SessionName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_LeaveSessionRequestedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_LeaveSessionRequestedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_LeaveSessionRequestedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_LeaveSessionRequestedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_LeaveSessionRequestedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_LeaveSessionRequestedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_LeaveSessionRequestedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_LeaveSessionRequestedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_LeaveSessionRequestedCallbackInfo) , "::" , stringify ! (SessionName))) ; } pub type EOS_Sessions_LeaveSessionRequestedCallbackInfo = _tagEOS_Sessions_LeaveSessionRequestedCallbackInfo ; pub type EOS_Sessions_OnLeaveSessionRequestedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_LeaveSessionRequestedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions = _tagEOS_Sessions_AddNotifySendSessionNativeInviteRequestedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub UiEventId : EOS_UI_EventId , pub LocalUserId : EOS_ProductUserId , pub TargetNativeAccountType : EOS_IntegratedPlatformType , pub TargetUserNativeAccountId : * const :: std :: os :: raw :: c_char , pub SessionId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo) , "::" , stringify ! (UiEventId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetNativeAccountType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo) , "::" , stringify ! (TargetNativeAccountType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserNativeAccountId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo) , "::" , stringify ! (TargetUserNativeAccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo) , "::" , stringify ! (SessionId))) ; } pub type EOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo = _tagEOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo ; pub type EOS_Sessions_OnSendSessionNativeInviteRequestedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sessions_SendSessionNativeInviteRequestedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_LobbyHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the lobby interface"] pub type EOS_HLobby = * mut EOS_LobbyHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_LobbyModificationHandle { _unused : [u8 ; 0] , } # [doc = " Handle to a lobby modification object"] pub type EOS_HLobbyModification = * mut EOS_LobbyModificationHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_LobbyDetailsHandle { _unused : [u8 ; 0] , } # [doc = " Handle to a single lobby"] pub type EOS_HLobbyDetails = * mut EOS_LobbyDetailsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_LobbySearchHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the calls responsible for creating a search object"] pub type EOS_HLobbySearch = * mut EOS_LobbySearchHandle ; extern "C" { pub fn EOS_LobbyModification_Release (LobbyModificationHandle : EOS_HLobbyModification) ; } extern "C" { # [doc = " Release the memory associated with a single lobby. This must be called on data retrieved from EOS_LobbySearch_CopySearchResultByIndex.\n\n @param LobbyHandle - The lobby handle to release\n\n @see EOS_LobbySearch_CopySearchResultByIndex"] pub fn EOS_LobbyDetails_Release (LobbyHandle : EOS_HLobbyDetails) ; } extern "C" { # [doc = " Release the memory associated with a lobby search. This must be called on data retrieved from EOS_Lobby_CreateLobbySearch.\n\n @param LobbySearchHandle - The lobby search handle to release\n\n @see EOS_Lobby_CreateLobbySearch"] pub fn EOS_LobbySearch_Release (LobbySearchHandle : EOS_HLobbySearch) ; } # [doc = " All lobbies are referenced by a unique lobby ID"] pub type EOS_LobbyId = * const :: std :: os :: raw :: c_char ; # [repr (i32)] # [non_exhaustive] # [doc = " Permission level gets more restrictive further down"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ELobbyPermissionLevel { EOS_LPL_PUBLICADVERTISED = 0 , EOS_LPL_JOINVIAPRESENCE = 1 , EOS_LPL_INVITEONLY = 2 , } # [repr (i32)] # [non_exhaustive] # [doc = " Advertisement properties for a single attribute associated with a lobby"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ELobbyAttributeVisibility { EOS_LAT_PUBLIC = 0 , EOS_LAT_PRIVATE = 1 , } # [repr (i32)] # [non_exhaustive] # [doc = " Various types of lobby member updates"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ELobbyMemberStatus { EOS_LMS_JOINED = 0 , EOS_LMS_LEFT = 1 , EOS_LMS_DISCONNECTED = 2 , EOS_LMS_KICKED = 3 , EOS_LMS_PROMOTED = 4 , EOS_LMS_CLOSED = 5 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_Info { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LobbyOwnerUserId : EOS_ProductUserId , pub PermissionLevel : EOS_ELobbyPermissionLevel , pub AvailableSlots : u32 , pub MaxMembers : u32 , pub bAllowInvites : EOS_Bool , pub BucketId : * const :: std :: os :: raw :: c_char , pub bAllowHostMigration : EOS_Bool , pub bRTCRoomEnabled : EOS_Bool , pub bAllowJoinById : EOS_Bool , pub bRejoinAfterKickRequiresInvite : EOS_Bool , pub bPresenceEnabled : EOS_Bool , pub AllowedPlatformIds : * const u32 , pub AllowedPlatformIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_Info () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_Info > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_Info > () , 88usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_Info))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_Info > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_Info))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyOwnerUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (LobbyOwnerUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PermissionLevel) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (PermissionLevel))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AvailableSlots) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (AvailableSlots))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxMembers) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (MaxMembers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowInvites) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (bAllowInvites))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BucketId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (BucketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowHostMigration) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (bAllowHostMigration))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bRTCRoomEnabled) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (bRTCRoomEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowJoinById) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (bAllowJoinById))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bRejoinAfterKickRequiresInvite) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (bRejoinAfterKickRequiresInvite))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bPresenceEnabled) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (bPresenceEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIds) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (AllowedPlatformIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIdsCount) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_Info) , "::" , stringify ! (AllowedPlatformIdsCount))) ; } pub type EOS_LobbyDetails_Info = _tagEOS_LobbyDetails_Info ; extern "C" { pub fn EOS_LobbyDetails_Info_Release (LobbyDetailsInfo : * mut EOS_LobbyDetails_Info) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LocalRTCOptions { pub ApiVersion : i32 , pub Flags : u32 , pub bUseManualAudioInput : EOS_Bool , pub bUseManualAudioOutput : EOS_Bool , pub bLocalAudioDeviceInputStartsMuted : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LocalRTCOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LocalRTCOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LocalRTCOptions > () , 20usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LocalRTCOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LocalRTCOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LocalRTCOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LocalRTCOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Flags) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LocalRTCOptions) , "::" , stringify ! (Flags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bUseManualAudioInput) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LocalRTCOptions) , "::" , stringify ! (bUseManualAudioInput))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bUseManualAudioOutput) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LocalRTCOptions) , "::" , stringify ! (bUseManualAudioOutput))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bLocalAudioDeviceInputStartsMuted) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LocalRTCOptions) , "::" , stringify ! (bLocalAudioDeviceInputStartsMuted))) ; } pub type EOS_Lobby_LocalRTCOptions = _tagEOS_Lobby_LocalRTCOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_CreateLobbyOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub MaxLobbyMembers : u32 , pub PermissionLevel : EOS_ELobbyPermissionLevel , pub bPresenceEnabled : EOS_Bool , pub bAllowInvites : EOS_Bool , pub BucketId : * const :: std :: os :: raw :: c_char , pub bDisableHostMigration : EOS_Bool , pub bEnableRTCRoom : EOS_Bool , pub LocalRTCOptions : * const EOS_Lobby_LocalRTCOptions , pub LobbyId : EOS_LobbyId , pub bEnableJoinById : EOS_Bool , pub bRejoinAfterKickRequiresInvite : EOS_Bool , pub AllowedPlatformIds : * const u32 , pub AllowedPlatformIdsCount : u32 , pub bCrossplayOptOut : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Lobby_CreateLobbyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_CreateLobbyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_CreateLobbyOptions > () , 88usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_CreateLobbyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxLobbyMembers) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (MaxLobbyMembers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PermissionLevel) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (PermissionLevel))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bPresenceEnabled) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (bPresenceEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowInvites) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (bAllowInvites))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BucketId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (BucketId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bDisableHostMigration) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (bDisableHostMigration))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bEnableRTCRoom) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (bEnableRTCRoom))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalRTCOptions) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (LocalRTCOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bEnableJoinById) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (bEnableJoinById))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bRejoinAfterKickRequiresInvite) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (bRejoinAfterKickRequiresInvite))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIds) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (AllowedPlatformIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIdsCount) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (AllowedPlatformIdsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bCrossplayOptOut) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyOptions) , "::" , stringify ! (bCrossplayOptOut))) ; } pub type EOS_Lobby_CreateLobbyOptions = _tagEOS_Lobby_CreateLobbyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_CreateLobbyCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_CreateLobbyCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_CreateLobbyCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_CreateLobbyCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_CreateLobbyCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_CreateLobbyCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_CreateLobbyCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbyCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_CreateLobbyCallbackInfo = _tagEOS_Lobby_CreateLobbyCallbackInfo ; pub type EOS_Lobby_OnCreateLobbyCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_CreateLobbyCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_DestroyLobbyOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_DestroyLobbyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_DestroyLobbyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_DestroyLobbyOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_DestroyLobbyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_DestroyLobbyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_DestroyLobbyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_DestroyLobbyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_DestroyLobbyOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_DestroyLobbyOptions) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_DestroyLobbyOptions = _tagEOS_Lobby_DestroyLobbyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_DestroyLobbyCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_DestroyLobbyCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_DestroyLobbyCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_DestroyLobbyCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_DestroyLobbyCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_DestroyLobbyCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_DestroyLobbyCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_DestroyLobbyCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_DestroyLobbyCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_DestroyLobbyCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_DestroyLobbyCallbackInfo = _tagEOS_Lobby_DestroyLobbyCallbackInfo ; pub type EOS_Lobby_OnDestroyLobbyCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_DestroyLobbyCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_JoinLobbyOptions { pub ApiVersion : i32 , pub LobbyDetailsHandle : EOS_HLobbyDetails , pub LocalUserId : EOS_ProductUserId , pub bPresenceEnabled : EOS_Bool , pub LocalRTCOptions : * const EOS_Lobby_LocalRTCOptions , pub bCrossplayOptOut : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Lobby_JoinLobbyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_JoinLobbyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_JoinLobbyOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_JoinLobbyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyDetailsHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions) , "::" , stringify ! (LobbyDetailsHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bPresenceEnabled) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions) , "::" , stringify ! (bPresenceEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalRTCOptions) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions) , "::" , stringify ! (LocalRTCOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bCrossplayOptOut) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyOptions) , "::" , stringify ! (bCrossplayOptOut))) ; } pub type EOS_Lobby_JoinLobbyOptions = _tagEOS_Lobby_JoinLobbyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_JoinLobbyCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_JoinLobbyCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_JoinLobbyCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_JoinLobbyCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_JoinLobbyCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_JoinLobbyCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_JoinLobbyCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_JoinLobbyCallbackInfo = _tagEOS_Lobby_JoinLobbyCallbackInfo ; pub type EOS_Lobby_OnJoinLobbyCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_JoinLobbyCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_JoinLobbyByIdOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , pub bPresenceEnabled : EOS_Bool , pub LocalRTCOptions : * const EOS_Lobby_LocalRTCOptions , pub bCrossplayOptOut : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Lobby_JoinLobbyByIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_JoinLobbyByIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_JoinLobbyByIdOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_JoinLobbyByIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bPresenceEnabled) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions) , "::" , stringify ! (bPresenceEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalRTCOptions) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions) , "::" , stringify ! (LocalRTCOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bCrossplayOptOut) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdOptions) , "::" , stringify ! (bCrossplayOptOut))) ; } pub type EOS_Lobby_JoinLobbyByIdOptions = _tagEOS_Lobby_JoinLobbyByIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_JoinLobbyByIdCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_JoinLobbyByIdCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_JoinLobbyByIdCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_JoinLobbyByIdCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_JoinLobbyByIdCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyByIdCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_JoinLobbyByIdCallbackInfo = _tagEOS_Lobby_JoinLobbyByIdCallbackInfo ; pub type EOS_Lobby_OnJoinLobbyByIdCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_JoinLobbyByIdCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LeaveLobbyOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LeaveLobbyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LeaveLobbyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LeaveLobbyOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LeaveLobbyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LeaveLobbyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LeaveLobbyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyOptions) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_LeaveLobbyOptions = _tagEOS_Lobby_LeaveLobbyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LeaveLobbyCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LeaveLobbyCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LeaveLobbyCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LeaveLobbyCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LeaveLobbyCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LeaveLobbyCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LeaveLobbyCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_LeaveLobbyCallbackInfo = _tagEOS_Lobby_LeaveLobbyCallbackInfo ; pub type EOS_Lobby_OnLeaveLobbyCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LeaveLobbyCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_UpdateLobbyModificationOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_UpdateLobbyModificationOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_UpdateLobbyModificationOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_UpdateLobbyModificationOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_UpdateLobbyModificationOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_UpdateLobbyModificationOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_UpdateLobbyModificationOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyModificationOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyModificationOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyModificationOptions) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_UpdateLobbyModificationOptions = _tagEOS_Lobby_UpdateLobbyModificationOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_UpdateLobbyOptions { pub ApiVersion : i32 , pub LobbyModificationHandle : EOS_HLobbyModification , } # [test] fn bindgen_test_layout__tagEOS_Lobby_UpdateLobbyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_UpdateLobbyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_UpdateLobbyOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_UpdateLobbyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_UpdateLobbyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_UpdateLobbyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyModificationHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyOptions) , "::" , stringify ! (LobbyModificationHandle))) ; } pub type EOS_Lobby_UpdateLobbyOptions = _tagEOS_Lobby_UpdateLobbyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_UpdateLobbyCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_UpdateLobbyCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_UpdateLobbyCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_UpdateLobbyCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_UpdateLobbyCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_UpdateLobbyCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_UpdateLobbyCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_UpdateLobbyCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_UpdateLobbyCallbackInfo = _tagEOS_Lobby_UpdateLobbyCallbackInfo ; pub type EOS_Lobby_OnUpdateLobbyCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_UpdateLobbyCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_PromoteMemberOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_PromoteMemberOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_PromoteMemberOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_PromoteMemberOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_PromoteMemberOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_PromoteMemberOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_PromoteMemberOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_PromoteMemberOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_PromoteMemberOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_PromoteMemberOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_PromoteMemberOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Lobby_PromoteMemberOptions = _tagEOS_Lobby_PromoteMemberOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_PromoteMemberCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_PromoteMemberCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_PromoteMemberCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_PromoteMemberCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_PromoteMemberCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_PromoteMemberCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_PromoteMemberCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_PromoteMemberCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_PromoteMemberCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_PromoteMemberCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_PromoteMemberCallbackInfo = _tagEOS_Lobby_PromoteMemberCallbackInfo ; pub type EOS_Lobby_OnPromoteMemberCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_PromoteMemberCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_KickMemberOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_KickMemberOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_KickMemberOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_KickMemberOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_KickMemberOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_KickMemberOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_KickMemberOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_KickMemberOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_KickMemberOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_KickMemberOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_KickMemberOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Lobby_KickMemberOptions = _tagEOS_Lobby_KickMemberOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_KickMemberCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_KickMemberCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_KickMemberCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_KickMemberCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_KickMemberCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_KickMemberCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_KickMemberCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_KickMemberCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_KickMemberCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_KickMemberCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_KickMemberCallbackInfo = _tagEOS_Lobby_KickMemberCallbackInfo ; pub type EOS_Lobby_OnKickMemberCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_KickMemberCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_HardMuteMemberOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , pub bHardMute : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Lobby_HardMuteMemberOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_HardMuteMemberOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_HardMuteMemberOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_HardMuteMemberOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_HardMuteMemberOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_HardMuteMemberOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bHardMute) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberOptions) , "::" , stringify ! (bHardMute))) ; } pub type EOS_Lobby_HardMuteMemberOptions = _tagEOS_Lobby_HardMuteMemberOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_HardMuteMemberCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_HardMuteMemberCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_HardMuteMemberCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_HardMuteMemberCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_HardMuteMemberCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_HardMuteMemberCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_HardMuteMemberCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberCallbackInfo) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_HardMuteMemberCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Lobby_HardMuteMemberCallbackInfo = _tagEOS_Lobby_HardMuteMemberCallbackInfo ; pub type EOS_Lobby_OnHardMuteMemberCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_HardMuteMemberCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyLobbyUpdateReceivedOptions = _tagEOS_Lobby_AddNotifyLobbyUpdateReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_LobbyUpdateReceivedCallbackInfo = _tagEOS_Lobby_LobbyUpdateReceivedCallbackInfo ; pub type EOS_Lobby_OnLobbyUpdateReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LobbyUpdateReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions = _tagEOS_Lobby_AddNotifyLobbyMemberUpdateReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo = _tagEOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo ; pub type EOS_Lobby_OnLobbyMemberUpdateReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LobbyMemberUpdateReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions = _tagEOS_Lobby_AddNotifyLobbyMemberStatusReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , pub TargetUserId : EOS_ProductUserId , pub CurrentStatus : EOS_ELobbyMemberStatus , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentStatus) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo) , "::" , stringify ! (CurrentStatus))) ; } pub type EOS_Lobby_LobbyMemberStatusReceivedCallbackInfo = _tagEOS_Lobby_LobbyMemberStatusReceivedCallbackInfo ; pub type EOS_Lobby_OnLobbyMemberStatusReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LobbyMemberStatusReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyLobbyInviteReceivedOptions = _tagEOS_Lobby_AddNotifyLobbyInviteReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LobbyInviteReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub InviteId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LobbyInviteReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LobbyInviteReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LobbyInviteReceivedCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LobbyInviteReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LobbyInviteReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LobbyInviteReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteReceivedCallbackInfo) , "::" , stringify ! (InviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteReceivedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteReceivedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Lobby_LobbyInviteReceivedCallbackInfo = _tagEOS_Lobby_LobbyInviteReceivedCallbackInfo ; pub type EOS_Lobby_OnLobbyInviteReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LobbyInviteReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyLobbyInviteAcceptedOptions = _tagEOS_Lobby_AddNotifyLobbyInviteAcceptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub InviteId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo) , "::" , stringify ! (InviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_LobbyInviteAcceptedCallbackInfo = _tagEOS_Lobby_LobbyInviteAcceptedCallbackInfo ; pub type EOS_Lobby_OnLobbyInviteAcceptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LobbyInviteAcceptedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyJoinLobbyAcceptedOptions = _tagEOS_Lobby_AddNotifyJoinLobbyAcceptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyLobbyInviteRejectedOptions = _tagEOS_Lobby_AddNotifyLobbyInviteRejectedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LobbyInviteRejectedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub InviteId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LobbyInviteRejectedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LobbyInviteRejectedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LobbyInviteRejectedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LobbyInviteRejectedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LobbyInviteRejectedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LobbyInviteRejectedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteRejectedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteRejectedCallbackInfo) , "::" , stringify ! (InviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteRejectedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteRejectedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LobbyInviteRejectedCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_LobbyInviteRejectedCallbackInfo = _tagEOS_Lobby_LobbyInviteRejectedCallbackInfo ; pub type EOS_Lobby_OnLobbyInviteRejectedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LobbyInviteRejectedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub UiEventId : EOS_UI_EventId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo) , "::" , stringify ! (UiEventId))) ; } pub type EOS_Lobby_JoinLobbyAcceptedCallbackInfo = _tagEOS_Lobby_JoinLobbyAcceptedCallbackInfo ; pub type EOS_Lobby_OnJoinLobbyAcceptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_JoinLobbyAcceptedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions = _tagEOS_Lobby_AddNotifySendLobbyNativeInviteRequestedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub UiEventId : EOS_UI_EventId , pub LocalUserId : EOS_ProductUserId , pub TargetNativeAccountType : EOS_IntegratedPlatformType , pub TargetUserNativeAccountId : * const :: std :: os :: raw :: c_char , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo) , "::" , stringify ! (UiEventId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetNativeAccountType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo) , "::" , stringify ! (TargetNativeAccountType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserNativeAccountId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo) , "::" , stringify ! (TargetUserNativeAccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo = _tagEOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo ; pub type EOS_Lobby_OnSendLobbyNativeInviteRequestedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_SendLobbyNativeInviteRequestedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions { pub ApiVersion : i32 , pub InviteId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions) , "::" , stringify ! (InviteId))) ; } pub type EOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions = _tagEOS_Lobby_CopyLobbyDetailsHandleByInviteIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions { pub ApiVersion : i32 , pub UiEventId : EOS_UI_EventId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions) , "::" , stringify ! (UiEventId))) ; } pub type EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions = _tagEOS_Lobby_CopyLobbyDetailsHandleByUiEventIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_CreateLobbySearchOptions { pub ApiVersion : i32 , pub MaxResults : u32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_CreateLobbySearchOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_CreateLobbySearchOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_CreateLobbySearchOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_CreateLobbySearchOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_CreateLobbySearchOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_CreateLobbySearchOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbySearchOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxResults) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CreateLobbySearchOptions) , "::" , stringify ! (MaxResults))) ; } pub type EOS_Lobby_CreateLobbySearchOptions = _tagEOS_Lobby_CreateLobbySearchOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_SendInviteOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_SendInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_SendInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_SendInviteOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_SendInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_SendInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_SendInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendInviteOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendInviteOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Lobby_SendInviteOptions = _tagEOS_Lobby_SendInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_SendInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_SendInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_SendInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_SendInviteCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_SendInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_SendInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_SendInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_SendInviteCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_SendInviteCallbackInfo = _tagEOS_Lobby_SendInviteCallbackInfo ; pub type EOS_Lobby_OnSendInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_SendInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_RejectInviteOptions { pub ApiVersion : i32 , pub InviteId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_RejectInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_RejectInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_RejectInviteOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_RejectInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_RejectInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_RejectInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RejectInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RejectInviteOptions) , "::" , stringify ! (InviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RejectInviteOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Lobby_RejectInviteOptions = _tagEOS_Lobby_RejectInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_RejectInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub InviteId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Lobby_RejectInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_RejectInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_RejectInviteCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_RejectInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_RejectInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_RejectInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RejectInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RejectInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RejectInviteCallbackInfo) , "::" , stringify ! (InviteId))) ; } pub type EOS_Lobby_RejectInviteCallbackInfo = _tagEOS_Lobby_RejectInviteCallbackInfo ; pub type EOS_Lobby_OnRejectInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_RejectInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_QueryInvitesOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_QueryInvitesOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_QueryInvitesOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_QueryInvitesOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_QueryInvitesOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_QueryInvitesOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_QueryInvitesOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_QueryInvitesOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_QueryInvitesOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Lobby_QueryInvitesOptions = _tagEOS_Lobby_QueryInvitesOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_QueryInvitesCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_QueryInvitesCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_QueryInvitesCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_QueryInvitesCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_QueryInvitesCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_QueryInvitesCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_QueryInvitesCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_QueryInvitesCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_QueryInvitesCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_QueryInvitesCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Lobby_QueryInvitesCallbackInfo = _tagEOS_Lobby_QueryInvitesCallbackInfo ; pub type EOS_Lobby_OnQueryInvitesCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_QueryInvitesCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_GetInviteCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_GetInviteCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_GetInviteCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_GetInviteCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_GetInviteCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_GetInviteCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_GetInviteCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetInviteCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetInviteCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Lobby_GetInviteCountOptions = _tagEOS_Lobby_GetInviteCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_GetInviteIdByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Index : u32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_GetInviteIdByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_GetInviteIdByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_GetInviteIdByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_GetInviteIdByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_GetInviteIdByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_GetInviteIdByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetInviteIdByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetInviteIdByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetInviteIdByIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_Lobby_GetInviteIdByIndexOptions = _tagEOS_Lobby_GetInviteIdByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_CopyLobbyDetailsHandleOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_CopyLobbyDetailsHandleOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_CopyLobbyDetailsHandleOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_CopyLobbyDetailsHandleOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_CopyLobbyDetailsHandleOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_CopyLobbyDetailsHandleOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Lobby_CopyLobbyDetailsHandleOptions = _tagEOS_Lobby_CopyLobbyDetailsHandleOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_GetRTCRoomNameOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_GetRTCRoomNameOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_GetRTCRoomNameOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_GetRTCRoomNameOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_GetRTCRoomNameOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_GetRTCRoomNameOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_GetRTCRoomNameOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetRTCRoomNameOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetRTCRoomNameOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetRTCRoomNameOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Lobby_GetRTCRoomNameOptions = _tagEOS_Lobby_GetRTCRoomNameOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_IsRTCRoomConnectedOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_IsRTCRoomConnectedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_IsRTCRoomConnectedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_IsRTCRoomConnectedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_IsRTCRoomConnectedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_IsRTCRoomConnectedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_IsRTCRoomConnectedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_IsRTCRoomConnectedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_IsRTCRoomConnectedOptions) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_IsRTCRoomConnectedOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Lobby_IsRTCRoomConnectedOptions = _tagEOS_Lobby_IsRTCRoomConnectedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions { pub ApiVersion : i32 , pub LobbyId_DEPRECATED : EOS_LobbyId , pub LocalUserId_DEPRECATED : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId_DEPRECATED) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions) , "::" , stringify ! (LobbyId_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId_DEPRECATED) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions) , "::" , stringify ! (LocalUserId_DEPRECATED))) ; } pub type EOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions = _tagEOS_Lobby_AddNotifyRTCRoomConnectionChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LobbyId : EOS_LobbyId , pub LocalUserId : EOS_ProductUserId , pub bIsConnected : EOS_Bool , pub DisconnectReason : EOS_EResult , } # [test] fn bindgen_test_layout__tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo) , "::" , stringify ! (LobbyId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsConnected) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo) , "::" , stringify ! (bIsConnected))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisconnectReason) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo) , "::" , stringify ! (DisconnectReason))) ; } pub type EOS_Lobby_RTCRoomConnectionChangedCallbackInfo = _tagEOS_Lobby_RTCRoomConnectionChangedCallbackInfo ; pub type EOS_Lobby_OnRTCRoomConnectionChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_RTCRoomConnectionChangedCallbackInfo) > ; # [repr (C)] # [derive (Copy , Clone)] pub struct _tagEOS_Lobby_AttributeData { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , pub Value : _tagEOS_Lobby_AttributeData__bindgen_ty_1 , pub ValueType : EOS_ELobbyAttributeType , } # [doc = " Contains information about lobby and lobby member data"] # [repr (C)] # [derive (Copy , Clone)] pub union _tagEOS_Lobby_AttributeData__bindgen_ty_1 { pub AsInt64 : i64 , pub AsDouble : f64 , pub AsBool : EOS_Bool , pub AsUtf8 : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AttributeData__bindgen_ty_1 () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AttributeData__bindgen_ty_1 > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AttributeData__bindgen_ty_1 > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AttributeData__bindgen_ty_1))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AttributeData__bindgen_ty_1 > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AttributeData__bindgen_ty_1))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsInt64) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsInt64))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsDouble) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsDouble))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsBool) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsBool))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AsUtf8) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData__bindgen_ty_1) , "::" , stringify ! (AsUtf8))) ; } # [test] fn bindgen_test_layout__tagEOS_Lobby_AttributeData () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AttributeData > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AttributeData > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AttributeData))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AttributeData > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AttributeData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Value) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData) , "::" , stringify ! (Value))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ValueType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AttributeData) , "::" , stringify ! (ValueType))) ; } pub type EOS_Lobby_AttributeData = _tagEOS_Lobby_AttributeData ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_Attribute { pub ApiVersion : i32 , pub Data : * mut EOS_Lobby_AttributeData , pub Visibility : EOS_ELobbyAttributeVisibility , } # [test] fn bindgen_test_layout__tagEOS_Lobby_Attribute () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_Attribute > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_Attribute > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_Attribute))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_Attribute > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_Attribute))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_Attribute) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_Attribute) , "::" , stringify ! (Data))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Visibility) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_Attribute) , "::" , stringify ! (Visibility))) ; } pub type EOS_Lobby_Attribute = _tagEOS_Lobby_Attribute ; extern "C" { pub fn EOS_Lobby_Attribute_Release (LobbyAttribute : * mut EOS_Lobby_Attribute) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_GetConnectStringOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_GetConnectStringOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_GetConnectStringOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_GetConnectStringOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_GetConnectStringOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_GetConnectStringOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_GetConnectStringOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetConnectStringOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetConnectStringOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_GetConnectStringOptions) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_GetConnectStringOptions = _tagEOS_Lobby_GetConnectStringOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_ParseConnectStringOptions { pub ApiVersion : i32 , pub ConnectString : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Lobby_ParseConnectStringOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_ParseConnectStringOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_ParseConnectStringOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_ParseConnectStringOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_ParseConnectStringOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_ParseConnectStringOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_ParseConnectStringOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ConnectString) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_ParseConnectStringOptions) , "::" , stringify ! (ConnectString))) ; } pub type EOS_Lobby_ParseConnectStringOptions = _tagEOS_Lobby_ParseConnectStringOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_SetBucketIdOptions { pub ApiVersion : i32 , pub BucketId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_SetBucketIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_SetBucketIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_SetBucketIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_SetBucketIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_SetBucketIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_SetBucketIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetBucketIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BucketId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetBucketIdOptions) , "::" , stringify ! (BucketId))) ; } pub type EOS_LobbyModification_SetBucketIdOptions = _tagEOS_LobbyModification_SetBucketIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_SetPermissionLevelOptions { pub ApiVersion : i32 , pub PermissionLevel : EOS_ELobbyPermissionLevel , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_SetPermissionLevelOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_SetPermissionLevelOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_SetPermissionLevelOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_SetPermissionLevelOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_SetPermissionLevelOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_SetPermissionLevelOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetPermissionLevelOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PermissionLevel) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetPermissionLevelOptions) , "::" , stringify ! (PermissionLevel))) ; } pub type EOS_LobbyModification_SetPermissionLevelOptions = _tagEOS_LobbyModification_SetPermissionLevelOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_SetMaxMembersOptions { pub ApiVersion : i32 , pub MaxMembers : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_SetMaxMembersOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_SetMaxMembersOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_SetMaxMembersOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_SetMaxMembersOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_SetMaxMembersOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_SetMaxMembersOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetMaxMembersOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxMembers) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetMaxMembersOptions) , "::" , stringify ! (MaxMembers))) ; } pub type EOS_LobbyModification_SetMaxMembersOptions = _tagEOS_LobbyModification_SetMaxMembersOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_SetInvitesAllowedOptions { pub ApiVersion : i32 , pub bInvitesAllowed : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_SetInvitesAllowedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_SetInvitesAllowedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_SetInvitesAllowedOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_SetInvitesAllowedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_SetInvitesAllowedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_SetInvitesAllowedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetInvitesAllowedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bInvitesAllowed) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetInvitesAllowedOptions) , "::" , stringify ! (bInvitesAllowed))) ; } pub type EOS_LobbyModification_SetInvitesAllowedOptions = _tagEOS_LobbyModification_SetInvitesAllowedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_AddAttributeOptions { pub ApiVersion : i32 , pub Attribute : * const EOS_Lobby_AttributeData , pub Visibility : EOS_ELobbyAttributeVisibility , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_AddAttributeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_AddAttributeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_AddAttributeOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_AddAttributeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_AddAttributeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_AddAttributeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_AddAttributeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Attribute) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_AddAttributeOptions) , "::" , stringify ! (Attribute))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Visibility) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_AddAttributeOptions) , "::" , stringify ! (Visibility))) ; } pub type EOS_LobbyModification_AddAttributeOptions = _tagEOS_LobbyModification_AddAttributeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_RemoveAttributeOptions { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_RemoveAttributeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_RemoveAttributeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_RemoveAttributeOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_RemoveAttributeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_RemoveAttributeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_RemoveAttributeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_RemoveAttributeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_RemoveAttributeOptions) , "::" , stringify ! (Key))) ; } pub type EOS_LobbyModification_RemoveAttributeOptions = _tagEOS_LobbyModification_RemoveAttributeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_AddMemberAttributeOptions { pub ApiVersion : i32 , pub Attribute : * const EOS_Lobby_AttributeData , pub Visibility : EOS_ELobbyAttributeVisibility , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_AddMemberAttributeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_AddMemberAttributeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_AddMemberAttributeOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_AddMemberAttributeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_AddMemberAttributeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_AddMemberAttributeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_AddMemberAttributeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Attribute) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_AddMemberAttributeOptions) , "::" , stringify ! (Attribute))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Visibility) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_AddMemberAttributeOptions) , "::" , stringify ! (Visibility))) ; } pub type EOS_LobbyModification_AddMemberAttributeOptions = _tagEOS_LobbyModification_AddMemberAttributeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_RemoveMemberAttributeOptions { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_RemoveMemberAttributeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_RemoveMemberAttributeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_RemoveMemberAttributeOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_RemoveMemberAttributeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_RemoveMemberAttributeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_RemoveMemberAttributeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_RemoveMemberAttributeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_RemoveMemberAttributeOptions) , "::" , stringify ! (Key))) ; } pub type EOS_LobbyModification_RemoveMemberAttributeOptions = _tagEOS_LobbyModification_RemoveMemberAttributeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyModification_SetAllowedPlatformIdsOptions { pub ApiVersion : i32 , pub AllowedPlatformIds : * const u32 , pub AllowedPlatformIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyModification_SetAllowedPlatformIdsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyModification_SetAllowedPlatformIdsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyModification_SetAllowedPlatformIdsOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyModification_SetAllowedPlatformIdsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyModification_SetAllowedPlatformIdsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyModification_SetAllowedPlatformIdsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetAllowedPlatformIdsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIds) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetAllowedPlatformIdsOptions) , "::" , stringify ! (AllowedPlatformIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AllowedPlatformIdsCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyModification_SetAllowedPlatformIdsOptions) , "::" , stringify ! (AllowedPlatformIdsCount))) ; } pub type EOS_LobbyModification_SetAllowedPlatformIdsOptions = _tagEOS_LobbyModification_SetAllowedPlatformIdsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_GetLobbyOwnerOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_GetLobbyOwnerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_GetLobbyOwnerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_GetLobbyOwnerOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_GetLobbyOwnerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_GetLobbyOwnerOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_GetLobbyOwnerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_GetLobbyOwnerOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_LobbyDetails_GetLobbyOwnerOptions = _tagEOS_LobbyDetails_GetLobbyOwnerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_CopyInfoOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_CopyInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_CopyInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_CopyInfoOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_CopyInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_CopyInfoOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_CopyInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyInfoOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_LobbyDetails_CopyInfoOptions = _tagEOS_LobbyDetails_CopyInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_GetAttributeCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_GetAttributeCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_GetAttributeCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_GetAttributeCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_GetAttributeCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_GetAttributeCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_GetAttributeCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_GetAttributeCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_LobbyDetails_GetAttributeCountOptions = _tagEOS_LobbyDetails_GetAttributeCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_CopyAttributeByIndexOptions { pub ApiVersion : i32 , pub AttrIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_CopyAttributeByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_CopyAttributeByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_CopyAttributeByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_CopyAttributeByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttrIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByIndexOptions) , "::" , stringify ! (AttrIndex))) ; } pub type EOS_LobbyDetails_CopyAttributeByIndexOptions = _tagEOS_LobbyDetails_CopyAttributeByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_CopyAttributeByKeyOptions { pub ApiVersion : i32 , pub AttrKey : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_CopyAttributeByKeyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_CopyAttributeByKeyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_CopyAttributeByKeyOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByKeyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_CopyAttributeByKeyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByKeyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByKeyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttrKey) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyAttributeByKeyOptions) , "::" , stringify ! (AttrKey))) ; } pub type EOS_LobbyDetails_CopyAttributeByKeyOptions = _tagEOS_LobbyDetails_CopyAttributeByKeyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_GetMemberAttributeCountOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_GetMemberAttributeCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_GetMemberAttributeCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_GetMemberAttributeCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_GetMemberAttributeCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_GetMemberAttributeCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_GetMemberAttributeCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_GetMemberAttributeCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_GetMemberAttributeCountOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_LobbyDetails_GetMemberAttributeCountOptions = _tagEOS_LobbyDetails_GetMemberAttributeCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub AttrIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttrIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions) , "::" , stringify ! (AttrIndex))) ; } pub type EOS_LobbyDetails_CopyMemberAttributeByIndexOptions = _tagEOS_LobbyDetails_CopyMemberAttributeByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub AttrKey : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttrKey) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions) , "::" , stringify ! (AttrKey))) ; } pub type EOS_LobbyDetails_CopyMemberAttributeByKeyOptions = _tagEOS_LobbyDetails_CopyMemberAttributeByKeyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_GetMemberCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_GetMemberCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_GetMemberCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_GetMemberCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_GetMemberCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_GetMemberCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_GetMemberCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_GetMemberCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_LobbyDetails_GetMemberCountOptions = _tagEOS_LobbyDetails_GetMemberCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_GetMemberByIndexOptions { pub ApiVersion : i32 , pub MemberIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_GetMemberByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_GetMemberByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_GetMemberByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_GetMemberByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_GetMemberByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_GetMemberByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_GetMemberByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MemberIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_GetMemberByIndexOptions) , "::" , stringify ! (MemberIndex))) ; } pub type EOS_LobbyDetails_GetMemberByIndexOptions = _tagEOS_LobbyDetails_GetMemberByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_FindOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_FindOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_FindOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_FindOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_FindOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_FindOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_FindOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_FindOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_FindOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_LobbySearch_FindOptions = _tagEOS_LobbySearch_FindOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_FindCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_FindCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_FindCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_FindCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_FindCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_FindCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_FindCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_FindCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_FindCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_LobbySearch_FindCallbackInfo = _tagEOS_LobbySearch_FindCallbackInfo ; pub type EOS_LobbySearch_OnFindCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_LobbySearch_FindCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_SetLobbyIdOptions { pub ApiVersion : i32 , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_SetLobbyIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_SetLobbyIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_SetLobbyIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_SetLobbyIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_SetLobbyIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_SetLobbyIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetLobbyIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetLobbyIdOptions) , "::" , stringify ! (LobbyId))) ; } pub type EOS_LobbySearch_SetLobbyIdOptions = _tagEOS_LobbySearch_SetLobbyIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_SetTargetUserIdOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_SetTargetUserIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_SetTargetUserIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_SetTargetUserIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_SetTargetUserIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_SetTargetUserIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_SetTargetUserIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetTargetUserIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetTargetUserIdOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_LobbySearch_SetTargetUserIdOptions = _tagEOS_LobbySearch_SetTargetUserIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_SetParameterOptions { pub ApiVersion : i32 , pub Parameter : * const EOS_Lobby_AttributeData , pub ComparisonOp : EOS_EComparisonOp , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_SetParameterOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_SetParameterOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_SetParameterOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_SetParameterOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_SetParameterOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_SetParameterOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetParameterOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Parameter) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetParameterOptions) , "::" , stringify ! (Parameter))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ComparisonOp) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetParameterOptions) , "::" , stringify ! (ComparisonOp))) ; } pub type EOS_LobbySearch_SetParameterOptions = _tagEOS_LobbySearch_SetParameterOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_RemoveParameterOptions { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , pub ComparisonOp : EOS_EComparisonOp , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_RemoveParameterOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_RemoveParameterOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_RemoveParameterOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_RemoveParameterOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_RemoveParameterOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_RemoveParameterOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_RemoveParameterOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_RemoveParameterOptions) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ComparisonOp) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_RemoveParameterOptions) , "::" , stringify ! (ComparisonOp))) ; } pub type EOS_LobbySearch_RemoveParameterOptions = _tagEOS_LobbySearch_RemoveParameterOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_SetMaxResultsOptions { pub ApiVersion : i32 , pub MaxResults : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_SetMaxResultsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_SetMaxResultsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_SetMaxResultsOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_SetMaxResultsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_SetMaxResultsOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_SetMaxResultsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetMaxResultsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MaxResults) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_SetMaxResultsOptions) , "::" , stringify ! (MaxResults))) ; } pub type EOS_LobbySearch_SetMaxResultsOptions = _tagEOS_LobbySearch_SetMaxResultsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_GetSearchResultCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_GetSearchResultCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_GetSearchResultCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_GetSearchResultCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_GetSearchResultCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_GetSearchResultCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_GetSearchResultCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_GetSearchResultCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_LobbySearch_GetSearchResultCountOptions = _tagEOS_LobbySearch_GetSearchResultCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbySearch_CopySearchResultByIndexOptions { pub ApiVersion : i32 , pub LobbyIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_LobbySearch_CopySearchResultByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbySearch_CopySearchResultByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbySearch_CopySearchResultByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbySearch_CopySearchResultByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbySearch_CopySearchResultByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbySearch_CopySearchResultByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_CopySearchResultByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbySearch_CopySearchResultByIndexOptions) , "::" , stringify ! (LobbyIndex))) ; } pub type EOS_LobbySearch_CopySearchResultByIndexOptions = _tagEOS_LobbySearch_CopySearchResultByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_CopyMemberInfoOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_CopyMemberInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_CopyMemberInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_CopyMemberInfoOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_CopyMemberInfoOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_CopyMemberInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberInfoOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_CopyMemberInfoOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_LobbyDetails_CopyMemberInfoOptions = _tagEOS_LobbyDetails_CopyMemberInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_LobbyDetails_MemberInfo { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , pub Platform : EOS_OnlinePlatformType , pub bAllowsCrossplay : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_LobbyDetails_MemberInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_LobbyDetails_MemberInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_LobbyDetails_MemberInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_LobbyDetails_MemberInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_LobbyDetails_MemberInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_LobbyDetails_MemberInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_MemberInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_MemberInfo) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Platform) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_MemberInfo) , "::" , stringify ! (Platform))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bAllowsCrossplay) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_LobbyDetails_MemberInfo) , "::" , stringify ! (bAllowsCrossplay))) ; } pub type EOS_LobbyDetails_MemberInfo = _tagEOS_LobbyDetails_MemberInfo ; extern "C" { pub fn EOS_LobbyDetails_MemberInfo_Release (LobbyDetailsMemberInfo : * mut EOS_LobbyDetails_MemberInfo) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Lobby_AddNotifyLeaveLobbyRequestedOptions = _tagEOS_Lobby_AddNotifyLeaveLobbyRequestedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub LobbyId : EOS_LobbyId , } # [test] fn bindgen_test_layout__tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LobbyId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo) , "::" , stringify ! (LobbyId))) ; } pub type EOS_Lobby_LeaveLobbyRequestedCallbackInfo = _tagEOS_Lobby_LeaveLobbyRequestedCallbackInfo ; pub type EOS_Lobby_OnLeaveLobbyRequestedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Lobby_LeaveLobbyRequestedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_UserInfoHandle { _unused : [u8 ; 0] , } pub type EOS_HUserInfo = * mut EOS_UserInfoHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_QueryUserInfoOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_QueryUserInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_QueryUserInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_QueryUserInfoOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_QueryUserInfoOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_QueryUserInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UserInfo_QueryUserInfoOptions = _tagEOS_UserInfo_QueryUserInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_QueryUserInfoCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_QueryUserInfoCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_QueryUserInfoCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_QueryUserInfoCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_QueryUserInfoCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_QueryUserInfoCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UserInfo_QueryUserInfoCallbackInfo = _tagEOS_UserInfo_QueryUserInfoCallbackInfo ; pub type EOS_UserInfo_OnQueryUserInfoCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UserInfo_QueryUserInfoCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub DisplayName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions) , "::" , stringify ! (DisplayName))) ; } pub type EOS_UserInfo_QueryUserInfoByDisplayNameOptions = _tagEOS_UserInfo_QueryUserInfoByDisplayNameOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub DisplayName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo) , "::" , stringify ! (DisplayName))) ; } pub type EOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo = _tagEOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo ; pub type EOS_UserInfo_OnQueryUserInfoByDisplayNameCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UserInfo_QueryUserInfoByDisplayNameCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub ExternalAccountId : * const :: std :: os :: raw :: c_char , pub AccountType : EOS_EExternalAccountType , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions) , "::" , stringify ! (ExternalAccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions) , "::" , stringify ! (AccountType))) ; } pub type EOS_UserInfo_QueryUserInfoByExternalAccountOptions = _tagEOS_UserInfo_QueryUserInfoByExternalAccountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_EpicAccountId , pub ExternalAccountId : * const :: std :: os :: raw :: c_char , pub AccountType : EOS_EExternalAccountType , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo) , "::" , stringify ! (ExternalAccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountType) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo) , "::" , stringify ! (AccountType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo = _tagEOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo ; pub type EOS_UserInfo_OnQueryUserInfoByExternalAccountCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_UserInfo_QueryUserInfoByExternalAccountCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo { pub ApiVersion : i32 , pub UserId : EOS_EpicAccountId , pub Country : * const :: std :: os :: raw :: c_char , pub DisplayName : * const :: std :: os :: raw :: c_char , pub PreferredLanguage : * const :: std :: os :: raw :: c_char , pub Nickname : * const :: std :: os :: raw :: c_char , pub DisplayNameSanitized : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_UserInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Country) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo) , "::" , stringify ! (Country))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PreferredLanguage) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo) , "::" , stringify ! (PreferredLanguage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Nickname) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo) , "::" , stringify ! (Nickname))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayNameSanitized) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo) , "::" , stringify ! (DisplayNameSanitized))) ; } pub type EOS_UserInfo = _tagEOS_UserInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_CopyUserInfoOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_CopyUserInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_CopyUserInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_CopyUserInfoOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_CopyUserInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_CopyUserInfoOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_CopyUserInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyUserInfoOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyUserInfoOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyUserInfoOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UserInfo_CopyUserInfoOptions = _tagEOS_UserInfo_CopyUserInfoOptions ; extern "C" { # [doc = " @param UserInfo - The user info structure to release\n\n @see EOS_UserInfo\n @see EOS_UserInfo_CopyUserInfo"] pub fn EOS_UserInfo_Release (UserInfo : * mut EOS_UserInfo) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_ExternalUserInfo { pub ApiVersion : i32 , pub AccountType : EOS_EExternalAccountType , pub AccountId : * const :: std :: os :: raw :: c_char , pub DisplayName : * const :: std :: os :: raw :: c_char , pub DisplayNameSanitized : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_ExternalUserInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_ExternalUserInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_ExternalUserInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_ExternalUserInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_ExternalUserInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_ExternalUserInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_ExternalUserInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountType) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_ExternalUserInfo) , "::" , stringify ! (AccountType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_ExternalUserInfo) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_ExternalUserInfo) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayNameSanitized) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_ExternalUserInfo) , "::" , stringify ! (DisplayNameSanitized))) ; } pub type EOS_UserInfo_ExternalUserInfo = _tagEOS_UserInfo_ExternalUserInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_GetExternalUserInfoCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_GetExternalUserInfoCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_GetExternalUserInfoCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_GetExternalUserInfoCountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_GetExternalUserInfoCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_GetExternalUserInfoCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_GetExternalUserInfoCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_GetExternalUserInfoCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_GetExternalUserInfoCountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_GetExternalUserInfoCountOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UserInfo_GetExternalUserInfoCountOptions = _tagEOS_UserInfo_GetExternalUserInfoCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub Index : u32 , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_UserInfo_CopyExternalUserInfoByIndexOptions = _tagEOS_UserInfo_CopyExternalUserInfoByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub AccountType : EOS_EExternalAccountType , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions) , "::" , stringify ! (AccountType))) ; } pub type EOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions = _tagEOS_UserInfo_CopyExternalUserInfoByAccountTypeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub AccountId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions) , "::" , stringify ! (AccountId))) ; } pub type EOS_UserInfo_CopyExternalUserInfoByAccountIdOptions = _tagEOS_UserInfo_CopyExternalUserInfoByAccountIdOptions ; extern "C" { # [doc = " Release the memory associated with external user info. This must be called on data retrieved from\n EOS_UserInfo_CopyExternalUserInfoByIndexOptions.\n\n @param ExternalUserInfo The external user info to release.\n\n @see EOS_UserInfo_ExternalUserInfo\n @see EOS_UserInfo_CopyExternalUserInfoByIndex"] pub fn EOS_UserInfo_ExternalUserInfo_Release (ExternalUserInfo : * mut EOS_UserInfo_ExternalUserInfo) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_BestDisplayName { pub ApiVersion : i32 , pub UserId : EOS_EpicAccountId , pub DisplayName : * const :: std :: os :: raw :: c_char , pub DisplayNameSanitized : * const :: std :: os :: raw :: c_char , pub Nickname : * const :: std :: os :: raw :: c_char , pub PlatformType : EOS_OnlinePlatformType , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_BestDisplayName () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_BestDisplayName > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_BestDisplayName > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_BestDisplayName))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_BestDisplayName > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_BestDisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_BestDisplayName) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_BestDisplayName) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_BestDisplayName) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayNameSanitized) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_BestDisplayName) , "::" , stringify ! (DisplayNameSanitized))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Nickname) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_BestDisplayName) , "::" , stringify ! (Nickname))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlatformType) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_BestDisplayName) , "::" , stringify ! (PlatformType))) ; } pub type EOS_UserInfo_BestDisplayName = _tagEOS_UserInfo_BestDisplayName ; extern "C" { # [doc = " Release the memory associated with EOS_UserInfo_BestDisplayName. This must be called on data retrieved from\n EOS_UserInfo_CopyBestDisplayNameWithPlatform.\n\n @param BestDisplayName - The EOS_UserInfo_BestDisplayName structure to release\n\n @see EOS_UserInfo_BestDisplayName\n @see EOS_UserInfo_CopyBestDisplayName\n @see EOS_UserInfo_CopyBestDisplayNameWithPlatform"] pub fn EOS_UserInfo_BestDisplayName_Release (BestDisplayName : * mut EOS_UserInfo_BestDisplayName) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_CopyBestDisplayNameOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_CopyBestDisplayNameOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_CopyBestDisplayNameOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_CopyBestDisplayNameOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_CopyBestDisplayNameOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_UserInfo_CopyBestDisplayNameOptions = _tagEOS_UserInfo_CopyBestDisplayNameOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub TargetUserId : EOS_EpicAccountId , pub TargetPlatformType : EOS_OnlinePlatformType , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetPlatformType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions) , "::" , stringify ! (TargetPlatformType))) ; } pub type EOS_UserInfo_CopyBestDisplayNameWithPlatformOptions = _tagEOS_UserInfo_CopyBestDisplayNameWithPlatformOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_UserInfo_GetLocalPlatformTypeOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_UserInfo_GetLocalPlatformTypeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_UserInfo_GetLocalPlatformTypeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_UserInfo_GetLocalPlatformTypeOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_UserInfo_GetLocalPlatformTypeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_UserInfo_GetLocalPlatformTypeOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_UserInfo_GetLocalPlatformTypeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_UserInfo_GetLocalPlatformTypeOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_UserInfo_GetLocalPlatformTypeOptions = _tagEOS_UserInfo_GetLocalPlatformTypeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_PlayerDataStorageHandle { _unused : [u8 ; 0] , } pub type EOS_HPlayerDataStorage = * mut EOS_PlayerDataStorageHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_FileMetadata { pub ApiVersion : i32 , pub FileSizeBytes : u32 , pub MD5Hash : * const :: std :: os :: raw :: c_char , pub Filename : * const :: std :: os :: raw :: c_char , pub LastModifiedTime : i64 , pub UnencryptedDataSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_FileMetadata () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_FileMetadata > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_FileMetadata > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_FileMetadata > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FileSizeBytes) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata) , "::" , stringify ! (FileSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MD5Hash) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata) , "::" , stringify ! (MD5Hash))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LastModifiedTime) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata) , "::" , stringify ! (LastModifiedTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnencryptedDataSizeBytes) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileMetadata) , "::" , stringify ! (UnencryptedDataSizeBytes))) ; } pub type EOS_PlayerDataStorage_FileMetadata = _tagEOS_PlayerDataStorage_FileMetadata ; extern "C" { # [doc = " Free the memory used by the file metadata"] pub fn EOS_PlayerDataStorage_FileMetadata_Release (FileMetadata : * mut EOS_PlayerDataStorage_FileMetadata) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_QueryFileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_QueryFileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_QueryFileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_QueryFileOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_QueryFileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileOptions) , "::" , stringify ! (Filename))) ; } pub type EOS_PlayerDataStorage_QueryFileOptions = _tagEOS_PlayerDataStorage_QueryFileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_QueryFileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_QueryFileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_QueryFileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_QueryFileCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_QueryFileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_PlayerDataStorage_QueryFileCallbackInfo = _tagEOS_PlayerDataStorage_QueryFileCallbackInfo ; pub type EOS_PlayerDataStorage_OnQueryFileCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_QueryFileCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_QueryFileListOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_QueryFileListOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_QueryFileListOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_QueryFileListOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_QueryFileListOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_PlayerDataStorage_QueryFileListOptions = _tagEOS_PlayerDataStorage_QueryFileListOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_QueryFileListCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub FileCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_QueryFileListCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_QueryFileListCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_QueryFileListCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_QueryFileListCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FileCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_QueryFileListCallbackInfo) , "::" , stringify ! (FileCount))) ; } pub type EOS_PlayerDataStorage_QueryFileListCallbackInfo = _tagEOS_PlayerDataStorage_QueryFileListCallbackInfo ; pub type EOS_PlayerDataStorage_OnQueryFileListCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_QueryFileListCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_GetFileMetadataCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_GetFileMetadataCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_GetFileMetadataCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_GetFileMetadataCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_GetFileMetadataCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_GetFileMetadataCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_GetFileMetadataCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_GetFileMetadataCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_GetFileMetadataCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_PlayerDataStorage_GetFileMetadataCountOptions = _tagEOS_PlayerDataStorage_GetFileMetadataCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Index : u32 , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions = _tagEOS_PlayerDataStorage_CopyFileMetadataAtIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions) , "::" , stringify ! (Filename))) ; } pub type EOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions = _tagEOS_PlayerDataStorage_CopyFileMetadataByFilenameOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_DuplicateFileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub SourceFilename : * const :: std :: os :: raw :: c_char , pub DestinationFilename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_DuplicateFileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_DuplicateFileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_DuplicateFileOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_DuplicateFileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SourceFilename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileOptions) , "::" , stringify ! (SourceFilename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DestinationFilename) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileOptions) , "::" , stringify ! (DestinationFilename))) ; } pub type EOS_PlayerDataStorage_DuplicateFileOptions = _tagEOS_PlayerDataStorage_DuplicateFileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_PlayerDataStorage_DuplicateFileCallbackInfo = _tagEOS_PlayerDataStorage_DuplicateFileCallbackInfo ; pub type EOS_PlayerDataStorage_OnDuplicateFileCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_DuplicateFileCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_DeleteFileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_DeleteFileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_DeleteFileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_DeleteFileOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_DeleteFileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileOptions) , "::" , stringify ! (Filename))) ; } pub type EOS_PlayerDataStorage_DeleteFileOptions = _tagEOS_PlayerDataStorage_DeleteFileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_DeleteFileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_DeleteFileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_DeleteFileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_DeleteFileCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_DeleteFileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteFileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_PlayerDataStorage_DeleteFileCallbackInfo = _tagEOS_PlayerDataStorage_DeleteFileCallbackInfo ; pub type EOS_PlayerDataStorage_OnDeleteFileCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_DeleteFileCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_PlayerDataStorageFileTransferRequestHandle { _unused : [u8 ; 0] , } # [doc = " Handle type to a File Request"] pub type EOS_HPlayerDataStorageFileTransferRequest = * mut EOS_PlayerDataStorageFileTransferRequestHandle ; extern "C" { # [doc = " Free the memory used by a cloud-storage file request handle. This will not cancel a request in progress."] pub fn EOS_PlayerDataStorageFileTransferRequest_Release (PlayerDataStorageFileTransferHandle : EOS_HPlayerDataStorageFileTransferRequest) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub BytesTransferred : u32 , pub TotalFileSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BytesTransferred) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (BytesTransferred))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TotalFileSizeBytes) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (TotalFileSizeBytes))) ; } pub type EOS_PlayerDataStorage_FileTransferProgressCallbackInfo = _tagEOS_PlayerDataStorage_FileTransferProgressCallbackInfo ; pub type EOS_PlayerDataStorage_OnFileTransferProgressCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_FileTransferProgressCallbackInfo) > ; # [repr (i32)] # [non_exhaustive] # [doc = " Return results for EOS_PlayerDataStorage_OnReadFileDataCallback callbacks to return"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_PlayerDataStorage_EReadResult { EOS_RR_ContinueReading = 1 , EOS_RR_FailRequest = 2 , EOS_RR_CancelRequest = 3 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub TotalFileSizeBytes : u32 , pub bIsLastChunk : EOS_Bool , pub DataChunkLengthBytes : u32 , pub DataChunk : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TotalFileSizeBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (TotalFileSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsLastChunk) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (bIsLastChunk))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataChunkLengthBytes) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (DataChunkLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataChunk) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (DataChunk))) ; } pub type EOS_PlayerDataStorage_ReadFileDataCallbackInfo = _tagEOS_PlayerDataStorage_ReadFileDataCallbackInfo ; pub type EOS_PlayerDataStorage_OnReadFileDataCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_ReadFileDataCallbackInfo) -> EOS_PlayerDataStorage_EReadResult > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_ReadFileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub ReadChunkLengthBytes : u32 , pub ReadFileDataCallback : EOS_PlayerDataStorage_OnReadFileDataCallback , pub FileTransferProgressCallback : EOS_PlayerDataStorage_OnFileTransferProgressCallback , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_ReadFileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_ReadFileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_ReadFileOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_ReadFileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReadChunkLengthBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions) , "::" , stringify ! (ReadChunkLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReadFileDataCallback) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions) , "::" , stringify ! (ReadFileDataCallback))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FileTransferProgressCallback) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileOptions) , "::" , stringify ! (FileTransferProgressCallback))) ; } pub type EOS_PlayerDataStorage_ReadFileOptions = _tagEOS_PlayerDataStorage_ReadFileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_ReadFileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_ReadFileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_ReadFileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_ReadFileCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_ReadFileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_ReadFileCallbackInfo) , "::" , stringify ! (Filename))) ; } pub type EOS_PlayerDataStorage_ReadFileCallbackInfo = _tagEOS_PlayerDataStorage_ReadFileCallbackInfo ; pub type EOS_PlayerDataStorage_OnReadFileCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_ReadFileCallbackInfo) > ; # [repr (i32)] # [non_exhaustive] # [doc = " Return results for EOS_PlayerDataStorage_OnWriteFileDataCallback callbacks to return"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_PlayerDataStorage_EWriteResult { EOS_WR_ContinueWriting = 1 , EOS_WR_CompleteRequest = 2 , EOS_WR_FailRequest = 3 , EOS_WR_CancelRequest = 4 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub DataBufferLengthBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataBufferLengthBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo) , "::" , stringify ! (DataBufferLengthBytes))) ; } pub type EOS_PlayerDataStorage_WriteFileDataCallbackInfo = _tagEOS_PlayerDataStorage_WriteFileDataCallbackInfo ; pub type EOS_PlayerDataStorage_OnWriteFileDataCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_WriteFileDataCallbackInfo , OutDataBuffer : * mut :: std :: os :: raw :: c_void , OutDataWritten : * mut u32) -> EOS_PlayerDataStorage_EWriteResult > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_WriteFileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub ChunkLengthBytes : u32 , pub WriteFileDataCallback : EOS_PlayerDataStorage_OnWriteFileDataCallback , pub FileTransferProgressCallback : EOS_PlayerDataStorage_OnFileTransferProgressCallback , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_WriteFileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_WriteFileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_WriteFileOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_WriteFileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ChunkLengthBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions) , "::" , stringify ! (ChunkLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . WriteFileDataCallback) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions) , "::" , stringify ! (WriteFileDataCallback))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FileTransferProgressCallback) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileOptions) , "::" , stringify ! (FileTransferProgressCallback))) ; } pub type EOS_PlayerDataStorage_WriteFileOptions = _tagEOS_PlayerDataStorage_WriteFileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_WriteFileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_WriteFileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_WriteFileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_WriteFileCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_WriteFileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_WriteFileCallbackInfo) , "::" , stringify ! (Filename))) ; } pub type EOS_PlayerDataStorage_WriteFileCallbackInfo = _tagEOS_PlayerDataStorage_WriteFileCallbackInfo ; pub type EOS_PlayerDataStorage_OnWriteFileCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_WriteFileCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_DeleteCacheOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_DeleteCacheOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_DeleteCacheOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_DeleteCacheOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_DeleteCacheOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_PlayerDataStorage_DeleteCacheOptions = _tagEOS_PlayerDataStorage_DeleteCacheOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_PlayerDataStorage_DeleteCacheCallbackInfo = _tagEOS_PlayerDataStorage_DeleteCacheCallbackInfo ; pub type EOS_PlayerDataStorage_OnDeleteCacheCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_PlayerDataStorage_DeleteCacheCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_TitleStorageHandle { _unused : [u8 ; 0] , } pub type EOS_HTitleStorage = * mut EOS_TitleStorageHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_FileMetadata { pub ApiVersion : i32 , pub FileSizeBytes : u32 , pub MD5Hash : * const :: std :: os :: raw :: c_char , pub Filename : * const :: std :: os :: raw :: c_char , pub UnencryptedDataSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_FileMetadata () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_FileMetadata > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_FileMetadata > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_FileMetadata))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_FileMetadata > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_FileMetadata))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileMetadata) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FileSizeBytes) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileMetadata) , "::" , stringify ! (FileSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MD5Hash) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileMetadata) , "::" , stringify ! (MD5Hash))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileMetadata) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnencryptedDataSizeBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileMetadata) , "::" , stringify ! (UnencryptedDataSizeBytes))) ; } pub type EOS_TitleStorage_FileMetadata = _tagEOS_TitleStorage_FileMetadata ; extern "C" { # [doc = " Free the memory used by the file metadata"] pub fn EOS_TitleStorage_FileMetadata_Release (FileMetadata : * mut EOS_TitleStorage_FileMetadata) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_QueryFileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_QueryFileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_QueryFileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_QueryFileOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_QueryFileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_QueryFileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_QueryFileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileOptions) , "::" , stringify ! (Filename))) ; } pub type EOS_TitleStorage_QueryFileOptions = _tagEOS_TitleStorage_QueryFileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_QueryFileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_QueryFileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_QueryFileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_QueryFileCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_QueryFileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_QueryFileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_QueryFileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_TitleStorage_QueryFileCallbackInfo = _tagEOS_TitleStorage_QueryFileCallbackInfo ; pub type EOS_TitleStorage_OnQueryFileCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_TitleStorage_QueryFileCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_QueryFileListOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub ListOfTags : * const * const :: std :: os :: raw :: c_char , pub ListOfTagsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_QueryFileListOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_QueryFileListOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_QueryFileListOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_QueryFileListOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_QueryFileListOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_QueryFileListOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ListOfTags) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListOptions) , "::" , stringify ! (ListOfTags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ListOfTagsCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListOptions) , "::" , stringify ! (ListOfTagsCount))) ; } pub type EOS_TitleStorage_QueryFileListOptions = _tagEOS_TitleStorage_QueryFileListOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_QueryFileListCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub FileCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_QueryFileListCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_QueryFileListCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_QueryFileListCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_QueryFileListCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_QueryFileListCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_QueryFileListCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FileCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_QueryFileListCallbackInfo) , "::" , stringify ! (FileCount))) ; } pub type EOS_TitleStorage_QueryFileListCallbackInfo = _tagEOS_TitleStorage_QueryFileListCallbackInfo ; pub type EOS_TitleStorage_OnQueryFileListCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_TitleStorage_QueryFileListCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_GetFileMetadataCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_GetFileMetadataCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_GetFileMetadataCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_GetFileMetadataCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_GetFileMetadataCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_GetFileMetadataCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_GetFileMetadataCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_GetFileMetadataCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_GetFileMetadataCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_TitleStorage_GetFileMetadataCountOptions = _tagEOS_TitleStorage_GetFileMetadataCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Index : u32 , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_TitleStorage_CopyFileMetadataAtIndexOptions = _tagEOS_TitleStorage_CopyFileMetadataAtIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions) , "::" , stringify ! (Filename))) ; } pub type EOS_TitleStorage_CopyFileMetadataByFilenameOptions = _tagEOS_TitleStorage_CopyFileMetadataByFilenameOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_TitleStorageFileTransferRequestHandle { _unused : [u8 ; 0] , } # [doc = " Handle type to a File Request"] pub type EOS_HTitleStorageFileTransferRequest = * mut EOS_TitleStorageFileTransferRequestHandle ; extern "C" { # [doc = " Free the memory used by a cloud-storage file request handle. This will not cancel a request in progress."] pub fn EOS_TitleStorageFileTransferRequest_Release (TitleStorageFileTransferHandle : EOS_HTitleStorageFileTransferRequest) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_FileTransferProgressCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub BytesTransferred : u32 , pub TotalFileSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_FileTransferProgressCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_FileTransferProgressCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_FileTransferProgressCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_FileTransferProgressCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_FileTransferProgressCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_FileTransferProgressCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . BytesTransferred) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (BytesTransferred))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TotalFileSizeBytes) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_FileTransferProgressCallbackInfo) , "::" , stringify ! (TotalFileSizeBytes))) ; } pub type EOS_TitleStorage_FileTransferProgressCallbackInfo = _tagEOS_TitleStorage_FileTransferProgressCallbackInfo ; pub type EOS_TitleStorage_OnFileTransferProgressCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_TitleStorage_FileTransferProgressCallbackInfo) > ; # [repr (i32)] # [non_exhaustive] # [doc = " Return results for EOS_TitleStorage_OnReadFileDataCallback callbacks"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_TitleStorage_EReadResult { EOS_TS_RR_ContinueReading = 1 , EOS_TS_RR_FailRequest = 2 , EOS_TS_RR_CancelRequest = 3 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_ReadFileDataCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub TotalFileSizeBytes : u32 , pub bIsLastChunk : EOS_Bool , pub DataChunkLengthBytes : u32 , pub DataChunk : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_ReadFileDataCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_ReadFileDataCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_ReadFileDataCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_ReadFileDataCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TotalFileSizeBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (TotalFileSizeBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsLastChunk) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (bIsLastChunk))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataChunkLengthBytes) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (DataChunkLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataChunk) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileDataCallbackInfo) , "::" , stringify ! (DataChunk))) ; } pub type EOS_TitleStorage_ReadFileDataCallbackInfo = _tagEOS_TitleStorage_ReadFileDataCallbackInfo ; pub type EOS_TitleStorage_OnReadFileDataCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_TitleStorage_ReadFileDataCallbackInfo) -> EOS_TitleStorage_EReadResult > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_ReadFileOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , pub ReadChunkLengthBytes : u32 , pub ReadFileDataCallback : EOS_TitleStorage_OnReadFileDataCallback , pub FileTransferProgressCallback : EOS_TitleStorage_OnFileTransferProgressCallback , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_ReadFileOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_ReadFileOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_ReadFileOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_ReadFileOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions) , "::" , stringify ! (Filename))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReadChunkLengthBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions) , "::" , stringify ! (ReadChunkLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReadFileDataCallback) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions) , "::" , stringify ! (ReadFileDataCallback))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FileTransferProgressCallback) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileOptions) , "::" , stringify ! (FileTransferProgressCallback))) ; } pub type EOS_TitleStorage_ReadFileOptions = _tagEOS_TitleStorage_ReadFileOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_ReadFileCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub Filename : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_ReadFileCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_ReadFileCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_ReadFileCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_ReadFileCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_ReadFileCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_ReadFileCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Filename) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_ReadFileCallbackInfo) , "::" , stringify ! (Filename))) ; } pub type EOS_TitleStorage_ReadFileCallbackInfo = _tagEOS_TitleStorage_ReadFileCallbackInfo ; pub type EOS_TitleStorage_OnReadFileCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_TitleStorage_ReadFileCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_DeleteCacheOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_DeleteCacheOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_DeleteCacheOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_DeleteCacheOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_DeleteCacheOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_DeleteCacheOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_DeleteCacheOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_DeleteCacheOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_DeleteCacheOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_TitleStorage_DeleteCacheOptions = _tagEOS_TitleStorage_DeleteCacheOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_TitleStorage_DeleteCacheCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_TitleStorage_DeleteCacheCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_TitleStorage_DeleteCacheCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_TitleStorage_DeleteCacheCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_TitleStorage_DeleteCacheCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_TitleStorage_DeleteCacheCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_TitleStorage_DeleteCacheCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_DeleteCacheCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_DeleteCacheCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_TitleStorage_DeleteCacheCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_TitleStorage_DeleteCacheCallbackInfo = _tagEOS_TitleStorage_DeleteCacheCallbackInfo ; pub type EOS_TitleStorage_OnDeleteCacheCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_TitleStorage_DeleteCacheCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_ConnectHandle { _unused : [u8 ; 0] , } pub type EOS_HConnect = * mut EOS_ConnectHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_Credentials { pub ApiVersion : i32 , pub Token : * const :: std :: os :: raw :: c_char , pub Type : EOS_EExternalCredentialType , } # [test] fn bindgen_test_layout__tagEOS_Connect_Credentials () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_Credentials > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_Credentials > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_Credentials))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_Credentials > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_Credentials))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_Credentials) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Token) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_Credentials) , "::" , stringify ! (Token))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_Credentials) , "::" , stringify ! (Type))) ; } pub type EOS_Connect_Credentials = _tagEOS_Connect_Credentials ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_UserLoginInfo { pub ApiVersion : i32 , pub DisplayName : * const :: std :: os :: raw :: c_char , pub NsaIdToken : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Connect_UserLoginInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_UserLoginInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_UserLoginInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_UserLoginInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_UserLoginInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_UserLoginInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UserLoginInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UserLoginInfo) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NsaIdToken) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UserLoginInfo) , "::" , stringify ! (NsaIdToken))) ; } pub type EOS_Connect_UserLoginInfo = _tagEOS_Connect_UserLoginInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_LoginOptions { pub ApiVersion : i32 , pub Credentials : * const EOS_Connect_Credentials , pub UserLoginInfo : * const EOS_Connect_UserLoginInfo , } # [test] fn bindgen_test_layout__tagEOS_Connect_LoginOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_LoginOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_LoginOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_LoginOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_LoginOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_LoginOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Credentials) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginOptions) , "::" , stringify ! (Credentials))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserLoginInfo) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginOptions) , "::" , stringify ! (UserLoginInfo))) ; } pub type EOS_Connect_LoginOptions = _tagEOS_Connect_LoginOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_LoginCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub ContinuanceToken : EOS_ContinuanceToken , } # [test] fn bindgen_test_layout__tagEOS_Connect_LoginCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_LoginCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_LoginCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_LoginCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_LoginCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_LoginCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ContinuanceToken) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginCallbackInfo) , "::" , stringify ! (ContinuanceToken))) ; } pub type EOS_Connect_LoginCallbackInfo = _tagEOS_Connect_LoginCallbackInfo ; pub type EOS_Connect_OnLoginCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_LoginCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CreateUserOptions { pub ApiVersion : i32 , pub ContinuanceToken : EOS_ContinuanceToken , } # [test] fn bindgen_test_layout__tagEOS_Connect_CreateUserOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CreateUserOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CreateUserOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CreateUserOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CreateUserOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CreateUserOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateUserOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ContinuanceToken) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateUserOptions) , "::" , stringify ! (ContinuanceToken))) ; } pub type EOS_Connect_CreateUserOptions = _tagEOS_Connect_CreateUserOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CreateUserCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_CreateUserCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CreateUserCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CreateUserCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CreateUserCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CreateUserCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CreateUserCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateUserCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateUserCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateUserCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_CreateUserCallbackInfo = _tagEOS_Connect_CreateUserCallbackInfo ; pub type EOS_Connect_OnCreateUserCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_CreateUserCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_LinkAccountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub ContinuanceToken : EOS_ContinuanceToken , } # [test] fn bindgen_test_layout__tagEOS_Connect_LinkAccountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_LinkAccountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_LinkAccountOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_LinkAccountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_LinkAccountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_LinkAccountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LinkAccountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LinkAccountOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ContinuanceToken) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LinkAccountOptions) , "::" , stringify ! (ContinuanceToken))) ; } pub type EOS_Connect_LinkAccountOptions = _tagEOS_Connect_LinkAccountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_LinkAccountCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_LinkAccountCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_LinkAccountCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_LinkAccountCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_LinkAccountCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_LinkAccountCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_LinkAccountCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LinkAccountCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LinkAccountCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LinkAccountCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_LinkAccountCallbackInfo = _tagEOS_Connect_LinkAccountCallbackInfo ; pub type EOS_Connect_OnLinkAccountCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_LinkAccountCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_UnlinkAccountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_UnlinkAccountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_UnlinkAccountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_UnlinkAccountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_UnlinkAccountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_UnlinkAccountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_UnlinkAccountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UnlinkAccountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UnlinkAccountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_UnlinkAccountOptions = _tagEOS_Connect_UnlinkAccountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_UnlinkAccountCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_UnlinkAccountCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_UnlinkAccountCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_UnlinkAccountCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_UnlinkAccountCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_UnlinkAccountCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_UnlinkAccountCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UnlinkAccountCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UnlinkAccountCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_UnlinkAccountCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_UnlinkAccountCallbackInfo = _tagEOS_Connect_UnlinkAccountCallbackInfo ; pub type EOS_Connect_OnUnlinkAccountCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_UnlinkAccountCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CreateDeviceIdOptions { pub ApiVersion : i32 , pub DeviceModel : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Connect_CreateDeviceIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CreateDeviceIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CreateDeviceIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CreateDeviceIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CreateDeviceIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CreateDeviceIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateDeviceIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DeviceModel) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateDeviceIdOptions) , "::" , stringify ! (DeviceModel))) ; } pub type EOS_Connect_CreateDeviceIdOptions = _tagEOS_Connect_CreateDeviceIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CreateDeviceIdCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Connect_CreateDeviceIdCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CreateDeviceIdCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CreateDeviceIdCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CreateDeviceIdCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CreateDeviceIdCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CreateDeviceIdCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateDeviceIdCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CreateDeviceIdCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Connect_CreateDeviceIdCallbackInfo = _tagEOS_Connect_CreateDeviceIdCallbackInfo ; pub type EOS_Connect_OnCreateDeviceIdCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_CreateDeviceIdCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_DeleteDeviceIdOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Connect_DeleteDeviceIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_DeleteDeviceIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_DeleteDeviceIdOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_DeleteDeviceIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_DeleteDeviceIdOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_DeleteDeviceIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_DeleteDeviceIdOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Connect_DeleteDeviceIdOptions = _tagEOS_Connect_DeleteDeviceIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_DeleteDeviceIdCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Connect_DeleteDeviceIdCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_DeleteDeviceIdCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_DeleteDeviceIdCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_DeleteDeviceIdCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_DeleteDeviceIdCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_DeleteDeviceIdCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_DeleteDeviceIdCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_DeleteDeviceIdCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Connect_DeleteDeviceIdCallbackInfo = _tagEOS_Connect_DeleteDeviceIdCallbackInfo ; pub type EOS_Connect_OnDeleteDeviceIdCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_DeleteDeviceIdCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_TransferDeviceIdAccountOptions { pub ApiVersion : i32 , pub PrimaryLocalUserId : EOS_ProductUserId , pub LocalDeviceUserId : EOS_ProductUserId , pub ProductUserIdToPreserve : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_TransferDeviceIdAccountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_TransferDeviceIdAccountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_TransferDeviceIdAccountOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_TransferDeviceIdAccountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PrimaryLocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountOptions) , "::" , stringify ! (PrimaryLocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalDeviceUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountOptions) , "::" , stringify ! (LocalDeviceUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserIdToPreserve) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountOptions) , "::" , stringify ! (ProductUserIdToPreserve))) ; } pub type EOS_Connect_TransferDeviceIdAccountOptions = _tagEOS_Connect_TransferDeviceIdAccountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_TransferDeviceIdAccountCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_TransferDeviceIdAccountCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_TransferDeviceIdAccountCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_TransferDeviceIdAccountCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_TransferDeviceIdAccountCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_TransferDeviceIdAccountCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_TransferDeviceIdAccountCallbackInfo = _tagEOS_Connect_TransferDeviceIdAccountCallbackInfo ; pub type EOS_Connect_OnTransferDeviceIdAccountCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_TransferDeviceIdAccountCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_QueryExternalAccountMappingsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub AccountIdType : EOS_EExternalAccountType , pub ExternalAccountIds : * mut * const :: std :: os :: raw :: c_char , pub ExternalAccountIdCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Connect_QueryExternalAccountMappingsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_QueryExternalAccountMappingsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_QueryExternalAccountMappingsOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_QueryExternalAccountMappingsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsOptions) , "::" , stringify ! (AccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountIds) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsOptions) , "::" , stringify ! (ExternalAccountIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountIdCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsOptions) , "::" , stringify ! (ExternalAccountIdCount))) ; } pub type EOS_Connect_QueryExternalAccountMappingsOptions = _tagEOS_Connect_QueryExternalAccountMappingsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_QueryExternalAccountMappingsCallbackInfo = _tagEOS_Connect_QueryExternalAccountMappingsCallbackInfo ; pub type EOS_Connect_OnQueryExternalAccountMappingsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_QueryExternalAccountMappingsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_GetExternalAccountMappingsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub AccountIdType : EOS_EExternalAccountType , pub TargetExternalUserId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Connect_GetExternalAccountMappingsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_GetExternalAccountMappingsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_GetExternalAccountMappingsOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_GetExternalAccountMappingsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_GetExternalAccountMappingsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_GetExternalAccountMappingsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetExternalAccountMappingsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetExternalAccountMappingsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetExternalAccountMappingsOptions) , "::" , stringify ! (AccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetExternalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetExternalAccountMappingsOptions) , "::" , stringify ! (TargetExternalUserId))) ; } pub type EOS_Connect_GetExternalAccountMappingsOptions = _tagEOS_Connect_GetExternalAccountMappingsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_QueryProductUserIdMappingsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub AccountIdType_DEPRECATED : EOS_EExternalAccountType , pub ProductUserIds : * mut EOS_ProductUserId , pub ProductUserIdCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Connect_QueryProductUserIdMappingsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_QueryProductUserIdMappingsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_QueryProductUserIdMappingsOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_QueryProductUserIdMappingsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType_DEPRECATED) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsOptions) , "::" , stringify ! (AccountIdType_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserIds) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsOptions) , "::" , stringify ! (ProductUserIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserIdCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsOptions) , "::" , stringify ! (ProductUserIdCount))) ; } pub type EOS_Connect_QueryProductUserIdMappingsOptions = _tagEOS_Connect_QueryProductUserIdMappingsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_QueryProductUserIdMappingsCallbackInfo = _tagEOS_Connect_QueryProductUserIdMappingsCallbackInfo ; pub type EOS_Connect_OnQueryProductUserIdMappingsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_QueryProductUserIdMappingsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_GetProductUserIdMappingOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub AccountIdType : EOS_EExternalAccountType , pub TargetProductUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_GetProductUserIdMappingOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_GetProductUserIdMappingOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_GetProductUserIdMappingOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_GetProductUserIdMappingOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_GetProductUserIdMappingOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_GetProductUserIdMappingOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetProductUserIdMappingOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetProductUserIdMappingOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetProductUserIdMappingOptions) , "::" , stringify ! (AccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetProductUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetProductUserIdMappingOptions) , "::" , stringify ! (TargetProductUserId))) ; } pub type EOS_Connect_GetProductUserIdMappingOptions = _tagEOS_Connect_GetProductUserIdMappingOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_GetProductUserExternalAccountCountOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_GetProductUserExternalAccountCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_GetProductUserExternalAccountCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_GetProductUserExternalAccountCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_GetProductUserExternalAccountCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_GetProductUserExternalAccountCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_GetProductUserExternalAccountCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetProductUserExternalAccountCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_GetProductUserExternalAccountCountOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Connect_GetProductUserExternalAccountCountOptions = _tagEOS_Connect_GetProductUserExternalAccountCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub ExternalAccountInfoIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ExternalAccountInfoIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions) , "::" , stringify ! (ExternalAccountInfoIndex))) ; } pub type EOS_Connect_CopyProductUserExternalAccountByIndexOptions = _tagEOS_Connect_CopyProductUserExternalAccountByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub AccountIdType : EOS_EExternalAccountType , } # [test] fn bindgen_test_layout__tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions) , "::" , stringify ! (AccountIdType))) ; } pub type EOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions = _tagEOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub AccountId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions) , "::" , stringify ! (AccountId))) ; } pub type EOS_Connect_CopyProductUserExternalAccountByAccountIdOptions = _tagEOS_Connect_CopyProductUserExternalAccountByAccountIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CopyProductUserInfoOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_CopyProductUserInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CopyProductUserInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CopyProductUserInfoOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CopyProductUserInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CopyProductUserInfoOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CopyProductUserInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserInfoOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyProductUserInfoOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Connect_CopyProductUserInfoOptions = _tagEOS_Connect_CopyProductUserInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_ExternalAccountInfo { pub ApiVersion : i32 , pub ProductUserId : EOS_ProductUserId , pub DisplayName : * const :: std :: os :: raw :: c_char , pub AccountId : * const :: std :: os :: raw :: c_char , pub AccountIdType : EOS_EExternalAccountType , pub LastLoginTime : i64 , } # [test] fn bindgen_test_layout__tagEOS_Connect_ExternalAccountInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_ExternalAccountInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_ExternalAccountInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_ExternalAccountInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_ExternalAccountInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_ExternalAccountInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_ExternalAccountInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_ExternalAccountInfo) , "::" , stringify ! (ProductUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_ExternalAccountInfo) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_ExternalAccountInfo) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_ExternalAccountInfo) , "::" , stringify ! (AccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LastLoginTime) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_ExternalAccountInfo) , "::" , stringify ! (LastLoginTime))) ; } pub type EOS_Connect_ExternalAccountInfo = _tagEOS_Connect_ExternalAccountInfo ; extern "C" { # [doc = " Release the memory associated with an external account info. This must be called on data retrieved from\n EOS_Connect_CopyProductUserExternalAccountByIndex, EOS_Connect_CopyProductUserExternalAccountByAccountType,\n EOS_Connect_CopyProductUserExternalAccountByAccountId or EOS_Connect_CopyProductUserInfo.\n\n @param ExternalAccountInfo The external account info data to release.\n\n @see EOS_Connect_CopyProductUserExternalAccountByIndex\n @see EOS_Connect_CopyProductUserExternalAccountByAccountType\n @see EOS_Connect_CopyProductUserExternalAccountByAccountId\n @see EOS_Connect_CopyProductUserInfo"] pub fn EOS_Connect_ExternalAccountInfo_Release (ExternalAccountInfo : * mut EOS_Connect_ExternalAccountInfo) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_AddNotifyAuthExpirationOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Connect_AddNotifyAuthExpirationOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_AddNotifyAuthExpirationOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_AddNotifyAuthExpirationOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_AddNotifyAuthExpirationOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_AddNotifyAuthExpirationOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_AddNotifyAuthExpirationOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_AddNotifyAuthExpirationOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Connect_AddNotifyAuthExpirationOptions = _tagEOS_Connect_AddNotifyAuthExpirationOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_AuthExpirationCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_AuthExpirationCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_AuthExpirationCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_AuthExpirationCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_AuthExpirationCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_AuthExpirationCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_AuthExpirationCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_AuthExpirationCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_AuthExpirationCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_AuthExpirationCallbackInfo = _tagEOS_Connect_AuthExpirationCallbackInfo ; pub type EOS_Connect_OnAuthExpirationCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_AuthExpirationCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_AddNotifyLoginStatusChangedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Connect_AddNotifyLoginStatusChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_AddNotifyLoginStatusChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_AddNotifyLoginStatusChangedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_AddNotifyLoginStatusChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_AddNotifyLoginStatusChangedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_AddNotifyLoginStatusChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_AddNotifyLoginStatusChangedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Connect_AddNotifyLoginStatusChangedOptions = _tagEOS_Connect_AddNotifyLoginStatusChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_LoginStatusChangedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub PreviousStatus : EOS_ELoginStatus , pub CurrentStatus : EOS_ELoginStatus , } # [test] fn bindgen_test_layout__tagEOS_Connect_LoginStatusChangedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_LoginStatusChangedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_LoginStatusChangedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_LoginStatusChangedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_LoginStatusChangedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_LoginStatusChangedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginStatusChangedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginStatusChangedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PreviousStatus) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginStatusChangedCallbackInfo) , "::" , stringify ! (PreviousStatus))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentStatus) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_LoginStatusChangedCallbackInfo) , "::" , stringify ! (CurrentStatus))) ; } pub type EOS_Connect_LoginStatusChangedCallbackInfo = _tagEOS_Connect_LoginStatusChangedCallbackInfo ; pub type EOS_Connect_OnLoginStatusChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_LoginStatusChangedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_IdToken { pub ApiVersion : i32 , pub ProductUserId : EOS_ProductUserId , pub JsonWebToken : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Connect_IdToken () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_IdToken > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_IdToken > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_IdToken))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_IdToken > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_IdToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_IdToken) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_IdToken) , "::" , stringify ! (ProductUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . JsonWebToken) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_IdToken) , "::" , stringify ! (JsonWebToken))) ; } pub type EOS_Connect_IdToken = _tagEOS_Connect_IdToken ; extern "C" { # [doc = " Release the memory associated with an EOS_Connect_IdToken structure. This must be called on data retrieved from EOS_Connect_CopyIdToken.\n\n @param IdToken The ID token structure to be released.\n\n @see EOS_Connect_IdToken\n @see EOS_Connect_CopyIdToken"] pub fn EOS_Connect_IdToken_Release (IdToken : * mut EOS_Connect_IdToken) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_CopyIdTokenOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Connect_CopyIdTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_CopyIdTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_CopyIdTokenOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_CopyIdTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_CopyIdTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_CopyIdTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyIdTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_CopyIdTokenOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Connect_CopyIdTokenOptions = _tagEOS_Connect_CopyIdTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_VerifyIdTokenOptions { pub ApiVersion : i32 , pub IdToken : * const EOS_Connect_IdToken , } # [test] fn bindgen_test_layout__tagEOS_Connect_VerifyIdTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_VerifyIdTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_VerifyIdTokenOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_VerifyIdTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_VerifyIdTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_VerifyIdTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IdToken) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenOptions) , "::" , stringify ! (IdToken))) ; } pub type EOS_Connect_VerifyIdTokenOptions = _tagEOS_Connect_VerifyIdTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Connect_VerifyIdTokenCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub ProductUserId : EOS_ProductUserId , pub bIsAccountInfoPresent : EOS_Bool , pub AccountIdType : EOS_EExternalAccountType , pub AccountId : * const :: std :: os :: raw :: c_char , pub Platform : * const :: std :: os :: raw :: c_char , pub DeviceType : * const :: std :: os :: raw :: c_char , pub ClientId : * const :: std :: os :: raw :: c_char , pub ProductId : * const :: std :: os :: raw :: c_char , pub SandboxId : * const :: std :: os :: raw :: c_char , pub DeploymentId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Connect_VerifyIdTokenCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Connect_VerifyIdTokenCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Connect_VerifyIdTokenCallbackInfo > () , 88usize , concat ! ("Size of: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Connect_VerifyIdTokenCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ProductUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsAccountInfoPresent) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (bIsAccountInfoPresent))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountIdType) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (AccountIdType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (AccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Platform) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (Platform))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DeviceType) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (DeviceType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientId) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ClientId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductId) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (ProductId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SandboxId) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (SandboxId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DeploymentId) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Connect_VerifyIdTokenCallbackInfo) , "::" , stringify ! (DeploymentId))) ; } pub type EOS_Connect_VerifyIdTokenCallbackInfo = _tagEOS_Connect_VerifyIdTokenCallbackInfo ; pub type EOS_Connect_OnVerifyIdTokenCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Connect_VerifyIdTokenCallbackInfo) > ; extern "C" { # [doc = " Login/Authenticate given a valid set of external auth credentials.\n\n @param Options structure containing the external account credentials and type to use during the login operation.\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the login operation completes, either successfully or in error."] pub fn EOS_Connect_Login (Handle : EOS_HConnect , Options : * const EOS_Connect_LoginOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnLoginCallback) ; } extern "C" { # [doc = " Create an account association with the Epic Online Service as a product user given their external auth credentials.\n\n @param Options structure containing a continuance token from a \"user not found\" response during Login (always try login first).\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the create operation completes, either successfully or in error."] pub fn EOS_Connect_CreateUser (Handle : EOS_HConnect , Options : * const EOS_Connect_CreateUserOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnCreateUserCallback) ; } extern "C" { # [doc = " Link a set of external auth credentials with an existing product user on the Epic Online Service.\n\n @param Options structure containing a continuance token from a \"user not found\" response during Login (always try login first) and a currently logged in user not already associated with this external auth provider.\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the link operation completes, either successfully or in error."] pub fn EOS_Connect_LinkAccount (Handle : EOS_HConnect , Options : * const EOS_Connect_LinkAccountOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnLinkAccountCallback) ; } extern "C" { # [doc = " Unlink external auth credentials from the owning keychain of a logged in product user.\n\n This function allows recovering the user from scenarios where they have accidentally proceeded to creating\n a new product user for the local native user account, instead of linking it with an existing keychain that\n they have previously created by playing the game (or another game owned by the organization) on another platform.\n\n In such scenario, after the initial platform login and a new product user creation, the user wishes to re-login\n using other set of external auth credentials to connect with their existing game progression data. In order to\n allow automatic login also on the current platform, they will need to unlink the accidentally created new keychain\n and product user and then use the EOS_Connect_Login and EOS_Connect_LinkAccount APIs to link the local native platform\n account with that previously created existing product user and its owning keychain.\n\n In another scenario, the user may simply want to disassociate the account that they have logged in with from the current\n keychain that it is linked with, perhaps to link it against another keychain or to separate the game progressions again.\n\n In order to protect against account theft, it is only possible to unlink user accounts that have been authenticated\n and logged in to the product user in the current session. This prevents a malicious actor from gaining access to one\n of the linked accounts and using it to remove all other accounts linked with the keychain. This also prevents a malicious\n actor from replacing the unlinked account with their own corresponding account on the same platform, as the unlinking\n operation will ensure that any existing authentication session cannot be used to re-link and overwrite the entry without\n authenticating with one of the other linked accounts in the keychain. These restrictions limit the potential attack surface\n related to account theft scenarios.\n\n @param Options structure containing operation input parameters.\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the unlink operation completes, either successfully or in error."] pub fn EOS_Connect_UnlinkAccount (Handle : EOS_HConnect , Options : * const EOS_Connect_UnlinkAccountOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnUnlinkAccountCallback) ; } extern "C" { # [doc = " Create a new unique pseudo-account that can be used to identify the current user profile on the local device.\n\n This function is intended to be used by mobile games and PC games that wish to allow\n a new user to start playing without requiring to login to the game using any user identity.\n In addition to this, the Device ID feature is used to automatically login the local user\n also when they have linked at least one external user account(s) with the local Device ID.\n\n It is possible to link many devices with the same user's account keyring using the Device ID feature.\n\n Linking a device later or immediately with a real user account will ensure that the player\n will not lose their progress if they switch devices or lose the device at some point,\n as they will be always able to login with one of their linked real accounts and also link\n another new device with the user account associations keychain. Otherwise, without having\n at least one permanent user account linked to the Device ID, the player would lose all of their\n game data and progression permanently should something happen to their device or the local\n user profile on the device.\n\n After a successful one-time CreateDeviceId operation, the game can login the local user\n automatically on subsequent game starts with EOS_Connect_Login using the EOS_ECT_DEVICEID_ACCESS_TOKEN\n credentials type. If a Device ID already exists for the local user on the device then EOS_DuplicateNotAllowed\n error result is returned and the caller should proceed to calling EOS_Connect_Login directly.\n\n @param Options structure containing operation input parameters.\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the create operation completes, either successfully or in error."] pub fn EOS_Connect_CreateDeviceId (Handle : EOS_HConnect , Options : * const EOS_Connect_CreateDeviceIdOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnCreateDeviceIdCallback) ; } extern "C" { # [doc = " Delete any existing Device ID access credentials for the current user profile on the local device.\n\n The deletion is permanent and it is not possible to recover lost game data and progression\n if the Device ID had not been linked with at least one real external user account.\n\n On Android and iOS devices, uninstalling the application will automatically delete any local\n Device ID credentials created by the application.\n\n On Desktop platforms (Linux, macOS, Windows), Device ID credentials are not automatically deleted.\n Applications may re-use existing Device ID credentials for the local OS user when the application is\n re-installed, or call the DeleteDeviceId API on the first run to ensure a fresh start for the user.\n\n @param Options structure containing operation input parameters\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate\n @param CompletionDelegate a callback that is fired when the delete operation completes, either successfully or in error"] pub fn EOS_Connect_DeleteDeviceId (Handle : EOS_HConnect , Options : * const EOS_Connect_DeleteDeviceIdOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnDeleteDeviceIdCallback) ; } extern "C" { # [doc = " Transfer a Device ID pseudo-account and the product user associated with it into another\n keychain linked with real user accounts (such as Epic Games, PlayStation(TM)Network, Xbox Live, and other).\n\n This function allows transferring a product user, i.e. the local user's game progression\n backend data from a Device ID owned keychain into a keychain with real user accounts\n linked to it. The transfer of Device ID owned product user into a keychain of real user\n accounts allows persisting the user's game data on the backend in the event that they\n would lose access to the local device or otherwise switch to another device or platform.\n\n This function is only applicable in the situation of where the local user first plays\n the game using the anonymous Device ID login, then later logs in using a real user\n account that they have also already used to play the same game or another game under the\n same organization within Epic Online Services. In such situation, while normally the login\n attempt with a real user account would return EOS_InvalidUser and an EOS_ContinuanceToken\n and allow calling the EOS_Connect_LinkAccount API to link it with the Device ID's keychain,\n instead the login operation succeeds and finds an existing user because the association\n already exists. Because the user cannot have two product users simultaneously to play with,\n the game should prompt the user to choose which profile to keep and which one to discard\n permanently. Based on the user choice, the game may then proceed to transfer the Device ID\n login into the keychain that is persistent and backed by real user accounts, and if the user\n chooses so, move the product user as well into the destination keychain and overwrite the\n existing previous product user with it. To clarify, moving the product user with the Device ID\n login in this way into a persisted keychain allows to preserve the so far only locally persisted\n game progression and thus protect the user against a case where they lose access to the device.\n\n On success, the completion callback will return the preserved EOS_ProductUserId that remains\n logged in while the discarded EOS_ProductUserId has been invalidated and deleted permanently.\n Consecutive logins using the existing Device ID login type or the external account will\n connect the user to the same backend data belonging to the preserved EOS_ProductUserId.\n\n Example walkthrough: Cross-platform mobile game using the anonymous Device ID login.\n\n For onboarding new users, the game will attempt to always automatically login the local user\n by calling EOS_Connect_Login using the EOS_ECT_DEVICEID_ACCESS_TOKEN login type. If the local\n Device ID credentials are not found, and the game wants a frictionless entry for the first time\n user experience, the game will automatically call EOS_Connect_CreateDeviceId to create new\n Device ID pseudo-account and then login the local user into it. Consecutive game starts will\n thus automatically login the user to their locally persisted Device ID account.\n\n The user starts playing anonymously using the Device ID login type and makes significant game progress.\n Later, they login using an external account that they have already used previously for the\n same game perhaps on another platform, or another game owned by the same organization.\n In such case, EOS_Connect_Login will automatically login the user to their existing account\n linking keychain and create automatically a new empty product user for this product.\n\n In order for the user to use their existing previously created keychain and have the locally\n created Device ID login reference to that keychain instead, the user's current product user\n needs to be moved to be under that keychain so that their existing game progression will be\n preserved. To do so, the game can call EOS_Connect_TransferDeviceIdAccount to transfer the\n Device ID login and the product user associated with it into the other keychain that has real\n external user account(s) linked to it. Note that it is important that the game either automatically\n checks that the other product user does not have any meaningful progression data, or otherwise\n will prompt the user to make the choice on which game progression to preserve and which can\n be discarded permanently. The other product user will be discarded permanently and cannot be\n recovered, so it is very important that the user is guided to make the right choice to avoid\n accidental loss of all game progression.\n\n @see EOS_Connect_Login\n @see EOS_Connect_CreateDeviceId\n\n @param Options structure containing the logged in product users and specifying which one will be preserved.\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the transfer operation completes, either successfully or in error."] pub fn EOS_Connect_TransferDeviceIdAccount (Handle : EOS_HConnect , Options : * const EOS_Connect_TransferDeviceIdAccountOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnTransferDeviceIdAccountCallback) ; } extern "C" { # [doc = " Retrieve the equivalent Product User IDs from a list of external account IDs from supported account providers.\n The values will be cached and retrievable through EOS_Connect_GetExternalAccountMapping.\n\n @note A common use case is to query other users who are connected through the same account system as the local user.\n Queries using external account IDs of another account system may not be available, depending on the account system specifics.\n\n @param Options structure containing a list of external account IDs, in string form, to query for the Product User ID representation.\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the query operation completes, either successfully or in error."] pub fn EOS_Connect_QueryExternalAccountMappings (Handle : EOS_HConnect , Options : * const EOS_Connect_QueryExternalAccountMappingsOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnQueryExternalAccountMappingsCallback) ; } extern "C" { # [doc = " Retrieve the equivalent external account mappings from a list of Product User IDs.\n\n The values will be cached and retrievable via EOS_Connect_GetProductUserIdMapping, EOS_Connect_CopyProductUserExternalAccountByIndex,\n EOS_Connect_CopyProductUserExternalAccountByAccountType or EOS_Connect_CopyProductUserExternalAccountByAccountId.\n\n @see EOS_Connect_ExternalAccountInfo\n @see EOS_Connect_GetProductUserExternalAccountCount\n @see EOS_Connect_GetProductUserIdMapping\n @see EOS_Connect_CopyProductUserExternalAccountByIndex\n @see EOS_Connect_CopyProductUserExternalAccountByAccountType\n @see EOS_Connect_CopyProductUserExternalAccountByAccountId\n @see EOS_Connect_CopyProductUserInfo\n\n @param Options structure containing a list of Product User IDs to query for the external account representation.\n @param ClientData arbitrary data that is passed back to you in the CompletionDelegate.\n @param CompletionDelegate a callback that is fired when the query operation completes, either successfully or in error."] pub fn EOS_Connect_QueryProductUserIdMappings (Handle : EOS_HConnect , Options : * const EOS_Connect_QueryProductUserIdMappingsOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnQueryProductUserIdMappingsCallback) ; } extern "C" { # [doc = " Fetch a Product User ID that maps to an external account ID cached from a previous query.\n\n @param Options structure containing the local user and target external account ID.\n\n @return The Product User ID, previously retrieved from the backend service, for the given target external account."] pub fn EOS_Connect_GetExternalAccountMapping (Handle : EOS_HConnect , Options : * const EOS_Connect_GetExternalAccountMappingsOptions) -> EOS_ProductUserId ; } extern "C" { # [doc = " Fetch an external account ID, in string form, that maps to a given Product User ID.\n\n @param Options structure containing the local user and target Product User ID.\n @param OutBuffer The buffer into which the external account ID data should be written. The buffer must be long enough to hold a string of EOS_CONNECT_EXTERNAL_ACCOUNT_ID_MAX_LENGTH.\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer.\n\n @return An EOS_EResult that indicates the external account ID was copied into the OutBuffer.\n         EOS_Success if the information is available and passed out in OutUserInfo.\n         EOS_InvalidParameters if you pass a null pointer for the out parameter.\n         EOS_NotFound if the mapping doesn't exist or hasn't been queried yet.\n         EOS_LimitExceeded if the OutBuffer is not large enough to receive the external account ID. InOutBufferLength contains the required minimum length to perform the operation successfully."] pub fn EOS_Connect_GetProductUserIdMapping (Handle : EOS_HConnect , Options : * const EOS_Connect_GetProductUserIdMappingOptions , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } extern "C" { # [doc = " Fetch the number of linked external accounts for a Product User ID.\n\n @param Options The Options associated with retrieving the external account info count.\n\n @see EOS_Connect_CopyProductUserExternalAccountByIndex\n\n @return Number of external accounts or 0 otherwise."] pub fn EOS_Connect_GetProductUserExternalAccountCount (Handle : EOS_HConnect , Options : * const EOS_Connect_GetProductUserExternalAccountCountOptions) -> u32 ; } extern "C" { # [doc = " Fetch information about an external account linked to a Product User ID.\n On a successful call, the caller must release the returned structure using the EOS_Connect_ExternalAccountInfo_Release API.\n\n @param Options Structure containing the target index.\n @param OutExternalAccountInfo The external account info data for the user with given index.\n\n @see EOS_Connect_ExternalAccountInfo_Release\n\n @return An EOS_EResult that indicates the external account data was copied into the OutExternalAccountInfo.\n         EOS_Success if the information is available and passed out in OutExternalAccountInfo.\n         EOS_InvalidParameters if you pass a null pointer for the out parameter.\n         EOS_NotFound if the account data doesn't exist or hasn't been queried yet."] pub fn EOS_Connect_CopyProductUserExternalAccountByIndex (Handle : EOS_HConnect , Options : * const EOS_Connect_CopyProductUserExternalAccountByIndexOptions , OutExternalAccountInfo : * mut * mut EOS_Connect_ExternalAccountInfo) -> EOS_EResult ; } extern "C" { # [doc = " Fetch information about an external account of a specific type linked to a Product User ID.\n On a successful call, the caller must release the returned structure using the EOS_Connect_ExternalAccountInfo_Release API.\n\n @param Options Structure containing the target external account type.\n @param OutExternalAccountInfo The external account info data for the user with given external account type.\n\n @see EOS_Connect_ExternalAccountInfo_Release\n\n @return An EOS_EResult that indicates the external account data was copied into the OutExternalAccountInfo.\n         EOS_Success if the information is available and passed out in OutExternalAccountInfo.\n         EOS_InvalidParameters if you pass a null pointer for the out parameter.\n         EOS_NotFound if the account data doesn't exist or hasn't been queried yet."] pub fn EOS_Connect_CopyProductUserExternalAccountByAccountType (Handle : EOS_HConnect , Options : * const EOS_Connect_CopyProductUserExternalAccountByAccountTypeOptions , OutExternalAccountInfo : * mut * mut EOS_Connect_ExternalAccountInfo) -> EOS_EResult ; } extern "C" { # [doc = " Fetch information about an external account linked to a Product User ID.\n On a successful call, the caller must release the returned structure using the EOS_Connect_ExternalAccountInfo_Release API.\n\n @param Options Structure containing the target external account ID.\n @param OutExternalAccountInfo The external account info data for the user with given external account ID.\n\n @see EOS_Connect_ExternalAccountInfo_Release\n\n @return An EOS_EResult that indicates the external account data was copied into the OutExternalAccountInfo.\n         EOS_Success if the information is available and passed out in OutExternalAccountInfo.\n         EOS_InvalidParameters if you pass a null pointer for the out parameter.\n         EOS_NotFound if the account data doesn't exist or hasn't been queried yet."] pub fn EOS_Connect_CopyProductUserExternalAccountByAccountId (Handle : EOS_HConnect , Options : * const EOS_Connect_CopyProductUserExternalAccountByAccountIdOptions , OutExternalAccountInfo : * mut * mut EOS_Connect_ExternalAccountInfo) -> EOS_EResult ; } extern "C" { # [doc = " Fetch information about a Product User, using the external account that they most recently logged in with as the reference.\n On a successful call, the caller must release the returned structure using the EOS_Connect_ExternalAccountInfo_Release API.\n\n @param Options Structure containing the target external account ID.\n @param OutExternalAccountInfo The external account info data last logged in for the user.\n\n @see EOS_Connect_ExternalAccountInfo_Release\n\n @return An EOS_EResult that indicates the external account data was copied into the OutExternalAccountInfo.\n         EOS_Success if the information is available and passed out in OutExternalAccountInfo.\n         EOS_InvalidParameters if you pass a null pointer for the out parameter.\n         EOS_NotFound if the account data doesn't exist or hasn't been queried yet."] pub fn EOS_Connect_CopyProductUserInfo (Handle : EOS_HConnect , Options : * const EOS_Connect_CopyProductUserInfoOptions , OutExternalAccountInfo : * mut * mut EOS_Connect_ExternalAccountInfo) -> EOS_EResult ; } extern "C" { # [doc = " Fetch the number of product users that are logged in.\n\n @return the number of product users logged in."] pub fn EOS_Connect_GetLoggedInUsersCount (Handle : EOS_HConnect) -> i32 ; } extern "C" { # [doc = " Fetch a Product User ID that is logged in. This Product User ID is in the Epic Online Services namespace.\n\n @param Index an index into the list of logged in users. If the index is out of bounds, the returned Product User ID will be invalid.\n\n @return the Product User ID associated with the index passed."] pub fn EOS_Connect_GetLoggedInUserByIndex (Handle : EOS_HConnect , Index : i32) -> EOS_ProductUserId ; } extern "C" { # [doc = " Fetches the login status for an Product User ID.  This Product User ID is considered logged in as long as the underlying access token has not expired.\n\n @param LocalUserId the Product User ID of the user being queried.\n\n @return the enum value of a user's login status."] pub fn EOS_Connect_GetLoginStatus (Handle : EOS_HConnect , LocalUserId : EOS_ProductUserId) -> EOS_ELoginStatus ; } extern "C" { # [doc = " Register to receive upcoming authentication expiration notifications.\n Notification is approximately 10 minutes prior to expiration.\n Call EOS_Connect_Login again with valid third party credentials to refresh access.\n\n @note must call RemoveNotifyAuthExpiration to remove the notification.\n\n @param Options structure containing the API version of the callback to use.\n @param ClientData arbitrary data that is passed back to you in the callback.\n @param Notification a callback that is fired when the authentication is about to expire.\n\n @return handle representing the registered callback."] pub fn EOS_Connect_AddNotifyAuthExpiration (Handle : EOS_HConnect , Options : * const EOS_Connect_AddNotifyAuthExpirationOptions , ClientData : * mut :: std :: os :: raw :: c_void , Notification : EOS_Connect_OnAuthExpirationCallback) -> EOS_NotificationId ; } extern "C" { # [doc = " Unregister from receiving expiration notifications.\n\n @param InId handle representing the registered callback."] pub fn EOS_Connect_RemoveNotifyAuthExpiration (Handle : EOS_HConnect , InId : EOS_NotificationId) ; } extern "C" { # [doc = " Register to receive user login status updates.\n @note must call RemoveNotifyLoginStatusChanged to remove the notification.\n\n @param Options structure containing the API version of the callback to use.\n @param ClientData arbitrary data that is passed back to you in the callback.\n @param Notification a callback that is fired when the login status for a user changes.\n\n @return handle representing the registered callback."] pub fn EOS_Connect_AddNotifyLoginStatusChanged (Handle : EOS_HConnect , Options : * const EOS_Connect_AddNotifyLoginStatusChangedOptions , ClientData : * mut :: std :: os :: raw :: c_void , Notification : EOS_Connect_OnLoginStatusChangedCallback) -> EOS_NotificationId ; } extern "C" { # [doc = " Unregister from receiving user login status updates.\n\n @param InId handle representing the registered callback."] pub fn EOS_Connect_RemoveNotifyLoginStatusChanged (Handle : EOS_HConnect , InId : EOS_NotificationId) ; } extern "C" { # [doc = " Fetches an ID token for a Product User ID.\n\n @param Options Structure containing information about the ID token to copy.\n @param OutIdToken The ID token for the given user, if it exists and is valid; use EOS_Connect_IdToken_Release when finished.\n\n @see EOS_Connect_IdToken_Release\n\n @return EOS_Success if the information is available and passed out in OutIdToken.\n         EOS_InvalidParameters if you pass a null pointer for the out parameter.\n         EOS_NotFound if the ID token is not found or expired."] pub fn EOS_Connect_CopyIdToken (Handle : EOS_HConnect , Options : * const EOS_Connect_CopyIdTokenOptions , OutIdToken : * mut * mut EOS_Connect_IdToken) -> EOS_EResult ; } extern "C" { # [doc = " Verify a given ID token for authenticity and validity.\n\n @param Options structure containing information about the ID token to verify.\n @param ClientData arbitrary data that is passed back to you in the callback.\n @param CompletionDelegate a callback that is fired when the operation completes, either successfully or in error."] pub fn EOS_Connect_VerifyIdToken (Handle : EOS_HConnect , Options : * const EOS_Connect_VerifyIdTokenOptions , ClientData : * mut :: std :: os :: raw :: c_void , CompletionDelegate : EOS_Connect_OnVerifyIdTokenCallback) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_AchievementsHandle { _unused : [u8 ; 0] , } pub type EOS_HAchievements = * mut EOS_AchievementsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_QueryDefinitionsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub EpicUserId_DEPRECATED : EOS_EpicAccountId , pub HiddenAchievementIds_DEPRECATED : * mut * const :: std :: os :: raw :: c_char , pub HiddenAchievementsCount_DEPRECATED : u32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_QueryDefinitionsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_QueryDefinitionsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_QueryDefinitionsOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_QueryDefinitionsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_QueryDefinitionsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_QueryDefinitionsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryDefinitionsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryDefinitionsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EpicUserId_DEPRECATED) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryDefinitionsOptions) , "::" , stringify ! (EpicUserId_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HiddenAchievementIds_DEPRECATED) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryDefinitionsOptions) , "::" , stringify ! (HiddenAchievementIds_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HiddenAchievementsCount_DEPRECATED) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryDefinitionsOptions) , "::" , stringify ! (HiddenAchievementsCount_DEPRECATED))) ; } pub type EOS_Achievements_QueryDefinitionsOptions = _tagEOS_Achievements_QueryDefinitionsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_StatThresholds { pub ApiVersion : i32 , pub Name : * const :: std :: os :: raw :: c_char , pub Threshold : i32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_StatThresholds () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_StatThresholds > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_StatThresholds > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_StatThresholds))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_StatThresholds > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_StatThresholds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_StatThresholds) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Name) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_StatThresholds) , "::" , stringify ! (Name))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Threshold) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_StatThresholds) , "::" , stringify ! (Threshold))) ; } pub type EOS_Achievements_StatThresholds = _tagEOS_Achievements_StatThresholds ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_PlayerStatInfo { pub ApiVersion : i32 , pub Name : * const :: std :: os :: raw :: c_char , pub CurrentValue : i32 , pub ThresholdValue : i32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_PlayerStatInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_PlayerStatInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_PlayerStatInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_PlayerStatInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_PlayerStatInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_PlayerStatInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerStatInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Name) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerStatInfo) , "::" , stringify ! (Name))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CurrentValue) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerStatInfo) , "::" , stringify ! (CurrentValue))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ThresholdValue) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerStatInfo) , "::" , stringify ! (ThresholdValue))) ; } pub type EOS_Achievements_PlayerStatInfo = _tagEOS_Achievements_PlayerStatInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_DefinitionV2 { pub ApiVersion : i32 , pub AchievementId : * const :: std :: os :: raw :: c_char , pub UnlockedDisplayName : * const :: std :: os :: raw :: c_char , pub UnlockedDescription : * const :: std :: os :: raw :: c_char , pub LockedDisplayName : * const :: std :: os :: raw :: c_char , pub LockedDescription : * const :: std :: os :: raw :: c_char , pub FlavorText : * const :: std :: os :: raw :: c_char , pub UnlockedIconURL : * const :: std :: os :: raw :: c_char , pub LockedIconURL : * const :: std :: os :: raw :: c_char , pub bIsHidden : EOS_Bool , pub StatThresholdsCount : u32 , pub StatThresholds : * const EOS_Achievements_StatThresholds , } # [test] fn bindgen_test_layout__tagEOS_Achievements_DefinitionV2 () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_DefinitionV2 > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_DefinitionV2 > () , 88usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_DefinitionV2))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_DefinitionV2 > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_DefinitionV2))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (AchievementId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnlockedDisplayName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (UnlockedDisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnlockedDescription) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (UnlockedDescription))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LockedDisplayName) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (LockedDisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LockedDescription) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (LockedDescription))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FlavorText) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (FlavorText))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnlockedIconURL) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (UnlockedIconURL))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LockedIconURL) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (LockedIconURL))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsHidden) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (bIsHidden))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatThresholdsCount) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (StatThresholdsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatThresholds) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_DefinitionV2) , "::" , stringify ! (StatThresholds))) ; } pub type EOS_Achievements_DefinitionV2 = _tagEOS_Achievements_DefinitionV2 ; extern "C" { # [doc = " Release the memory associated with EOS_Achievements_DefinitionV2. This must be called on data retrieved from\n EOS_Achievements_CopyAchievementDefinitionV2ByIndex or EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId.\n\n @param AchievementDefinition - The achievement definition to release.\n\n @see EOS_Achievements_DefinitionV2\n @see EOS_Achievements_CopyAchievementDefinitionV2ByIndex\n @see EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId"] pub fn EOS_Achievements_DefinitionV2_Release (AchievementDefinition : * mut EOS_Achievements_DefinitionV2) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_GetAchievementDefinitionCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_GetAchievementDefinitionCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_GetAchievementDefinitionCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_GetAchievementDefinitionCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_GetAchievementDefinitionCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_GetAchievementDefinitionCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_GetAchievementDefinitionCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_GetAchievementDefinitionCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Achievements_GetAchievementDefinitionCountOptions = _tagEOS_Achievements_GetAchievementDefinitionCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions { pub ApiVersion : i32 , pub AchievementIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions) , "::" , stringify ! (AchievementIndex))) ; } pub type EOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions = _tagEOS_Achievements_CopyAchievementDefinitionV2ByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions { pub ApiVersion : i32 , pub AchievementId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions) , "::" , stringify ! (AchievementId))) ; } pub type EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions = _tagEOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo = _tagEOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo ; pub type EOS_Achievements_OnQueryDefinitionsCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Achievements_OnQueryDefinitionsCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_QueryPlayerAchievementsOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Achievements_QueryPlayerAchievementsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_QueryPlayerAchievementsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_QueryPlayerAchievementsOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_QueryPlayerAchievementsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_QueryPlayerAchievementsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_QueryPlayerAchievementsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryPlayerAchievementsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryPlayerAchievementsOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_QueryPlayerAchievementsOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Achievements_QueryPlayerAchievementsOptions = _tagEOS_Achievements_QueryPlayerAchievementsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_PlayerAchievement { pub ApiVersion : i32 , pub AchievementId : * const :: std :: os :: raw :: c_char , pub Progress : f64 , pub UnlockTime : i64 , pub StatInfoCount : i32 , pub StatInfo : * const EOS_Achievements_PlayerStatInfo , pub DisplayName : * const :: std :: os :: raw :: c_char , pub Description : * const :: std :: os :: raw :: c_char , pub IconURL : * const :: std :: os :: raw :: c_char , pub FlavorText : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Achievements_PlayerAchievement () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_PlayerAchievement > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_PlayerAchievement > () , 80usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_PlayerAchievement))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_PlayerAchievement > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_PlayerAchievement))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (AchievementId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Progress) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (Progress))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnlockTime) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (UnlockTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatInfoCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (StatInfoCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatInfo) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (StatInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Description) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (Description))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IconURL) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (IconURL))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FlavorText) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_PlayerAchievement) , "::" , stringify ! (FlavorText))) ; } pub type EOS_Achievements_PlayerAchievement = _tagEOS_Achievements_PlayerAchievement ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_GetPlayerAchievementCountOptions { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Achievements_GetPlayerAchievementCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_GetPlayerAchievementCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_GetPlayerAchievementCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_GetPlayerAchievementCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_GetPlayerAchievementCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_GetPlayerAchievementCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_GetPlayerAchievementCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_GetPlayerAchievementCountOptions) , "::" , stringify ! (UserId))) ; } pub type EOS_Achievements_GetPlayerAchievementCountOptions = _tagEOS_Achievements_GetPlayerAchievementCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyPlayerAchievementByIndexOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub AchievementIndex : u32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyPlayerAchievementByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyPlayerAchievementByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyPlayerAchievementByIndexOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyPlayerAchievementByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByIndexOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByIndexOptions) , "::" , stringify ! (AchievementIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByIndexOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Achievements_CopyPlayerAchievementByIndexOptions = _tagEOS_Achievements_CopyPlayerAchievementByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub AchievementId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions) , "::" , stringify ! (AchievementId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Achievements_CopyPlayerAchievementByAchievementIdOptions = _tagEOS_Achievements_CopyPlayerAchievementByAchievementIdOptions ; extern "C" { # [doc = " Release the memory associated with a player achievement. This must be called on data retrieved from\n EOS_Achievements_CopyPlayerAchievementByIndex or EOS_Achievements_CopyPlayerAchievementByAchievementId.\n\n @param Achievement - The achievement data to release.\n\n @see EOS_Achievements_PlayerAchievement\n @see EOS_Achievements_CopyPlayerAchievementByIndex\n @see EOS_Achievements_CopyPlayerAchievementByAchievementId"] pub fn EOS_Achievements_PlayerAchievement_Release (Achievement : * mut EOS_Achievements_PlayerAchievement) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub UserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo) , "::" , stringify ! (UserId))) ; } pub type EOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo = _tagEOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo ; pub type EOS_Achievements_OnQueryPlayerAchievementsCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Achievements_OnQueryPlayerAchievementsCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_UnlockAchievementsOptions { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , pub AchievementIds : * mut * const :: std :: os :: raw :: c_char , pub AchievementsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_UnlockAchievementsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_UnlockAchievementsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_UnlockAchievementsOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_UnlockAchievementsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_UnlockAchievementsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_UnlockAchievementsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_UnlockAchievementsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_UnlockAchievementsOptions) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementIds) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_UnlockAchievementsOptions) , "::" , stringify ! (AchievementIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementsCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_UnlockAchievementsOptions) , "::" , stringify ! (AchievementsCount))) ; } pub type EOS_Achievements_UnlockAchievementsOptions = _tagEOS_Achievements_UnlockAchievementsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub UserId : EOS_ProductUserId , pub AchievementsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementsCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo) , "::" , stringify ! (AchievementsCount))) ; } pub type EOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo = _tagEOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo ; pub type EOS_Achievements_OnUnlockAchievementsCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Achievements_OnUnlockAchievementsCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Achievements_AddNotifyAchievementsUnlockedV2Options = _tagEOS_Achievements_AddNotifyAchievementsUnlockedV2Options ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info { pub ClientData : * mut :: std :: os :: raw :: c_void , pub UserId : EOS_ProductUserId , pub AchievementId : * const :: std :: os :: raw :: c_char , pub UnlockTime : i64 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info) , "::" , stringify ! (AchievementId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnlockTime) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info) , "::" , stringify ! (UnlockTime))) ; } pub type EOS_Achievements_OnAchievementsUnlockedCallbackV2Info = _tagEOS_Achievements_OnAchievementsUnlockedCallbackV2Info ; pub type EOS_Achievements_OnAchievementsUnlockedCallbackV2 = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Achievements_OnAchievementsUnlockedCallbackV2Info) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_Definition { pub ApiVersion : i32 , pub AchievementId : * const :: std :: os :: raw :: c_char , pub DisplayName : * const :: std :: os :: raw :: c_char , pub Description : * const :: std :: os :: raw :: c_char , pub LockedDisplayName : * const :: std :: os :: raw :: c_char , pub LockedDescription : * const :: std :: os :: raw :: c_char , pub HiddenDescription : * const :: std :: os :: raw :: c_char , pub CompletionDescription : * const :: std :: os :: raw :: c_char , pub UnlockedIconId : * const :: std :: os :: raw :: c_char , pub LockedIconId : * const :: std :: os :: raw :: c_char , pub bIsHidden : EOS_Bool , pub StatThresholdsCount : i32 , pub StatThresholds : * const EOS_Achievements_StatThresholds , } # [test] fn bindgen_test_layout__tagEOS_Achievements_Definition () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_Definition > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_Definition > () , 96usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_Definition))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_Definition > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_Definition))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (AchievementId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DisplayName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (DisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Description) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (Description))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LockedDisplayName) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (LockedDisplayName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LockedDescription) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (LockedDescription))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HiddenDescription) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (HiddenDescription))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CompletionDescription) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (CompletionDescription))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnlockedIconId) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (UnlockedIconId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LockedIconId) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (LockedIconId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsHidden) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (bIsHidden))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatThresholdsCount) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (StatThresholdsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatThresholds) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_Definition) , "::" , stringify ! (StatThresholds))) ; } pub type EOS_Achievements_Definition = _tagEOS_Achievements_Definition ; extern "C" { # [doc = " Release the memory associated with achievement definitions. This must be called on data retrieved from\n EOS_Achievements_CopyAchievementDefinitionByIndex or EOS_Achievements_CopyAchievementDefinitionByAchievementId.\n\n @param AchievementDefinition - The achievement definition to release.\n\n @see EOS_Achievements_Definition\n @see EOS_Achievements_CopyAchievementDefinitionByIndex\n @see EOS_Achievements_CopyAchievementDefinitionByAchievementId"] pub fn EOS_Achievements_Definition_Release (AchievementDefinition : * mut EOS_Achievements_Definition) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions { pub ApiVersion : i32 , pub AchievementIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions) , "::" , stringify ! (AchievementIndex))) ; } pub type EOS_Achievements_CopyAchievementDefinitionByIndexOptions = _tagEOS_Achievements_CopyAchievementDefinitionByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions { pub ApiVersion : i32 , pub AchievementId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions) , "::" , stringify ! (AchievementId))) ; } pub type EOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions = _tagEOS_Achievements_CopyAchievementDefinitionByAchievementIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_UnlockedAchievement { pub ApiVersion : i32 , pub AchievementId : * const :: std :: os :: raw :: c_char , pub UnlockTime : i64 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_UnlockedAchievement () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_UnlockedAchievement > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_UnlockedAchievement > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_UnlockedAchievement))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_UnlockedAchievement > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_UnlockedAchievement))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_UnlockedAchievement) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_UnlockedAchievement) , "::" , stringify ! (AchievementId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UnlockTime) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_UnlockedAchievement) , "::" , stringify ! (UnlockTime))) ; } pub type EOS_Achievements_UnlockedAchievement = _tagEOS_Achievements_UnlockedAchievement ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_GetUnlockedAchievementCountOptions { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Achievements_GetUnlockedAchievementCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_GetUnlockedAchievementCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_GetUnlockedAchievementCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_GetUnlockedAchievementCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_GetUnlockedAchievementCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_GetUnlockedAchievementCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_GetUnlockedAchievementCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_GetUnlockedAchievementCountOptions) , "::" , stringify ! (UserId))) ; } pub type EOS_Achievements_GetUnlockedAchievementCountOptions = _tagEOS_Achievements_GetUnlockedAchievementCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , pub AchievementIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions) , "::" , stringify ! (AchievementIndex))) ; } pub type EOS_Achievements_CopyUnlockedAchievementByIndexOptions = _tagEOS_Achievements_CopyUnlockedAchievementByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , pub AchievementId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions) , "::" , stringify ! (AchievementId))) ; } pub type EOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions = _tagEOS_Achievements_CopyUnlockedAchievementByAchievementIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Achievements_AddNotifyAchievementsUnlockedOptions = _tagEOS_Achievements_AddNotifyAchievementsUnlockedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub UserId : EOS_ProductUserId , pub AchievementsCount : u32 , pub AchievementIds : * mut * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementsCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo) , "::" , stringify ! (AchievementsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AchievementIds) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo) , "::" , stringify ! (AchievementIds))) ; } pub type EOS_Achievements_OnAchievementsUnlockedCallbackInfo = _tagEOS_Achievements_OnAchievementsUnlockedCallbackInfo ; pub type EOS_Achievements_OnAchievementsUnlockedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Achievements_OnAchievementsUnlockedCallbackInfo) > ; extern "C" { # [doc = " Release the memory associated with an unlocked achievement. This must be called on data retrieved from\n EOS_Achievements_CopyUnlockedAchievementByIndex or EOS_Achievements_CopyUnlockedAchievementByAchievementId.\n\n @param Achievement - The unlocked achievement data to release.\n\n @see EOS_Achievements_UnlockedAchievement\n @see EOS_Achievements_CopyUnlockedAchievementByIndex\n @see EOS_Achievements_CopyUnlockedAchievementByAchievementId"] pub fn EOS_Achievements_UnlockedAchievement_Release (Achievement : * mut EOS_Achievements_UnlockedAchievement) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_StatsHandle { _unused : [u8 ; 0] , } pub type EOS_HStats = * mut EOS_StatsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_IngestData { pub ApiVersion : i32 , pub StatName : * const :: std :: os :: raw :: c_char , pub IngestAmount : i32 , } # [test] fn bindgen_test_layout__tagEOS_Stats_IngestData () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_IngestData > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_IngestData > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_IngestData))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_IngestData > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_IngestData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestData) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestData) , "::" , stringify ! (StatName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IngestAmount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestData) , "::" , stringify ! (IngestAmount))) ; } pub type EOS_Stats_IngestData = _tagEOS_Stats_IngestData ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_IngestStatOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Stats : * const EOS_Stats_IngestData , pub StatsCount : u32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Stats_IngestStatOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_IngestStatOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_IngestStatOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_IngestStatOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_IngestStatOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_IngestStatOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Stats) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatOptions) , "::" , stringify ! (Stats))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatsCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatOptions) , "::" , stringify ! (StatsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Stats_IngestStatOptions = _tagEOS_Stats_IngestStatOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_IngestStatCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Stats_IngestStatCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_IngestStatCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_IngestStatCompleteCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_IngestStatCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_IngestStatCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_IngestStatCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatCompleteCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_IngestStatCompleteCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Stats_IngestStatCompleteCallbackInfo = _tagEOS_Stats_IngestStatCompleteCallbackInfo ; pub type EOS_Stats_OnIngestStatCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Stats_IngestStatCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_QueryStatsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub StartTime : i64 , pub EndTime : i64 , pub StatNames : * mut * const :: std :: os :: raw :: c_char , pub StatNamesCount : u32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Stats_QueryStatsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_QueryStatsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_QueryStatsOptions > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_QueryStatsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_QueryStatsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_QueryStatsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_QueryStatsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_QueryStatsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StartTime) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_QueryStatsOptions) , "::" , stringify ! (StartTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EndTime) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_QueryStatsOptions) , "::" , stringify ! (EndTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatNames) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_QueryStatsOptions) , "::" , stringify ! (StatNames))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatNamesCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_QueryStatsOptions) , "::" , stringify ! (StatNamesCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_QueryStatsOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Stats_QueryStatsOptions = _tagEOS_Stats_QueryStatsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_Stat { pub ApiVersion : i32 , pub Name : * const :: std :: os :: raw :: c_char , pub StartTime : i64 , pub EndTime : i64 , pub Value : i32 , } # [test] fn bindgen_test_layout__tagEOS_Stats_Stat () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_Stat > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_Stat > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_Stat))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_Stat > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_Stat))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_Stat) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Name) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_Stat) , "::" , stringify ! (Name))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StartTime) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_Stat) , "::" , stringify ! (StartTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EndTime) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_Stat) , "::" , stringify ! (EndTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Value) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_Stat) , "::" , stringify ! (Value))) ; } pub type EOS_Stats_Stat = _tagEOS_Stats_Stat ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_GetStatCountOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Stats_GetStatCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_GetStatCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_GetStatCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_GetStatCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_GetStatCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_GetStatCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_GetStatCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_GetStatCountOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Stats_GetStatCountOptions = _tagEOS_Stats_GetStatCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_CopyStatByIndexOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub StatIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Stats_CopyStatByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_CopyStatByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_CopyStatByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_CopyStatByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_CopyStatByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_CopyStatByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_CopyStatByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_CopyStatByIndexOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_CopyStatByIndexOptions) , "::" , stringify ! (StatIndex))) ; } pub type EOS_Stats_CopyStatByIndexOptions = _tagEOS_Stats_CopyStatByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_CopyStatByNameOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub Name : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Stats_CopyStatByNameOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_CopyStatByNameOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_CopyStatByNameOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_CopyStatByNameOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_CopyStatByNameOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_CopyStatByNameOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_CopyStatByNameOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_CopyStatByNameOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Name) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_CopyStatByNameOptions) , "::" , stringify ! (Name))) ; } pub type EOS_Stats_CopyStatByNameOptions = _tagEOS_Stats_CopyStatByNameOptions ; extern "C" { # [doc = " Release the memory associated with a stat. This must be called on data retrieved from EOS_Stats_CopyStatByIndex or EOS_Stats_CopyStatByName.\n\n @param Stat - The stat data to release.\n\n @see EOS_Stats_Stat\n @see EOS_Stats_CopyStatByIndex\n @see EOS_Stats_CopyStatByName"] pub fn EOS_Stats_Stat_Release (Stat : * mut EOS_Stats_Stat) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Stats_OnQueryStatsCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Stats_OnQueryStatsCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Stats_OnQueryStatsCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Stats_OnQueryStatsCompleteCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Stats_OnQueryStatsCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Stats_OnQueryStatsCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Stats_OnQueryStatsCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_OnQueryStatsCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_OnQueryStatsCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_OnQueryStatsCompleteCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Stats_OnQueryStatsCompleteCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Stats_OnQueryStatsCompleteCallbackInfo = _tagEOS_Stats_OnQueryStatsCompleteCallbackInfo ; pub type EOS_Stats_OnQueryStatsCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Stats_OnQueryStatsCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_LeaderboardsHandle { _unused : [u8 ; 0] , } pub type EOS_HLeaderboards = * mut EOS_LeaderboardsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions { pub ApiVersion : i32 , pub StartTime : i64 , pub EndTime : i64 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StartTime) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions) , "::" , stringify ! (StartTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EndTime) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions) , "::" , stringify ! (EndTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Leaderboards_QueryLeaderboardDefinitionsOptions = _tagEOS_Leaderboards_QueryLeaderboardDefinitionsOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " An enumeration of the different leaderboard aggregation types."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ELeaderboardAggregation { EOS_LA_Min = 0 , EOS_LA_Max = 1 , EOS_LA_Sum = 2 , EOS_LA_Latest = 3 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_Definition { pub ApiVersion : i32 , pub LeaderboardId : * const :: std :: os :: raw :: c_char , pub StatName : * const :: std :: os :: raw :: c_char , pub Aggregation : EOS_ELeaderboardAggregation , pub StartTime : i64 , pub EndTime : i64 , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_Definition () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_Definition > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_Definition > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_Definition))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_Definition > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_Definition))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_Definition) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeaderboardId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_Definition) , "::" , stringify ! (LeaderboardId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_Definition) , "::" , stringify ! (StatName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Aggregation) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_Definition) , "::" , stringify ! (Aggregation))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StartTime) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_Definition) , "::" , stringify ! (StartTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EndTime) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_Definition) , "::" , stringify ! (EndTime))) ; } pub type EOS_Leaderboards_Definition = _tagEOS_Leaderboards_Definition ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Leaderboards_GetLeaderboardDefinitionCountOptions = _tagEOS_Leaderboards_GetLeaderboardDefinitionCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions { pub ApiVersion : i32 , pub LeaderboardIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeaderboardIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions) , "::" , stringify ! (LeaderboardIndex))) ; } pub type EOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions = _tagEOS_Leaderboards_CopyLeaderboardDefinitionByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions { pub ApiVersion : i32 , pub LeaderboardId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeaderboardId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions) , "::" , stringify ! (LeaderboardId))) ; } pub type EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions = _tagEOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdOptions ; extern "C" { # [doc = " Release the memory associated with a leaderboard definition. This must be called on data retrieved from\n EOS_Leaderboards_CopyLeaderboardDefinitionByIndex or EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId.\n\n @param LeaderboardDefinition - The Leaderboard definition to release.\n\n @see EOS_Leaderboards_Definition\n @see EOS_Leaderboards_CopyLeaderboardDefinitionByIndex\n @see EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId"] pub fn EOS_Leaderboards_Definition_Release (LeaderboardDefinition : * mut EOS_Leaderboards_Definition) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo = _tagEOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo ; pub type EOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Leaderboards_OnQueryLeaderboardDefinitionsCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_UserScoresQueryStatInfo { pub ApiVersion : i32 , pub StatName : * const :: std :: os :: raw :: c_char , pub Aggregation : EOS_ELeaderboardAggregation , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_UserScoresQueryStatInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_UserScoresQueryStatInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_UserScoresQueryStatInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_UserScoresQueryStatInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_UserScoresQueryStatInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_UserScoresQueryStatInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_UserScoresQueryStatInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_UserScoresQueryStatInfo) , "::" , stringify ! (StatName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Aggregation) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_UserScoresQueryStatInfo) , "::" , stringify ! (Aggregation))) ; } pub type EOS_Leaderboards_UserScoresQueryStatInfo = _tagEOS_Leaderboards_UserScoresQueryStatInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions { pub ApiVersion : i32 , pub UserIds : * const EOS_ProductUserId , pub UserIdsCount : u32 , pub StatInfo : * const EOS_Leaderboards_UserScoresQueryStatInfo , pub StatInfoCount : u32 , pub StartTime : i64 , pub EndTime : i64 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions > () , 64usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserIds) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (UserIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserIdsCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (UserIdsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatInfo) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (StatInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatInfoCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (StatInfoCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StartTime) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (StartTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EndTime) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (EndTime))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Leaderboards_QueryLeaderboardUserScoresOptions = _tagEOS_Leaderboards_QueryLeaderboardUserScoresOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_LeaderboardUserScore { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , pub Score : i32 , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_LeaderboardUserScore () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_LeaderboardUserScore > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_LeaderboardUserScore > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_LeaderboardUserScore))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_LeaderboardUserScore > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_LeaderboardUserScore))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardUserScore) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardUserScore) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Score) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardUserScore) , "::" , stringify ! (Score))) ; } pub type EOS_Leaderboards_LeaderboardUserScore = _tagEOS_Leaderboards_LeaderboardUserScore ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions { pub ApiVersion : i32 , pub StatName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions) , "::" , stringify ! (StatName))) ; } pub type EOS_Leaderboards_GetLeaderboardUserScoreCountOptions = _tagEOS_Leaderboards_GetLeaderboardUserScoreCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions { pub ApiVersion : i32 , pub LeaderboardUserScoreIndex : u32 , pub StatName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeaderboardUserScoreIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions) , "::" , stringify ! (LeaderboardUserScoreIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions) , "::" , stringify ! (StatName))) ; } pub type EOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions = _tagEOS_Leaderboards_CopyLeaderboardUserScoreByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , pub StatName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . StatName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions) , "::" , stringify ! (StatName))) ; } pub type EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions = _tagEOS_Leaderboards_CopyLeaderboardUserScoreByUserIdOptions ; extern "C" { # [doc = " Release the memory associated with leaderboard user score. This must be called on data retrieved from\n EOS_Leaderboards_CopyLeaderboardUserScoreByIndex or EOS_Leaderboards_CopyLeaderboardUserScoreByUserId.\n\n @param LeaderboardUserScore - The Leaderboard user score to release.\n\n @see EOS_Leaderboards_LeaderboardUserScore\n @see EOS_Leaderboards_CopyLeaderboardUserScoreByIndex\n @see EOS_Leaderboards_CopyLeaderboardUserScoreByUserId"] pub fn EOS_Leaderboards_LeaderboardUserScore_Release (LeaderboardUserScore : * mut EOS_Leaderboards_LeaderboardUserScore) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo = _tagEOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo ; pub type EOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Leaderboards_OnQueryLeaderboardUserScoresCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_QueryLeaderboardRanksOptions { pub ApiVersion : i32 , pub LeaderboardId : * const :: std :: os :: raw :: c_char , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_QueryLeaderboardRanksOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_QueryLeaderboardRanksOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_QueryLeaderboardRanksOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardRanksOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_QueryLeaderboardRanksOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardRanksOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardRanksOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeaderboardId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardRanksOptions) , "::" , stringify ! (LeaderboardId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_QueryLeaderboardRanksOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Leaderboards_QueryLeaderboardRanksOptions = _tagEOS_Leaderboards_QueryLeaderboardRanksOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_LeaderboardRecord { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , pub Rank : u32 , pub Score : i32 , pub UserDisplayName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_LeaderboardRecord () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_LeaderboardRecord > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_LeaderboardRecord > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_LeaderboardRecord))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_LeaderboardRecord > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_LeaderboardRecord))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardRecord) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardRecord) , "::" , stringify ! (UserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Rank) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardRecord) , "::" , stringify ! (Rank))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Score) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardRecord) , "::" , stringify ! (Score))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserDisplayName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_LeaderboardRecord) , "::" , stringify ! (UserDisplayName))) ; } pub type EOS_Leaderboards_LeaderboardRecord = _tagEOS_Leaderboards_LeaderboardRecord ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_GetLeaderboardRecordCountOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_GetLeaderboardRecordCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_GetLeaderboardRecordCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_GetLeaderboardRecordCountOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardRecordCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_GetLeaderboardRecordCountOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardRecordCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_GetLeaderboardRecordCountOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_Leaderboards_GetLeaderboardRecordCountOptions = _tagEOS_Leaderboards_GetLeaderboardRecordCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions { pub ApiVersion : i32 , pub LeaderboardRecordIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LeaderboardRecordIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions) , "::" , stringify ! (LeaderboardRecordIndex))) ; } pub type EOS_Leaderboards_CopyLeaderboardRecordByIndexOptions = _tagEOS_Leaderboards_CopyLeaderboardRecordByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions { pub ApiVersion : i32 , pub UserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions) , "::" , stringify ! (UserId))) ; } pub type EOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions = _tagEOS_Leaderboards_CopyLeaderboardRecordByUserIdOptions ; extern "C" { # [doc = " Release the memory associated with leaderboard record. This must be called on data retrieved from\n EOS_Leaderboards_CopyLeaderboardRecordByIndex or EOS_Leaderboards_CopyLeaderboardRecordByUserId.\n\n @param LeaderboardRecord - The Leaderboard record to release.\n\n @see EOS_Leaderboards_LeaderboardRecord\n @see EOS_Leaderboards_CopyLeaderboardRecordByIndex\n @see EOS_Leaderboards_CopyLeaderboardRecordByUserId"] pub fn EOS_Leaderboards_LeaderboardRecord_Release (LeaderboardRecord : * mut EOS_Leaderboards_LeaderboardRecord) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo = _tagEOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo ; pub type EOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Leaderboards_OnQueryLeaderboardRanksCompleteCallbackInfo) > ; extern "C" { # [doc = " Do not use. Alias to the previous API name for backwards compatibility in compilation."] pub fn EOS_Leaderboards_LeaderboardDefinition_Release (LeaderboardDefinition : * mut EOS_Leaderboards_Definition) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_ModsHandle { _unused : [u8 ; 0] , } pub type EOS_HMods = * mut EOS_ModsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mod_Identifier { pub ApiVersion : i32 , pub NamespaceId : * const :: std :: os :: raw :: c_char , pub ItemId : * const :: std :: os :: raw :: c_char , pub ArtifactId : * const :: std :: os :: raw :: c_char , pub Title : * const :: std :: os :: raw :: c_char , pub Version : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Mod_Identifier () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mod_Identifier > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mod_Identifier > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mod_Identifier))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mod_Identifier > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mod_Identifier))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mod_Identifier) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . NamespaceId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mod_Identifier) , "::" , stringify ! (NamespaceId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ItemId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mod_Identifier) , "::" , stringify ! (ItemId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ArtifactId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mod_Identifier) , "::" , stringify ! (ArtifactId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Title) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mod_Identifier) , "::" , stringify ! (Title))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Version) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mod_Identifier) , "::" , stringify ! (Version))) ; } pub type EOS_Mod_Identifier = _tagEOS_Mod_Identifier ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_InstallModOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub Mod : * const EOS_Mod_Identifier , pub bRemoveAfterExit : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_Mods_InstallModOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_InstallModOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_InstallModOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_InstallModOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_InstallModOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_InstallModOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mod) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModOptions) , "::" , stringify ! (Mod))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bRemoveAfterExit) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModOptions) , "::" , stringify ! (bRemoveAfterExit))) ; } pub type EOS_Mods_InstallModOptions = _tagEOS_Mods_InstallModOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_InstallModCallbackInfo { pub ResultCode : EOS_EResult , pub LocalUserId : EOS_EpicAccountId , pub ClientData : * mut :: std :: os :: raw :: c_void , pub Mod : * const EOS_Mod_Identifier , } # [test] fn bindgen_test_layout__tagEOS_Mods_InstallModCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_InstallModCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_InstallModCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_InstallModCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_InstallModCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_InstallModCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mod) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_InstallModCallbackInfo) , "::" , stringify ! (Mod))) ; } pub type EOS_Mods_InstallModCallbackInfo = _tagEOS_Mods_InstallModCallbackInfo ; pub type EOS_Mods_OnInstallModCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Mods_InstallModCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_UninstallModOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub Mod : * const EOS_Mod_Identifier , } # [test] fn bindgen_test_layout__tagEOS_Mods_UninstallModOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_UninstallModOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_UninstallModOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_UninstallModOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_UninstallModOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_UninstallModOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UninstallModOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UninstallModOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mod) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UninstallModOptions) , "::" , stringify ! (Mod))) ; } pub type EOS_Mods_UninstallModOptions = _tagEOS_Mods_UninstallModOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_UninstallModCallbackInfo { pub ResultCode : EOS_EResult , pub LocalUserId : EOS_EpicAccountId , pub ClientData : * mut :: std :: os :: raw :: c_void , pub Mod : * const EOS_Mod_Identifier , } # [test] fn bindgen_test_layout__tagEOS_Mods_UninstallModCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_UninstallModCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_UninstallModCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_UninstallModCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_UninstallModCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_UninstallModCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UninstallModCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UninstallModCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UninstallModCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mod) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UninstallModCallbackInfo) , "::" , stringify ! (Mod))) ; } pub type EOS_Mods_UninstallModCallbackInfo = _tagEOS_Mods_UninstallModCallbackInfo ; pub type EOS_Mods_OnUninstallModCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Mods_UninstallModCallbackInfo) > ; # [repr (i32)] # [non_exhaustive] # [doc = " The type of mod enumeration."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EModEnumerationType { EOS_MET_INSTALLED = 0 , EOS_MET_ALL_AVAILABLE = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_EnumerateModsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub Type : EOS_EModEnumerationType , } # [test] fn bindgen_test_layout__tagEOS_Mods_EnumerateModsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_EnumerateModsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_EnumerateModsOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_EnumerateModsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_EnumerateModsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_EnumerateModsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_EnumerateModsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_EnumerateModsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_EnumerateModsOptions) , "::" , stringify ! (Type))) ; } pub type EOS_Mods_EnumerateModsOptions = _tagEOS_Mods_EnumerateModsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_EnumerateModsCallbackInfo { pub ResultCode : EOS_EResult , pub LocalUserId : EOS_EpicAccountId , pub ClientData : * mut :: std :: os :: raw :: c_void , pub Type : EOS_EModEnumerationType , } # [test] fn bindgen_test_layout__tagEOS_Mods_EnumerateModsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_EnumerateModsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_EnumerateModsCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_EnumerateModsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_EnumerateModsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_EnumerateModsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_EnumerateModsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_EnumerateModsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_EnumerateModsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_EnumerateModsCallbackInfo) , "::" , stringify ! (Type))) ; } pub type EOS_Mods_EnumerateModsCallbackInfo = _tagEOS_Mods_EnumerateModsCallbackInfo ; pub type EOS_Mods_OnEnumerateModsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Mods_EnumerateModsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_CopyModInfoOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub Type : EOS_EModEnumerationType , } # [test] fn bindgen_test_layout__tagEOS_Mods_CopyModInfoOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_CopyModInfoOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_CopyModInfoOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_CopyModInfoOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_CopyModInfoOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_CopyModInfoOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_CopyModInfoOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_CopyModInfoOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_CopyModInfoOptions) , "::" , stringify ! (Type))) ; } pub type EOS_Mods_CopyModInfoOptions = _tagEOS_Mods_CopyModInfoOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_ModInfo { pub ApiVersion : i32 , pub ModsCount : i32 , pub Mods : * mut EOS_Mod_Identifier , pub Type : EOS_EModEnumerationType , } # [test] fn bindgen_test_layout__tagEOS_Mods_ModInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_ModInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_ModInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_ModInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_ModInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_ModInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_ModInfo) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ModsCount) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_ModInfo) , "::" , stringify ! (ModsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mods) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_ModInfo) , "::" , stringify ! (Mods))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Type) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_ModInfo) , "::" , stringify ! (Type))) ; } pub type EOS_Mods_ModInfo = _tagEOS_Mods_ModInfo ; extern "C" { # [doc = " Release the memory associated with an EOS_Mods_ModInfo structure and its sub-objects. This must be called on data retrieved from EOS_Mods_CopyModInfo.\n\n @param ModInfo the info structure to be release\n\n @see EOS_Mods_ModInfo\n @see EOS_Mods_CopyModInfo"] pub fn EOS_Mods_ModInfo_Release (ModInfo : * mut EOS_Mods_ModInfo) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_UpdateModOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_EpicAccountId , pub Mod : * const EOS_Mod_Identifier , } # [test] fn bindgen_test_layout__tagEOS_Mods_UpdateModOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_UpdateModOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_UpdateModOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_UpdateModOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_UpdateModOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_UpdateModOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UpdateModOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UpdateModOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mod) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UpdateModOptions) , "::" , stringify ! (Mod))) ; } pub type EOS_Mods_UpdateModOptions = _tagEOS_Mods_UpdateModOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Mods_UpdateModCallbackInfo { pub ResultCode : EOS_EResult , pub LocalUserId : EOS_EpicAccountId , pub ClientData : * mut :: std :: os :: raw :: c_void , pub Mod : * const EOS_Mod_Identifier , } # [test] fn bindgen_test_layout__tagEOS_Mods_UpdateModCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Mods_UpdateModCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Mods_UpdateModCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Mods_UpdateModCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Mods_UpdateModCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Mods_UpdateModCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UpdateModCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UpdateModCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UpdateModCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mod) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Mods_UpdateModCallbackInfo) , "::" , stringify ! (Mod))) ; } pub type EOS_Mods_UpdateModCallbackInfo = _tagEOS_Mods_UpdateModCallbackInfo ; pub type EOS_Mods_OnUpdateModCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Mods_UpdateModCallbackInfo) > ; # [doc = " Arbitrary data that is a unique local identifier for\n a single remote client or peer.\n\n Typically this is a pointer to an object describing the\n player, but it can be anything that is locally unique."] pub type EOS_AntiCheatCommon_ClientHandle = * mut :: std :: os :: raw :: c_void ; # [repr (i32)] # [non_exhaustive] # [doc = " Flags describing the type of a remote client"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonClientType { EOS_ACCCT_ProtectedClient = 0 , EOS_ACCCT_UnprotectedClient = 1 , EOS_ACCCT_AIBot = 2 , } # [repr (i32)] # [non_exhaustive] # [doc = " Flags describing the platform of a remote client, if known"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonClientPlatform { EOS_ACCCP_Unknown = 0 , EOS_ACCCP_Windows = 1 , EOS_ACCCP_Mac = 2 , EOS_ACCCP_Linux = 3 , EOS_ACCCP_Xbox = 4 , EOS_ACCCP_PlayStation = 5 , EOS_ACCCP_Nintendo = 6 , EOS_ACCCP_iOS = 7 , EOS_ACCCP_Android = 8 , } # [repr (i32)] # [non_exhaustive] # [doc = " Anti-cheat action values. Applicable to both clients and remote peers."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonClientAction { EOS_ACCCA_Invalid = 0 , EOS_ACCCA_RemovePlayer = 1 , } # [repr (i32)] # [non_exhaustive] # [doc = " Anti-cheat action reasons. Applicable to both clients and remote peers."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonClientActionReason { EOS_ACCCAR_Invalid = 0 , EOS_ACCCAR_InternalError = 1 , EOS_ACCCAR_InvalidMessage = 2 , EOS_ACCCAR_AuthenticationFailed = 3 , EOS_ACCCAR_NullClient = 4 , EOS_ACCCAR_HeartbeatTimeout = 5 , EOS_ACCCAR_ClientViolation = 6 , EOS_ACCCAR_BackendViolation = 7 , EOS_ACCCAR_TemporaryCooldown = 8 , EOS_ACCCAR_TemporaryBanned = 9 , EOS_ACCCAR_PermanentBanned = 10 , } # [repr (i32)] # [non_exhaustive] # [doc = " The client/peer's anti-cheat authentication status"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonClientAuthStatus { EOS_ACCCAS_Invalid = 0 , EOS_ACCCAS_LocalAuthComplete = 1 , EOS_ACCCAS_RemoteAuthComplete = 2 , } # [repr (i32)] # [non_exhaustive] # [doc = " Flags describing a remote client. These can be updated during a play session"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonClientFlags { EOS_ACCCF_None = 0 , EOS_ACCCF_Admin = 1 , } # [repr (i32)] # [non_exhaustive] # [doc = " Flags describing the input device used by a remote client, if known. These can be updated during a play session."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonClientInput { EOS_ACCCI_Unknown = 0 , EOS_ACCCI_MouseKeyboard = 1 , EOS_ACCCI_Gamepad = 2 , EOS_ACCCI_TouchInput = 3 , } # [repr (i32)] # [non_exhaustive] # [doc = " Types supported for custom gameplay behavior events.\n These have a considerable impact on performance"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonEventType { EOS_ACCET_Invalid = 0 , EOS_ACCET_GameEvent = 1 , EOS_ACCET_PlayerEvent = 2 , } # [repr (i32)] # [non_exhaustive] # [doc = " Types supported for custom gameplay behavior event parameters"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonEventParamType { EOS_ACCEPT_Invalid = 0 , EOS_ACCEPT_ClientHandle = 1 , EOS_ACCEPT_String = 2 , EOS_ACCEPT_UInt32 = 3 , EOS_ACCEPT_Int32 = 4 , EOS_ACCEPT_UInt64 = 5 , EOS_ACCEPT_Int64 = 6 , EOS_ACCEPT_Vector3f = 7 , EOS_ACCEPT_Quat = 8 , } # [repr (i32)] # [non_exhaustive] # [doc = " Details of a player's movement state"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonPlayerMovementState { EOS_ACCPMS_None = 0 , EOS_ACCPMS_Crouching = 1 , EOS_ACCPMS_Prone = 2 , EOS_ACCPMS_Mounted = 3 , EOS_ACCPMS_Swimming = 4 , EOS_ACCPMS_Falling = 5 , EOS_ACCPMS_Flying = 6 , EOS_ACCPMS_OnLadder = 7 , } # [repr (i32)] # [non_exhaustive] # [doc = " The source of a damage event"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonPlayerTakeDamageSource { EOS_ACCPTDS_None = 0 , EOS_ACCPTDS_Player = 1 , EOS_ACCPTDS_NonPlayerCharacter = 2 , EOS_ACCPTDS_World = 3 , } # [repr (i32)] # [non_exhaustive] # [doc = " Type of damage applied in a damage event"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonPlayerTakeDamageType { EOS_ACCPTDT_None = 0 , EOS_ACCPTDT_PointDamage = 1 , EOS_ACCPTDT_RadialDamage = 2 , EOS_ACCPTDT_DamageOverTime = 3 , } # [repr (i32)] # [non_exhaustive] # [doc = " The result of a damage event, if any"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatCommonPlayerTakeDamageResult { EOS_ACCPTDR_None = 0 , EOS_ACCPTDR_Downed = 1 , EOS_ACCPTDR_Eliminated = 2 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_Vec3f { pub x : f32 , pub y : f32 , pub z : f32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_Vec3f () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_Vec3f > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_Vec3f > () , 12usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_Vec3f))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_Vec3f > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_Vec3f))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . x) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_Vec3f) , "::" , stringify ! (x))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . y) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_Vec3f) , "::" , stringify ! (y))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . z) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_Vec3f) , "::" , stringify ! (z))) ; } pub type EOS_AntiCheatCommon_Vec3f = _tagEOS_AntiCheatCommon_Vec3f ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_Quat { pub w : f32 , pub x : f32 , pub y : f32 , pub z : f32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_Quat () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_Quat > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_Quat > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_Quat))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_Quat > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_Quat))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . w) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_Quat) , "::" , stringify ! (w))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . x) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_Quat) , "::" , stringify ! (x))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . y) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_Quat) , "::" , stringify ! (y))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . z) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_Quat) , "::" , stringify ! (z))) ; } pub type EOS_AntiCheatCommon_Quat = _tagEOS_AntiCheatCommon_Quat ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub MessageData : * const :: std :: os :: raw :: c_void , pub MessageDataSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MessageData) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo) , "::" , stringify ! (MessageData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MessageDataSizeBytes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo) , "::" , stringify ! (MessageDataSizeBytes))) ; } pub type EOS_AntiCheatCommon_OnMessageToClientCallbackInfo = _tagEOS_AntiCheatCommon_OnMessageToClientCallbackInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub ClientAction : EOS_EAntiCheatCommonClientAction , pub ActionReasonCode : EOS_EAntiCheatCommonClientActionReason , pub ActionReasonDetailsString : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientAction) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo) , "::" , stringify ! (ClientAction))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ActionReasonCode) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo) , "::" , stringify ! (ActionReasonCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ActionReasonDetailsString) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo) , "::" , stringify ! (ActionReasonDetailsString))) ; } pub type EOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo = _tagEOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub ClientAuthStatus : EOS_EAntiCheatCommonClientAuthStatus , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientAuthStatus) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo) , "::" , stringify ! (ClientAuthStatus))) ; } pub type EOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo = _tagEOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_SetClientDetailsOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub ClientFlags : EOS_EAntiCheatCommonClientFlags , pub ClientInputMethod : EOS_EAntiCheatCommonClientInput , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_SetClientDetailsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_SetClientDetailsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_SetClientDetailsOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_SetClientDetailsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_SetClientDetailsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_SetClientDetailsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_SetClientDetailsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_SetClientDetailsOptions) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientFlags) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_SetClientDetailsOptions) , "::" , stringify ! (ClientFlags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientInputMethod) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_SetClientDetailsOptions) , "::" , stringify ! (ClientInputMethod))) ; } pub type EOS_AntiCheatCommon_SetClientDetailsOptions = _tagEOS_AntiCheatCommon_SetClientDetailsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_SetGameSessionIdOptions { pub ApiVersion : i32 , pub GameSessionId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_SetGameSessionIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_SetGameSessionIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_SetGameSessionIdOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_SetGameSessionIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_SetGameSessionIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_SetGameSessionIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_SetGameSessionIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . GameSessionId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_SetGameSessionIdOptions) , "::" , stringify ! (GameSessionId))) ; } pub type EOS_AntiCheatCommon_SetGameSessionIdOptions = _tagEOS_AntiCheatCommon_SetGameSessionIdOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_RegisterEventParamDef { pub ParamName : * const :: std :: os :: raw :: c_char , pub ParamType : EOS_EAntiCheatCommonEventParamType , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_RegisterEventParamDef () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_RegisterEventParamDef > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_RegisterEventParamDef > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventParamDef))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_RegisterEventParamDef > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventParamDef))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParamName) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventParamDef) , "::" , stringify ! (ParamName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParamType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventParamDef) , "::" , stringify ! (ParamType))) ; } pub type EOS_AntiCheatCommon_RegisterEventParamDef = _tagEOS_AntiCheatCommon_RegisterEventParamDef ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_RegisterEventOptions { pub ApiVersion : i32 , pub EventId : u32 , pub EventName : * const :: std :: os :: raw :: c_char , pub EventType : EOS_EAntiCheatCommonEventType , pub ParamDefsCount : u32 , pub ParamDefs : * const EOS_AntiCheatCommon_RegisterEventParamDef , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_RegisterEventOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_RegisterEventOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_RegisterEventOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_RegisterEventOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EventId) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions) , "::" , stringify ! (EventId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EventName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions) , "::" , stringify ! (EventName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EventType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions) , "::" , stringify ! (EventType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParamDefsCount) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions) , "::" , stringify ! (ParamDefsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParamDefs) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_RegisterEventOptions) , "::" , stringify ! (ParamDefs))) ; } pub type EOS_AntiCheatCommon_RegisterEventOptions = _tagEOS_AntiCheatCommon_RegisterEventOptions ; # [repr (C)] # [derive (Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogEventParamPair { pub ParamValueType : EOS_EAntiCheatCommonEventParamType , pub ParamValue : _tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union _tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1 { pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub String : * const :: std :: os :: raw :: c_char , pub UInt32 : u32 , pub Int32 : i32 , pub UInt64 : u64 , pub Int64 : i64 , pub Vec3f : EOS_AntiCheatCommon_Vec3f , pub Quat : EOS_AntiCheatCommon_Quat , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1 () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1 > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1 > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1 > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . String) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (String))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UInt32) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (UInt32))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Int32) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (Int32))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UInt64) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (UInt64))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Int64) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (Int64))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Vec3f) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (Vec3f))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Quat) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair__bindgen_ty_1) , "::" , stringify ! (Quat))) ; } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogEventParamPair () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogEventParamPair > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogEventParamPair > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogEventParamPair > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParamValueType) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair) , "::" , stringify ! (ParamValueType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParamValue) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventParamPair) , "::" , stringify ! (ParamValue))) ; } pub type EOS_AntiCheatCommon_LogEventParamPair = _tagEOS_AntiCheatCommon_LogEventParamPair ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogEventOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub EventId : u32 , pub ParamsCount : u32 , pub Params : * const EOS_AntiCheatCommon_LogEventParamPair , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogEventOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogEventOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogEventOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogEventOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogEventOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventOptions) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . EventId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventOptions) , "::" , stringify ! (EventId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParamsCount) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventOptions) , "::" , stringify ! (ParamsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Params) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogEventOptions) , "::" , stringify ! (Params))) ; } pub type EOS_AntiCheatCommon_LogEventOptions = _tagEOS_AntiCheatCommon_LogEventOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogGameRoundStartOptions { pub ApiVersion : i32 , pub SessionIdentifier : * const :: std :: os :: raw :: c_char , pub LevelName : * const :: std :: os :: raw :: c_char , pub ModeName : * const :: std :: os :: raw :: c_char , pub RoundTimeSeconds : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogGameRoundStartOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogGameRoundStartOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogGameRoundStartOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundStartOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogGameRoundStartOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundStartOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundStartOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SessionIdentifier) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundStartOptions) , "::" , stringify ! (SessionIdentifier))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LevelName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundStartOptions) , "::" , stringify ! (LevelName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ModeName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundStartOptions) , "::" , stringify ! (ModeName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoundTimeSeconds) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundStartOptions) , "::" , stringify ! (RoundTimeSeconds))) ; } pub type EOS_AntiCheatCommon_LogGameRoundStartOptions = _tagEOS_AntiCheatCommon_LogGameRoundStartOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogGameRoundEndOptions { pub ApiVersion : i32 , pub WinningTeamId : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogGameRoundEndOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogGameRoundEndOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogGameRoundEndOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundEndOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogGameRoundEndOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundEndOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundEndOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . WinningTeamId) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogGameRoundEndOptions) , "::" , stringify ! (WinningTeamId))) ; } pub type EOS_AntiCheatCommon_LogGameRoundEndOptions = _tagEOS_AntiCheatCommon_LogGameRoundEndOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerSpawnOptions { pub ApiVersion : i32 , pub SpawnedPlayerHandle : EOS_AntiCheatCommon_ClientHandle , pub TeamId : u32 , pub CharacterId : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerSpawnOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerSpawnOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerSpawnOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerSpawnOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerSpawnOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerSpawnOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerSpawnOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SpawnedPlayerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerSpawnOptions) , "::" , stringify ! (SpawnedPlayerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TeamId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerSpawnOptions) , "::" , stringify ! (TeamId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CharacterId) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerSpawnOptions) , "::" , stringify ! (CharacterId))) ; } pub type EOS_AntiCheatCommon_LogPlayerSpawnOptions = _tagEOS_AntiCheatCommon_LogPlayerSpawnOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerDespawnOptions { pub ApiVersion : i32 , pub DespawnedPlayerHandle : EOS_AntiCheatCommon_ClientHandle , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerDespawnOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerDespawnOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerDespawnOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerDespawnOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerDespawnOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerDespawnOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerDespawnOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DespawnedPlayerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerDespawnOptions) , "::" , stringify ! (DespawnedPlayerHandle))) ; } pub type EOS_AntiCheatCommon_LogPlayerDespawnOptions = _tagEOS_AntiCheatCommon_LogPlayerDespawnOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerReviveOptions { pub ApiVersion : i32 , pub RevivedPlayerHandle : EOS_AntiCheatCommon_ClientHandle , pub ReviverPlayerHandle : EOS_AntiCheatCommon_ClientHandle , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerReviveOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerReviveOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerReviveOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerReviveOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerReviveOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerReviveOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerReviveOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RevivedPlayerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerReviveOptions) , "::" , stringify ! (RevivedPlayerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReviverPlayerHandle) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerReviveOptions) , "::" , stringify ! (ReviverPlayerHandle))) ; } pub type EOS_AntiCheatCommon_LogPlayerReviveOptions = _tagEOS_AntiCheatCommon_LogPlayerReviveOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerTickOptions { pub ApiVersion : i32 , pub PlayerHandle : EOS_AntiCheatCommon_ClientHandle , pub PlayerPosition : * mut EOS_AntiCheatCommon_Vec3f , pub PlayerViewRotation : * mut EOS_AntiCheatCommon_Quat , pub bIsPlayerViewZoomed : EOS_Bool , pub PlayerHealth : f32 , pub PlayerMovementState : EOS_EAntiCheatCommonPlayerMovementState , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerTickOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerTickOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerTickOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerTickOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions) , "::" , stringify ! (PlayerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerPosition) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions) , "::" , stringify ! (PlayerPosition))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerViewRotation) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions) , "::" , stringify ! (PlayerViewRotation))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsPlayerViewZoomed) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions) , "::" , stringify ! (bIsPlayerViewZoomed))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerHealth) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions) , "::" , stringify ! (PlayerHealth))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerMovementState) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTickOptions) , "::" , stringify ! (PlayerMovementState))) ; } pub type EOS_AntiCheatCommon_LogPlayerTickOptions = _tagEOS_AntiCheatCommon_LogPlayerTickOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerUseWeaponData { pub PlayerHandle : EOS_AntiCheatCommon_ClientHandle , pub PlayerPosition : * mut EOS_AntiCheatCommon_Vec3f , pub PlayerViewRotation : * mut EOS_AntiCheatCommon_Quat , pub bIsPlayerViewZoomed : EOS_Bool , pub bIsMeleeAttack : EOS_Bool , pub WeaponName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerUseWeaponData () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerUseWeaponData > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerUseWeaponData > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerUseWeaponData > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerHandle) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData) , "::" , stringify ! (PlayerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerPosition) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData) , "::" , stringify ! (PlayerPosition))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerViewRotation) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData) , "::" , stringify ! (PlayerViewRotation))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsPlayerViewZoomed) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData) , "::" , stringify ! (bIsPlayerViewZoomed))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsMeleeAttack) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData) , "::" , stringify ! (bIsMeleeAttack))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . WeaponName) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponData) , "::" , stringify ! (WeaponName))) ; } pub type EOS_AntiCheatCommon_LogPlayerUseWeaponData = _tagEOS_AntiCheatCommon_LogPlayerUseWeaponData ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions { pub ApiVersion : i32 , pub UseWeaponData : * mut EOS_AntiCheatCommon_LogPlayerUseWeaponData , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UseWeaponData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions) , "::" , stringify ! (UseWeaponData))) ; } pub type EOS_AntiCheatCommon_LogPlayerUseWeaponOptions = _tagEOS_AntiCheatCommon_LogPlayerUseWeaponOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions { pub ApiVersion : i32 , pub PlayerHandle : EOS_AntiCheatCommon_ClientHandle , pub AbilityId : u32 , pub AbilityDurationMs : u32 , pub AbilityCooldownMs : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions) , "::" , stringify ! (PlayerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AbilityId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions) , "::" , stringify ! (AbilityId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AbilityDurationMs) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions) , "::" , stringify ! (AbilityDurationMs))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AbilityCooldownMs) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions) , "::" , stringify ! (AbilityCooldownMs))) ; } pub type EOS_AntiCheatCommon_LogPlayerUseAbilityOptions = _tagEOS_AntiCheatCommon_LogPlayerUseAbilityOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions { pub ApiVersion : i32 , pub VictimPlayerHandle : EOS_AntiCheatCommon_ClientHandle , pub VictimPlayerPosition : * mut EOS_AntiCheatCommon_Vec3f , pub VictimPlayerViewRotation : * mut EOS_AntiCheatCommon_Quat , pub AttackerPlayerHandle : EOS_AntiCheatCommon_ClientHandle , pub AttackerPlayerPosition : * mut EOS_AntiCheatCommon_Vec3f , pub AttackerPlayerViewRotation : * mut EOS_AntiCheatCommon_Quat , pub bIsHitscanAttack : EOS_Bool , pub bHasLineOfSight : EOS_Bool , pub bIsCriticalHit : EOS_Bool , pub HitBoneId_DEPRECATED : u32 , pub DamageTaken : f32 , pub HealthRemaining : f32 , pub DamageSource : EOS_EAntiCheatCommonPlayerTakeDamageSource , pub DamageType : EOS_EAntiCheatCommonPlayerTakeDamageType , pub DamageResult : EOS_EAntiCheatCommonPlayerTakeDamageResult , pub PlayerUseWeaponData : * mut EOS_AntiCheatCommon_LogPlayerUseWeaponData , pub TimeSincePlayerUseWeaponMs : u32 , pub DamagePosition : * mut EOS_AntiCheatCommon_Vec3f , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions > () , 120usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . VictimPlayerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (VictimPlayerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . VictimPlayerPosition) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (VictimPlayerPosition))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . VictimPlayerViewRotation) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (VictimPlayerViewRotation))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttackerPlayerHandle) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (AttackerPlayerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttackerPlayerPosition) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (AttackerPlayerPosition))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AttackerPlayerViewRotation) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (AttackerPlayerViewRotation))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsHitscanAttack) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (bIsHitscanAttack))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bHasLineOfSight) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (bHasLineOfSight))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsCriticalHit) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (bIsCriticalHit))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HitBoneId_DEPRECATED) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (HitBoneId_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DamageTaken) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (DamageTaken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . HealthRemaining) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (HealthRemaining))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DamageSource) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (DamageSource))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DamageType) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (DamageType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DamageResult) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (DamageResult))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PlayerUseWeaponData) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (PlayerUseWeaponData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TimeSincePlayerUseWeaponMs) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (TimeSincePlayerUseWeaponMs))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DamagePosition) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions) , "::" , stringify ! (DamagePosition))) ; } pub type EOS_AntiCheatCommon_LogPlayerTakeDamageOptions = _tagEOS_AntiCheatCommon_LogPlayerTakeDamageOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_AntiCheatClientHandle { _unused : [u8 ; 0] , } pub type EOS_HAntiCheatClient = * mut EOS_AntiCheatClientHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " Operating modes"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatClientMode { EOS_ACCM_Invalid = 0 , EOS_ACCM_ClientServer = 1 , EOS_ACCM_PeerToPeer = 2 , } # [repr (i32)] # [non_exhaustive] # [doc = " Anti-cheat integrity violation types"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EAntiCheatClientViolationType { EOS_ACCVT_Invalid = 0 , EOS_ACCVT_IntegrityCatalogNotFound = 1 , EOS_ACCVT_IntegrityCatalogError = 2 , EOS_ACCVT_IntegrityCatalogCertificateRevoked = 3 , EOS_ACCVT_IntegrityCatalogMissingMainExecutable = 4 , EOS_ACCVT_GameFileMismatch = 5 , EOS_ACCVT_RequiredGameFileNotFound = 6 , EOS_ACCVT_UnknownGameFileForbidden = 7 , EOS_ACCVT_SystemFileUntrusted = 8 , EOS_ACCVT_ForbiddenModuleLoaded = 9 , EOS_ACCVT_CorruptedMemory = 10 , EOS_ACCVT_ForbiddenToolDetected = 11 , EOS_ACCVT_InternalAntiCheatViolation = 12 , EOS_ACCVT_CorruptedNetworkMessageFlow = 13 , EOS_ACCVT_VirtualMachineNotAllowed = 14 , EOS_ACCVT_ForbiddenSystemConfiguration = 15 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub MessageData : * const :: std :: os :: raw :: c_void , pub MessageDataSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MessageData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo) , "::" , stringify ! (MessageData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . MessageDataSizeBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo) , "::" , stringify ! (MessageDataSizeBytes))) ; } pub type EOS_AntiCheatClient_OnMessageToServerCallbackInfo = _tagEOS_AntiCheatClient_OnMessageToServerCallbackInfo ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub ViolationType : EOS_EAntiCheatClientViolationType , pub ViolationMessage : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ViolationType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo) , "::" , stringify ! (ViolationType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ViolationMessage) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo) , "::" , stringify ! (ViolationMessage))) ; } pub type EOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo = _tagEOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo ; pub type EOS_AntiCheatClient_OnMessageToServerCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatClient_OnMessageToServerCallbackInfo) > ; pub type EOS_AntiCheatClient_OnClientIntegrityViolatedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatClient_OnClientIntegrityViolatedCallbackInfo) > ; pub type EOS_AntiCheatClient_OnMessageToPeerCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatCommon_OnMessageToClientCallbackInfo) > ; pub type EOS_AntiCheatClient_OnPeerActionRequiredCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo) > ; pub type EOS_AntiCheatClient_OnPeerAuthStatusChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatClient_AddNotifyMessageToServerOptions = _tagEOS_AntiCheatClient_AddNotifyMessageToServerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatClient_AddNotifyMessageToPeerOptions = _tagEOS_AntiCheatClient_AddNotifyMessageToPeerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions = _tagEOS_AntiCheatClient_AddNotifyPeerActionRequiredOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions = _tagEOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions = _tagEOS_AntiCheatClient_AddNotifyClientIntegrityViolatedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_BeginSessionOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Mode : EOS_EAntiCheatClientMode , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_BeginSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_BeginSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_BeginSessionOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_BeginSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_BeginSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_BeginSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_BeginSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_BeginSessionOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Mode) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_BeginSessionOptions) , "::" , stringify ! (Mode))) ; } pub type EOS_AntiCheatClient_BeginSessionOptions = _tagEOS_AntiCheatClient_BeginSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_EndSessionOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_EndSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_EndSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_EndSessionOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_EndSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_EndSessionOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_EndSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_EndSessionOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatClient_EndSessionOptions = _tagEOS_AntiCheatClient_EndSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions { pub ApiVersion : i32 , pub PathToBinFile : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PathToBinFile) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions) , "::" , stringify ! (PathToBinFile))) ; } pub type EOS_AntiCheatClient_AddExternalIntegrityCatalogOptions = _tagEOS_AntiCheatClient_AddExternalIntegrityCatalogOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions { pub ApiVersion : i32 , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions) , "::" , stringify ! (Data))) ; } pub type EOS_AntiCheatClient_ReceiveMessageFromServerOptions = _tagEOS_AntiCheatClient_ReceiveMessageFromServerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions { pub ApiVersion : i32 , pub DataLengthBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions) , "::" , stringify ! (DataLengthBytes))) ; } pub type EOS_AntiCheatClient_GetProtectMessageOutputLengthOptions = _tagEOS_AntiCheatClient_GetProtectMessageOutputLengthOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_ProtectMessageOptions { pub ApiVersion : i32 , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , pub OutBufferSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_ProtectMessageOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_ProtectMessageOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_ProtectMessageOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_ProtectMessageOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_ProtectMessageOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_ProtectMessageOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ProtectMessageOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ProtectMessageOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ProtectMessageOptions) , "::" , stringify ! (Data))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutBufferSizeBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ProtectMessageOptions) , "::" , stringify ! (OutBufferSizeBytes))) ; } pub type EOS_AntiCheatClient_ProtectMessageOptions = _tagEOS_AntiCheatClient_ProtectMessageOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_UnprotectMessageOptions { pub ApiVersion : i32 , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , pub OutBufferSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_UnprotectMessageOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_UnprotectMessageOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_UnprotectMessageOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_UnprotectMessageOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_UnprotectMessageOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_UnprotectMessageOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_UnprotectMessageOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_UnprotectMessageOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_UnprotectMessageOptions) , "::" , stringify ! (Data))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutBufferSizeBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_UnprotectMessageOptions) , "::" , stringify ! (OutBufferSizeBytes))) ; } pub type EOS_AntiCheatClient_UnprotectMessageOptions = _tagEOS_AntiCheatClient_UnprotectMessageOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_RegisterPeerOptions { pub ApiVersion : i32 , pub PeerHandle : EOS_AntiCheatCommon_ClientHandle , pub ClientType : EOS_EAntiCheatCommonClientType , pub ClientPlatform : EOS_EAntiCheatCommonClientPlatform , pub AuthenticationTimeout : u32 , pub AccountId_DEPRECATED : * const :: std :: os :: raw :: c_char , pub IpAddress : * const :: std :: os :: raw :: c_char , pub PeerProductUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_RegisterPeerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_RegisterPeerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_RegisterPeerOptions > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_RegisterPeerOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PeerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (PeerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (ClientType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientPlatform) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (ClientPlatform))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AuthenticationTimeout) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (AuthenticationTimeout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId_DEPRECATED) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (AccountId_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IpAddress) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (IpAddress))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PeerProductUserId) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_RegisterPeerOptions) , "::" , stringify ! (PeerProductUserId))) ; } pub type EOS_AntiCheatClient_RegisterPeerOptions = _tagEOS_AntiCheatClient_RegisterPeerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_UnregisterPeerOptions { pub ApiVersion : i32 , pub PeerHandle : EOS_AntiCheatCommon_ClientHandle , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_UnregisterPeerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_UnregisterPeerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_UnregisterPeerOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_UnregisterPeerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_UnregisterPeerOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_UnregisterPeerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_UnregisterPeerOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PeerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_UnregisterPeerOptions) , "::" , stringify ! (PeerHandle))) ; } pub type EOS_AntiCheatClient_UnregisterPeerOptions = _tagEOS_AntiCheatClient_UnregisterPeerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions { pub ApiVersion : i32 , pub PeerHandle : EOS_AntiCheatCommon_ClientHandle , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PeerHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions) , "::" , stringify ! (PeerHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions) , "::" , stringify ! (Data))) ; } pub type EOS_AntiCheatClient_ReceiveMessageFromPeerOptions = _tagEOS_AntiCheatClient_ReceiveMessageFromPeerOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatClient_PollStatusOptions { pub ApiVersion : i32 , pub OutMessageLength : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatClient_PollStatusOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatClient_PollStatusOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatClient_PollStatusOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatClient_PollStatusOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatClient_PollStatusOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatClient_PollStatusOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_PollStatusOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutMessageLength) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatClient_PollStatusOptions) , "::" , stringify ! (OutMessageLength))) ; } pub type EOS_AntiCheatClient_PollStatusOptions = _tagEOS_AntiCheatClient_PollStatusOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_AntiCheatServerHandle { _unused : [u8 ; 0] , } pub type EOS_HAntiCheatServer = * mut EOS_AntiCheatServerHandle ; pub type EOS_AntiCheatServer_OnMessageToClientCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatCommon_OnMessageToClientCallbackInfo) > ; pub type EOS_AntiCheatServer_OnClientActionRequiredCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatCommon_OnClientActionRequiredCallbackInfo) > ; pub type EOS_AntiCheatServer_OnClientAuthStatusChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_AntiCheatCommon_OnClientAuthStatusChangedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatServer_AddNotifyMessageToClientOptions = _tagEOS_AntiCheatServer_AddNotifyMessageToClientOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatServer_AddNotifyClientActionRequiredOptions = _tagEOS_AntiCheatServer_AddNotifyClientActionRequiredOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions = _tagEOS_AntiCheatServer_AddNotifyClientAuthStatusChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_BeginSessionOptions { pub ApiVersion : i32 , pub RegisterTimeoutSeconds : u32 , pub ServerName : * const :: std :: os :: raw :: c_char , pub bEnableGameplayData : EOS_Bool , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_BeginSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_BeginSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_BeginSessionOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_BeginSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_BeginSessionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_BeginSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_BeginSessionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RegisterTimeoutSeconds) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_BeginSessionOptions) , "::" , stringify ! (RegisterTimeoutSeconds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ServerName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_BeginSessionOptions) , "::" , stringify ! (ServerName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bEnableGameplayData) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_BeginSessionOptions) , "::" , stringify ! (bEnableGameplayData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_BeginSessionOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_AntiCheatServer_BeginSessionOptions = _tagEOS_AntiCheatServer_BeginSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_EndSessionOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_EndSessionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_EndSessionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_EndSessionOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_EndSessionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_EndSessionOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_EndSessionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_EndSessionOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_AntiCheatServer_EndSessionOptions = _tagEOS_AntiCheatServer_EndSessionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_RegisterClientOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub ClientType : EOS_EAntiCheatCommonClientType , pub ClientPlatform : EOS_EAntiCheatCommonClientPlatform , pub AccountId_DEPRECATED : * const :: std :: os :: raw :: c_char , pub IpAddress : * const :: std :: os :: raw :: c_char , pub UserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_RegisterClientOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_RegisterClientOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_RegisterClientOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_RegisterClientOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientType) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions) , "::" , stringify ! (ClientType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientPlatform) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions) , "::" , stringify ! (ClientPlatform))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AccountId_DEPRECATED) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions) , "::" , stringify ! (AccountId_DEPRECATED))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . IpAddress) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions) , "::" , stringify ! (IpAddress))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_RegisterClientOptions) , "::" , stringify ! (UserId))) ; } pub type EOS_AntiCheatServer_RegisterClientOptions = _tagEOS_AntiCheatServer_RegisterClientOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_UnregisterClientOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_UnregisterClientOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_UnregisterClientOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_UnregisterClientOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_UnregisterClientOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_UnregisterClientOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_UnregisterClientOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_UnregisterClientOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_UnregisterClientOptions) , "::" , stringify ! (ClientHandle))) ; } pub type EOS_AntiCheatServer_UnregisterClientOptions = _tagEOS_AntiCheatServer_UnregisterClientOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions) , "::" , stringify ! (Data))) ; } pub type EOS_AntiCheatServer_ReceiveMessageFromClientOptions = _tagEOS_AntiCheatServer_ReceiveMessageFromClientOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_SetClientNetworkStateOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub bIsNetworkActive : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_SetClientNetworkStateOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_SetClientNetworkStateOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_SetClientNetworkStateOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_SetClientNetworkStateOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_SetClientNetworkStateOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_SetClientNetworkStateOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_SetClientNetworkStateOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_SetClientNetworkStateOptions) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsNetworkActive) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_SetClientNetworkStateOptions) , "::" , stringify ! (bIsNetworkActive))) ; } pub type EOS_AntiCheatServer_SetClientNetworkStateOptions = _tagEOS_AntiCheatServer_SetClientNetworkStateOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions { pub ApiVersion : i32 , pub DataLengthBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions) , "::" , stringify ! (DataLengthBytes))) ; } pub type EOS_AntiCheatServer_GetProtectMessageOutputLengthOptions = _tagEOS_AntiCheatServer_GetProtectMessageOutputLengthOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_ProtectMessageOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , pub OutBufferSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_ProtectMessageOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_ProtectMessageOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_ProtectMessageOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_ProtectMessageOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_ProtectMessageOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_ProtectMessageOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ProtectMessageOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ProtectMessageOptions) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ProtectMessageOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ProtectMessageOptions) , "::" , stringify ! (Data))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutBufferSizeBytes) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_ProtectMessageOptions) , "::" , stringify ! (OutBufferSizeBytes))) ; } pub type EOS_AntiCheatServer_ProtectMessageOptions = _tagEOS_AntiCheatServer_ProtectMessageOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_AntiCheatServer_UnprotectMessageOptions { pub ApiVersion : i32 , pub ClientHandle : EOS_AntiCheatCommon_ClientHandle , pub DataLengthBytes : u32 , pub Data : * const :: std :: os :: raw :: c_void , pub OutBufferSizeBytes : u32 , } # [test] fn bindgen_test_layout__tagEOS_AntiCheatServer_UnprotectMessageOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_AntiCheatServer_UnprotectMessageOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_AntiCheatServer_UnprotectMessageOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_AntiCheatServer_UnprotectMessageOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_AntiCheatServer_UnprotectMessageOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_AntiCheatServer_UnprotectMessageOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_UnprotectMessageOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientHandle) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_UnprotectMessageOptions) , "::" , stringify ! (ClientHandle))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DataLengthBytes) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_UnprotectMessageOptions) , "::" , stringify ! (DataLengthBytes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_UnprotectMessageOptions) , "::" , stringify ! (Data))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . OutBufferSizeBytes) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_AntiCheatServer_UnprotectMessageOptions) , "::" , stringify ! (OutBufferSizeBytes))) ; } pub type EOS_AntiCheatServer_UnprotectMessageOptions = _tagEOS_AntiCheatServer_UnprotectMessageOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_ReportsHandle { _unused : [u8 ; 0] , } pub type EOS_HReports = * mut EOS_ReportsHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " An enumeration of the different player behavior categories that can be reported."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EPlayerReportsCategory { EOS_PRC_Invalid = 0 , EOS_PRC_Cheating = 1 , EOS_PRC_Exploiting = 2 , EOS_PRC_OffensiveProfile = 3 , EOS_PRC_VerbalAbuse = 4 , EOS_PRC_Scamming = 5 , EOS_PRC_Spamming = 6 , EOS_PRC_Other = 7 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Reports_SendPlayerBehaviorReportOptions { pub ApiVersion : i32 , pub ReporterUserId : EOS_ProductUserId , pub ReportedUserId : EOS_ProductUserId , pub Category : EOS_EPlayerReportsCategory , pub Message : * const :: std :: os :: raw :: c_char , pub Context : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Reports_SendPlayerBehaviorReportOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Reports_SendPlayerBehaviorReportOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Reports_SendPlayerBehaviorReportOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Reports_SendPlayerBehaviorReportOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReporterUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions) , "::" , stringify ! (ReporterUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReportedUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions) , "::" , stringify ! (ReportedUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Category) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions) , "::" , stringify ! (Category))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Message) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions) , "::" , stringify ! (Message))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Context) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportOptions) , "::" , stringify ! (Context))) ; } pub type EOS_Reports_SendPlayerBehaviorReportOptions = _tagEOS_Reports_SendPlayerBehaviorReportOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo = _tagEOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo ; pub type EOS_Reports_OnSendPlayerBehaviorReportCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Reports_SendPlayerBehaviorReportCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_SanctionsHandle { _unused : [u8 ; 0] , } pub type EOS_HSanctions = * mut EOS_SanctionsHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sanctions_PlayerSanction { pub ApiVersion : i32 , pub TimePlaced : i64 , pub Action : * const :: std :: os :: raw :: c_char , pub TimeExpires : i64 , pub ReferenceId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_Sanctions_PlayerSanction () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sanctions_PlayerSanction > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sanctions_PlayerSanction > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sanctions_PlayerSanction))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sanctions_PlayerSanction > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sanctions_PlayerSanction))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_PlayerSanction) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TimePlaced) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_PlayerSanction) , "::" , stringify ! (TimePlaced))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Action) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_PlayerSanction) , "::" , stringify ! (Action))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TimeExpires) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_PlayerSanction) , "::" , stringify ! (TimeExpires))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ReferenceId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_PlayerSanction) , "::" , stringify ! (ReferenceId))) ; } pub type EOS_Sanctions_PlayerSanction = _tagEOS_Sanctions_PlayerSanction ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sanctions_QueryActivePlayerSanctionsOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sanctions_QueryActivePlayerSanctionsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sanctions_QueryActivePlayerSanctionsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sanctions_QueryActivePlayerSanctionsOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sanctions_QueryActivePlayerSanctionsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Sanctions_QueryActivePlayerSanctionsOptions = _tagEOS_Sanctions_QueryActivePlayerSanctionsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo = _tagEOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo ; pub type EOS_Sanctions_OnQueryActivePlayerSanctionsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_Sanctions_QueryActivePlayerSanctionsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sanctions_GetPlayerSanctionCountOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_Sanctions_GetPlayerSanctionCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sanctions_GetPlayerSanctionCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sanctions_GetPlayerSanctionCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sanctions_GetPlayerSanctionCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sanctions_GetPlayerSanctionCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sanctions_GetPlayerSanctionCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_GetPlayerSanctionCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_GetPlayerSanctionCountOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_Sanctions_GetPlayerSanctionCountOptions = _tagEOS_Sanctions_GetPlayerSanctionCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub SanctionIndex : u32 , } # [test] fn bindgen_test_layout__tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SanctionIndex) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions) , "::" , stringify ! (SanctionIndex))) ; } pub type EOS_Sanctions_CopyPlayerSanctionByIndexOptions = _tagEOS_Sanctions_CopyPlayerSanctionByIndexOptions ; extern "C" { # [doc = " Release the memory associated with a player sanction.\n This must be called on data retrieved from EOS_Sanctions_CopyPlayerSanctionByIndex.\n\n @param Sanction - The sanction data to release.\n\n @see EOS_Sanctions_PlayerSanction\n @see EOS_Sanctions_CopyPlayerSanctionByIndex"] pub fn EOS_Sanctions_PlayerSanction_Release (Sanction : * mut EOS_Sanctions_PlayerSanction) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_KWSHandle { _unused : [u8 ; 0] , } pub type EOS_HKWS = * mut EOS_KWSHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " An enumeration of the different permission statuses."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_EKWSPermissionStatus { EOS_KPS_GRANTED = 0 , EOS_KPS_REJECTED = 1 , EOS_KPS_PENDING = 2 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_PermissionStatus { pub ApiVersion : i32 , pub Name : * const :: std :: os :: raw :: c_char , pub Status : EOS_EKWSPermissionStatus , } # [test] fn bindgen_test_layout__tagEOS_KWS_PermissionStatus () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_PermissionStatus > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_PermissionStatus > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_PermissionStatus))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_PermissionStatus > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_PermissionStatus))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionStatus) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Name) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionStatus) , "::" , stringify ! (Name))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Status) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionStatus) , "::" , stringify ! (Status))) ; } pub type EOS_KWS_PermissionStatus = _tagEOS_KWS_PermissionStatus ; extern "C" { pub fn EOS_KWS_PermissionStatus_Release (PermissionStatus : * mut EOS_KWS_PermissionStatus) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_QueryAgeGateOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_KWS_QueryAgeGateOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_QueryAgeGateOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_QueryAgeGateOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_QueryAgeGateOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_QueryAgeGateOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_QueryAgeGateOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryAgeGateOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_KWS_QueryAgeGateOptions = _tagEOS_KWS_QueryAgeGateOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_QueryAgeGateCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub CountryCode : * const :: std :: os :: raw :: c_char , pub AgeOfConsent : u32 , } # [test] fn bindgen_test_layout__tagEOS_KWS_QueryAgeGateCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_QueryAgeGateCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_QueryAgeGateCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_QueryAgeGateCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_QueryAgeGateCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_QueryAgeGateCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryAgeGateCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryAgeGateCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CountryCode) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryAgeGateCallbackInfo) , "::" , stringify ! (CountryCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . AgeOfConsent) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryAgeGateCallbackInfo) , "::" , stringify ! (AgeOfConsent))) ; } pub type EOS_KWS_QueryAgeGateCallbackInfo = _tagEOS_KWS_QueryAgeGateCallbackInfo ; pub type EOS_KWS_OnQueryAgeGateCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_KWS_QueryAgeGateCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_CreateUserOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub DateOfBirth : * const :: std :: os :: raw :: c_char , pub ParentEmail : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_KWS_CreateUserOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_CreateUserOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_CreateUserOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_CreateUserOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_CreateUserOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_CreateUserOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DateOfBirth) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserOptions) , "::" , stringify ! (DateOfBirth))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParentEmail) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserOptions) , "::" , stringify ! (ParentEmail))) ; } pub type EOS_KWS_CreateUserOptions = _tagEOS_KWS_CreateUserOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_CreateUserCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub KWSUserId : * const :: std :: os :: raw :: c_char , pub bIsMinor : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_KWS_CreateUserCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_CreateUserCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_CreateUserCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_CreateUserCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_CreateUserCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_CreateUserCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . KWSUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserCallbackInfo) , "::" , stringify ! (KWSUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsMinor) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CreateUserCallbackInfo) , "::" , stringify ! (bIsMinor))) ; } pub type EOS_KWS_CreateUserCallbackInfo = _tagEOS_KWS_CreateUserCallbackInfo ; pub type EOS_KWS_OnCreateUserCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_KWS_CreateUserCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_QueryPermissionsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_KWS_QueryPermissionsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_QueryPermissionsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_QueryPermissionsOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_QueryPermissionsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_QueryPermissionsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_QueryPermissionsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_KWS_QueryPermissionsOptions = _tagEOS_KWS_QueryPermissionsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_QueryPermissionsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub KWSUserId : * const :: std :: os :: raw :: c_char , pub DateOfBirth : * const :: std :: os :: raw :: c_char , pub bIsMinor : EOS_Bool , pub ParentEmail : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_KWS_QueryPermissionsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_QueryPermissionsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_QueryPermissionsCallbackInfo > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_QueryPermissionsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . KWSUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo) , "::" , stringify ! (KWSUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DateOfBirth) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo) , "::" , stringify ! (DateOfBirth))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsMinor) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo) , "::" , stringify ! (bIsMinor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParentEmail) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_QueryPermissionsCallbackInfo) , "::" , stringify ! (ParentEmail))) ; } pub type EOS_KWS_QueryPermissionsCallbackInfo = _tagEOS_KWS_QueryPermissionsCallbackInfo ; pub type EOS_KWS_OnQueryPermissionsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_KWS_QueryPermissionsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_UpdateParentEmailOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub ParentEmail : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_KWS_UpdateParentEmailOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_UpdateParentEmailOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_UpdateParentEmailOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_UpdateParentEmailOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_UpdateParentEmailOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_UpdateParentEmailOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_UpdateParentEmailOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_UpdateParentEmailOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParentEmail) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_UpdateParentEmailOptions) , "::" , stringify ! (ParentEmail))) ; } pub type EOS_KWS_UpdateParentEmailOptions = _tagEOS_KWS_UpdateParentEmailOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_UpdateParentEmailCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_KWS_UpdateParentEmailCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_UpdateParentEmailCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_UpdateParentEmailCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_UpdateParentEmailCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_UpdateParentEmailCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_UpdateParentEmailCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_UpdateParentEmailCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_UpdateParentEmailCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_UpdateParentEmailCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_KWS_UpdateParentEmailCallbackInfo = _tagEOS_KWS_UpdateParentEmailCallbackInfo ; pub type EOS_KWS_OnUpdateParentEmailCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_KWS_UpdateParentEmailCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_RequestPermissionsOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub PermissionKeyCount : u32 , pub PermissionKeys : * mut * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_KWS_RequestPermissionsOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_RequestPermissionsOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_RequestPermissionsOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_RequestPermissionsOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_RequestPermissionsOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_RequestPermissionsOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_RequestPermissionsOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_RequestPermissionsOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PermissionKeyCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_RequestPermissionsOptions) , "::" , stringify ! (PermissionKeyCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . PermissionKeys) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_RequestPermissionsOptions) , "::" , stringify ! (PermissionKeys))) ; } pub type EOS_KWS_RequestPermissionsOptions = _tagEOS_KWS_RequestPermissionsOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_RequestPermissionsCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_KWS_RequestPermissionsCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_RequestPermissionsCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_RequestPermissionsCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_RequestPermissionsCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_RequestPermissionsCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_RequestPermissionsCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_RequestPermissionsCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_RequestPermissionsCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_RequestPermissionsCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_KWS_RequestPermissionsCallbackInfo = _tagEOS_KWS_RequestPermissionsCallbackInfo ; pub type EOS_KWS_OnRequestPermissionsCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_KWS_RequestPermissionsCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_GetPermissionsCountOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_KWS_GetPermissionsCountOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_GetPermissionsCountOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_GetPermissionsCountOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_GetPermissionsCountOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_GetPermissionsCountOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_GetPermissionsCountOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_GetPermissionsCountOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_GetPermissionsCountOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_KWS_GetPermissionsCountOptions = _tagEOS_KWS_GetPermissionsCountOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_CopyPermissionByIndexOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Index : u32 , } # [test] fn bindgen_test_layout__tagEOS_KWS_CopyPermissionByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_CopyPermissionByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_CopyPermissionByIndexOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_CopyPermissionByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_CopyPermissionByIndexOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_CopyPermissionByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CopyPermissionByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CopyPermissionByIndexOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Index) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_CopyPermissionByIndexOptions) , "::" , stringify ! (Index))) ; } pub type EOS_KWS_CopyPermissionByIndexOptions = _tagEOS_KWS_CopyPermissionByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_GetPermissionByKeyOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Key : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_KWS_GetPermissionByKeyOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_GetPermissionByKeyOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_GetPermissionByKeyOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_GetPermissionByKeyOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_GetPermissionByKeyOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_GetPermissionByKeyOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_GetPermissionByKeyOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_GetPermissionByKeyOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_GetPermissionByKeyOptions) , "::" , stringify ! (Key))) ; } pub type EOS_KWS_GetPermissionByKeyOptions = _tagEOS_KWS_GetPermissionByKeyOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_KWS_AddNotifyPermissionsUpdateReceivedOptions = _tagEOS_KWS_AddNotifyPermissionsUpdateReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub KWSUserId : * const :: std :: os :: raw :: c_char , pub DateOfBirth : * const :: std :: os :: raw :: c_char , pub bIsMinor : EOS_Bool , pub ParentEmail : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . KWSUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo) , "::" , stringify ! (KWSUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . DateOfBirth) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo) , "::" , stringify ! (DateOfBirth))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bIsMinor) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo) , "::" , stringify ! (bIsMinor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParentEmail) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo) , "::" , stringify ! (ParentEmail))) ; } pub type EOS_KWS_PermissionsUpdateReceivedCallbackInfo = _tagEOS_KWS_PermissionsUpdateReceivedCallbackInfo ; pub type EOS_KWS_OnPermissionsUpdateReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_KWS_PermissionsUpdateReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_RTCHandle { _unused : [u8 ; 0] , } pub type EOS_HRTC = * mut EOS_RTCHandle ; # [repr (i32)] # [non_exhaustive] # [doc = " Participant RTC's status change"] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ERTCParticipantStatus { EOS_RTCPS_Joined = 0 , EOS_RTCPS_Left = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_JoinRoomOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub ClientBaseUrl : * const :: std :: os :: raw :: c_char , pub ParticipantToken : * const :: std :: os :: raw :: c_char , pub ParticipantId : EOS_ProductUserId , pub Flags : u32 , pub bManualAudioInputEnabled : EOS_Bool , pub bManualAudioOutputEnabled : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_RTC_JoinRoomOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_JoinRoomOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_JoinRoomOptions > () , 64usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_JoinRoomOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_JoinRoomOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_JoinRoomOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientBaseUrl) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (ClientBaseUrl))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantToken) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (ParticipantToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (ParticipantId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Flags) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (Flags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bManualAudioInputEnabled) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (bManualAudioInputEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bManualAudioOutputEnabled) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomOptions) , "::" , stringify ! (bManualAudioOutputEnabled))) ; } pub type EOS_RTC_JoinRoomOptions = _tagEOS_RTC_JoinRoomOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_Option { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , pub Value : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_Option () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_Option > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_Option > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_Option))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_Option > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_Option))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_Option) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_Option) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Value) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_Option) , "::" , stringify ! (Value))) ; } pub type EOS_RTC_Option = _tagEOS_RTC_Option ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_JoinRoomCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub RoomOptionsCount : u32 , pub RoomOptions : * const EOS_RTC_Option , } # [test] fn bindgen_test_layout__tagEOS_RTC_JoinRoomCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_JoinRoomCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_JoinRoomCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_JoinRoomCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomOptionsCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo) , "::" , stringify ! (RoomOptionsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomOptions) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_JoinRoomCallbackInfo) , "::" , stringify ! (RoomOptions))) ; } pub type EOS_RTC_JoinRoomCallbackInfo = _tagEOS_RTC_JoinRoomCallbackInfo ; pub type EOS_RTC_OnJoinRoomCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTC_JoinRoomCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_LeaveRoomOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_LeaveRoomOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_LeaveRoomOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_LeaveRoomOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_LeaveRoomOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_LeaveRoomOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_LeaveRoomOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_LeaveRoomOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_LeaveRoomOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_LeaveRoomOptions) , "::" , stringify ! (RoomName))) ; } pub type EOS_RTC_LeaveRoomOptions = _tagEOS_RTC_LeaveRoomOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_LeaveRoomCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_LeaveRoomCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_LeaveRoomCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_LeaveRoomCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_LeaveRoomCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_LeaveRoomCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_LeaveRoomCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_LeaveRoomCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_LeaveRoomCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_LeaveRoomCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_LeaveRoomCallbackInfo) , "::" , stringify ! (RoomName))) ; } pub type EOS_RTC_LeaveRoomCallbackInfo = _tagEOS_RTC_LeaveRoomCallbackInfo ; pub type EOS_RTC_OnLeaveRoomCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTC_LeaveRoomCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_BlockParticipantOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub ParticipantId : EOS_ProductUserId , pub bBlocked : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_RTC_BlockParticipantOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_BlockParticipantOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_BlockParticipantOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_BlockParticipantOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_BlockParticipantOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_BlockParticipantOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantOptions) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantOptions) , "::" , stringify ! (ParticipantId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bBlocked) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantOptions) , "::" , stringify ! (bBlocked))) ; } pub type EOS_RTC_BlockParticipantOptions = _tagEOS_RTC_BlockParticipantOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_BlockParticipantCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub ParticipantId : EOS_ProductUserId , pub bBlocked : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_RTC_BlockParticipantCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_BlockParticipantCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_BlockParticipantCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_BlockParticipantCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo) , "::" , stringify ! (ParticipantId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bBlocked) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_BlockParticipantCallbackInfo) , "::" , stringify ! (bBlocked))) ; } pub type EOS_RTC_BlockParticipantCallbackInfo = _tagEOS_RTC_BlockParticipantCallbackInfo ; pub type EOS_RTC_OnBlockParticipantCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTC_BlockParticipantCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_AddNotifyDisconnectedOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_AddNotifyDisconnectedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_AddNotifyDisconnectedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_AddNotifyDisconnectedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_AddNotifyDisconnectedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_AddNotifyDisconnectedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_AddNotifyDisconnectedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyDisconnectedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyDisconnectedOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyDisconnectedOptions) , "::" , stringify ! (RoomName))) ; } pub type EOS_RTC_AddNotifyDisconnectedOptions = _tagEOS_RTC_AddNotifyDisconnectedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_DisconnectedCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_DisconnectedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_DisconnectedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_DisconnectedCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_DisconnectedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_DisconnectedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_DisconnectedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_DisconnectedCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_DisconnectedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_DisconnectedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_DisconnectedCallbackInfo) , "::" , stringify ! (RoomName))) ; } pub type EOS_RTC_DisconnectedCallbackInfo = _tagEOS_RTC_DisconnectedCallbackInfo ; pub type EOS_RTC_OnDisconnectedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTC_DisconnectedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_ParticipantMetadata { pub ApiVersion : i32 , pub Key : * const :: std :: os :: raw :: c_char , pub Value : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_ParticipantMetadata () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_ParticipantMetadata > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_ParticipantMetadata > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_ParticipantMetadata))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_ParticipantMetadata > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_ParticipantMetadata))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantMetadata) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantMetadata) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Value) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantMetadata) , "::" , stringify ! (Value))) ; } pub type EOS_RTC_ParticipantMetadata = _tagEOS_RTC_ParticipantMetadata ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_AddNotifyParticipantStatusChangedOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_AddNotifyParticipantStatusChangedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_AddNotifyParticipantStatusChangedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_AddNotifyParticipantStatusChangedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_AddNotifyParticipantStatusChangedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_AddNotifyParticipantStatusChangedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_AddNotifyParticipantStatusChangedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyParticipantStatusChangedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyParticipantStatusChangedOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyParticipantStatusChangedOptions) , "::" , stringify ! (RoomName))) ; } pub type EOS_RTC_AddNotifyParticipantStatusChangedOptions = _tagEOS_RTC_AddNotifyParticipantStatusChangedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_ParticipantStatusChangedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub ParticipantId : EOS_ProductUserId , pub ParticipantStatus : EOS_ERTCParticipantStatus , pub ParticipantMetadataCount : u32 , pub ParticipantMetadata : * const EOS_RTC_ParticipantMetadata , pub bParticipantInBlocklist : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_RTC_ParticipantStatusChangedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_ParticipantStatusChangedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_ParticipantStatusChangedCallbackInfo > () , 56usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_ParticipantStatusChangedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (ParticipantId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantStatus) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (ParticipantStatus))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantMetadataCount) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (ParticipantMetadataCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ParticipantMetadata) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (ParticipantMetadata))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bParticipantInBlocklist) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_ParticipantStatusChangedCallbackInfo) , "::" , stringify ! (bParticipantInBlocklist))) ; } pub type EOS_RTC_ParticipantStatusChangedCallbackInfo = _tagEOS_RTC_ParticipantStatusChangedCallbackInfo ; pub type EOS_RTC_OnParticipantStatusChangedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTC_ParticipantStatusChangedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_SetSettingOptions { pub ApiVersion : i32 , pub SettingName : * const :: std :: os :: raw :: c_char , pub SettingValue : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_SetSettingOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_SetSettingOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_SetSettingOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_SetSettingOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_SetSettingOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_SetSettingOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetSettingOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SettingName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetSettingOptions) , "::" , stringify ! (SettingName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SettingValue) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetSettingOptions) , "::" , stringify ! (SettingValue))) ; } pub type EOS_RTC_SetSettingOptions = _tagEOS_RTC_SetSettingOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_SetRoomSettingOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub SettingName : * const :: std :: os :: raw :: c_char , pub SettingValue : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_SetRoomSettingOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_SetRoomSettingOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_SetRoomSettingOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_SetRoomSettingOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_SetRoomSettingOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_SetRoomSettingOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetRoomSettingOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetRoomSettingOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetRoomSettingOptions) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SettingName) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetRoomSettingOptions) , "::" , stringify ! (SettingName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SettingValue) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_SetRoomSettingOptions) , "::" , stringify ! (SettingValue))) ; } pub type EOS_RTC_SetRoomSettingOptions = _tagEOS_RTC_SetRoomSettingOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions) , "::" , stringify ! (RoomName))) ; } pub type EOS_RTC_AddNotifyRoomStatisticsUpdatedOptions = _tagEOS_RTC_AddNotifyRoomStatisticsUpdatedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTC_RoomStatisticsUpdatedInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub Statistic : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTC_RoomStatisticsUpdatedInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTC_RoomStatisticsUpdatedInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTC_RoomStatisticsUpdatedInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTC_RoomStatisticsUpdatedInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTC_RoomStatisticsUpdatedInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTC_RoomStatisticsUpdatedInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_RoomStatisticsUpdatedInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_RoomStatisticsUpdatedInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_RoomStatisticsUpdatedInfo) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Statistic) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTC_RoomStatisticsUpdatedInfo) , "::" , stringify ! (Statistic))) ; } pub type EOS_RTC_RoomStatisticsUpdatedInfo = _tagEOS_RTC_RoomStatisticsUpdatedInfo ; pub type EOS_RTC_OnRoomStatisticsUpdatedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTC_RoomStatisticsUpdatedInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_RTCAdminHandle { _unused : [u8 ; 0] , } pub type EOS_HRTCAdmin = * mut EOS_RTCAdminHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_QueryJoinRoomTokenOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub RoomName : * const :: std :: os :: raw :: c_char , pub TargetUserIds : * mut EOS_ProductUserId , pub TargetUserIdsCount : u32 , pub TargetUserIpAddresses : * mut * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_QueryJoinRoomTokenOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_QueryJoinRoomTokenOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_QueryJoinRoomTokenOptions > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_QueryJoinRoomTokenOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserIds) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions) , "::" , stringify ! (TargetUserIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserIdsCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions) , "::" , stringify ! (TargetUserIdsCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserIpAddresses) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenOptions) , "::" , stringify ! (TargetUserIpAddresses))) ; } pub type EOS_RTCAdmin_QueryJoinRoomTokenOptions = _tagEOS_RTCAdmin_QueryJoinRoomTokenOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub RoomName : * const :: std :: os :: raw :: c_char , pub ClientBaseUrl : * const :: std :: os :: raw :: c_char , pub QueryId : u32 , pub TokenCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientBaseUrl) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo) , "::" , stringify ! (ClientBaseUrl))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . QueryId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo) , "::" , stringify ! (QueryId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TokenCount) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo) , "::" , stringify ! (TokenCount))) ; } pub type EOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo = _tagEOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo ; pub type EOS_RTCAdmin_OnQueryJoinRoomTokenCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTCAdmin_QueryJoinRoomTokenCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_UserToken { pub ApiVersion : i32 , pub ProductUserId : EOS_ProductUserId , pub Token : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_UserToken () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_UserToken > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_UserToken > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_UserToken))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_UserToken > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_UserToken))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_UserToken) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProductUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_UserToken) , "::" , stringify ! (ProductUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Token) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_UserToken) , "::" , stringify ! (Token))) ; } pub type EOS_RTCAdmin_UserToken = _tagEOS_RTCAdmin_UserToken ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_CopyUserTokenByIndexOptions { pub ApiVersion : i32 , pub UserTokenIndex : u32 , pub QueryId : u32 , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_CopyUserTokenByIndexOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_CopyUserTokenByIndexOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_CopyUserTokenByIndexOptions > () , 12usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByIndexOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_CopyUserTokenByIndexOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByIndexOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByIndexOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UserTokenIndex) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByIndexOptions) , "::" , stringify ! (UserTokenIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . QueryId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByIndexOptions) , "::" , stringify ! (QueryId))) ; } pub type EOS_RTCAdmin_CopyUserTokenByIndexOptions = _tagEOS_RTCAdmin_CopyUserTokenByIndexOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub QueryId : u32 , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . QueryId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions) , "::" , stringify ! (QueryId))) ; } pub type EOS_RTCAdmin_CopyUserTokenByUserIdOptions = _tagEOS_RTCAdmin_CopyUserTokenByUserIdOptions ; extern "C" { # [doc = " Release the memory associated with EOS_RTCAdmin_UserToken. This must be called on data retrieved from\n EOS_RTCAdmin_CopyUserTokenByIndex or EOS_RTCAdmin_CopyUserTokenByUserId.\n\n @param UserToken - The user token to release.\n\n @see EOS_RTCAdmin_UserToken\n @see EOS_RTCAdmin_CopyUserTokenByIndex\n @see EOS_RTCAdmin_CopyUserTokenByUserId"] pub fn EOS_RTCAdmin_UserToken_Release (UserToken : * mut EOS_RTCAdmin_UserToken) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_KickOptions { pub ApiVersion : i32 , pub RoomName : * const :: std :: os :: raw :: c_char , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_KickOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_KickOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_KickOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_KickOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_KickOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_KickOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_KickOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_KickOptions) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_KickOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_RTCAdmin_KickOptions = _tagEOS_RTCAdmin_KickOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_KickCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_KickCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_KickCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_KickCompleteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_KickCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_KickCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_KickCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_KickCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_KickCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_RTCAdmin_KickCompleteCallbackInfo = _tagEOS_RTCAdmin_KickCompleteCallbackInfo ; pub type EOS_RTCAdmin_OnKickCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTCAdmin_KickCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_SetParticipantHardMuteOptions { pub ApiVersion : i32 , pub RoomName : * const :: std :: os :: raw :: c_char , pub TargetUserId : EOS_ProductUserId , pub bMute : EOS_Bool , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_SetParticipantHardMuteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_SetParticipantHardMuteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_SetParticipantHardMuteOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_SetParticipantHardMuteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . RoomName) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteOptions) , "::" , stringify ! (RoomName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bMute) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteOptions) , "::" , stringify ! (bMute))) ; } pub type EOS_RTCAdmin_SetParticipantHardMuteOptions = _tagEOS_RTCAdmin_SetParticipantHardMuteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo = _tagEOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo ; pub type EOS_RTCAdmin_OnSetParticipantHardMuteCompleteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_RTCAdmin_SetParticipantHardMuteCompleteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_ProgressionSnapshotHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the ProgressionSnapshot interface"] pub type EOS_HProgressionSnapshot = * mut EOS_ProgressionSnapshotHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ProgressionSnapshot_BeginSnapshotOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_ProgressionSnapshot_BeginSnapshotOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ProgressionSnapshot_BeginSnapshotOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ProgressionSnapshot_BeginSnapshotOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_ProgressionSnapshot_BeginSnapshotOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ProgressionSnapshot_BeginSnapshotOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ProgressionSnapshot_BeginSnapshotOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_BeginSnapshotOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_BeginSnapshotOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_ProgressionSnapshot_BeginSnapshotOptions = _tagEOS_ProgressionSnapshot_BeginSnapshotOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ProgressionSnapshot_AddProgressionOptions { pub ApiVersion : i32 , pub SnapshotId : u32 , pub Key : * const :: std :: os :: raw :: c_char , pub Value : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_ProgressionSnapshot_AddProgressionOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ProgressionSnapshot_AddProgressionOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ProgressionSnapshot_AddProgressionOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_ProgressionSnapshot_AddProgressionOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ProgressionSnapshot_AddProgressionOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ProgressionSnapshot_AddProgressionOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_AddProgressionOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SnapshotId) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_AddProgressionOptions) , "::" , stringify ! (SnapshotId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_AddProgressionOptions) , "::" , stringify ! (Key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Value) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_AddProgressionOptions) , "::" , stringify ! (Value))) ; } pub type EOS_ProgressionSnapshot_AddProgressionOptions = _tagEOS_ProgressionSnapshot_AddProgressionOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ProgressionSnapshot_SubmitSnapshotOptions { pub ApiVersion : i32 , pub SnapshotId : u32 , } # [test] fn bindgen_test_layout__tagEOS_ProgressionSnapshot_SubmitSnapshotOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ProgressionSnapshot_SubmitSnapshotOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ProgressionSnapshot_SubmitSnapshotOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ProgressionSnapshot_SubmitSnapshotOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SnapshotId) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotOptions) , "::" , stringify ! (SnapshotId))) ; } pub type EOS_ProgressionSnapshot_SubmitSnapshotOptions = _tagEOS_ProgressionSnapshot_SubmitSnapshotOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ProgressionSnapshot_EndSnapshotOptions { pub ApiVersion : i32 , pub SnapshotId : u32 , } # [test] fn bindgen_test_layout__tagEOS_ProgressionSnapshot_EndSnapshotOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ProgressionSnapshot_EndSnapshotOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ProgressionSnapshot_EndSnapshotOptions > () , 8usize , concat ! ("Size of: " , stringify ! (_tagEOS_ProgressionSnapshot_EndSnapshotOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ProgressionSnapshot_EndSnapshotOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ProgressionSnapshot_EndSnapshotOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_EndSnapshotOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SnapshotId) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_EndSnapshotOptions) , "::" , stringify ! (SnapshotId))) ; } pub type EOS_ProgressionSnapshot_EndSnapshotOptions = _tagEOS_ProgressionSnapshot_EndSnapshotOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo { pub ResultCode : EOS_EResult , pub SnapshotId : u32 , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . SnapshotId) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo) , "::" , stringify ! (SnapshotId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo = _tagEOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo ; pub type EOS_ProgressionSnapshot_OnSubmitSnapshotCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_ProgressionSnapshot_SubmitSnapshotCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ProgressionSnapshot_DeleteSnapshotOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_ProgressionSnapshot_DeleteSnapshotOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ProgressionSnapshot_DeleteSnapshotOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ProgressionSnapshot_DeleteSnapshotOptions > () , 16usize , concat ! ("Size of: " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ProgressionSnapshot_DeleteSnapshotOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotOptions) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_ProgressionSnapshot_DeleteSnapshotOptions = _tagEOS_ProgressionSnapshot_DeleteSnapshotOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo { pub ResultCode : EOS_EResult , pub LocalUserId : EOS_ProductUserId , pub ClientData : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout__tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo) , "::" , stringify ! (ClientData))) ; } pub type EOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo = _tagEOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo ; pub type EOS_ProgressionSnapshot_OnDeleteSnapshotCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_ProgressionSnapshot_DeleteSnapshotCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct EOS_CustomInvitesHandle { _unused : [u8 ; 0] , } # [doc = " Handle to the custom invites interface"] pub type EOS_HCustomInvites = * mut EOS_CustomInvitesHandle ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_SetCustomInviteOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub Payload : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_SetCustomInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_SetCustomInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_SetCustomInviteOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_SetCustomInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_SetCustomInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_SetCustomInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SetCustomInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SetCustomInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Payload) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SetCustomInviteOptions) , "::" , stringify ! (Payload))) ; } pub type EOS_CustomInvites_SetCustomInviteOptions = _tagEOS_CustomInvites_SetCustomInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_SendCustomInviteOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub TargetUserIds : * mut EOS_ProductUserId , pub TargetUserIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_SendCustomInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_SendCustomInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_SendCustomInviteOptions > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_SendCustomInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserIds) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteOptions) , "::" , stringify ! (TargetUserIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserIdsCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteOptions) , "::" , stringify ! (TargetUserIdsCount))) ; } pub type EOS_CustomInvites_SendCustomInviteOptions = _tagEOS_CustomInvites_SendCustomInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_SendCustomInviteCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub TargetUserIds : * mut EOS_ProductUserId , pub TargetUserIdsCount : u32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_SendCustomInviteCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_SendCustomInviteCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_SendCustomInviteCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_SendCustomInviteCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserIds) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteCallbackInfo) , "::" , stringify ! (TargetUserIds))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserIdsCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomInviteCallbackInfo) , "::" , stringify ! (TargetUserIdsCount))) ; } pub type EOS_CustomInvites_SendCustomInviteCallbackInfo = _tagEOS_CustomInvites_SendCustomInviteCallbackInfo ; pub type EOS_CustomInvites_OnSendCustomInviteCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_SendCustomInviteCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifyCustomInviteReceivedOptions = _tagEOS_CustomInvites_AddNotifyCustomInviteReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , pub CustomInviteId : * const :: std :: os :: raw :: c_char , pub Payload : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CustomInviteId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo) , "::" , stringify ! (CustomInviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Payload) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo) , "::" , stringify ! (Payload))) ; } pub type EOS_CustomInvites_OnCustomInviteReceivedCallbackInfo = _tagEOS_CustomInvites_OnCustomInviteReceivedCallbackInfo ; pub type EOS_CustomInvites_OnCustomInviteReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_OnCustomInviteReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions = _tagEOS_CustomInvites_AddNotifyCustomInviteAcceptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , pub CustomInviteId : * const :: std :: os :: raw :: c_char , pub Payload : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CustomInviteId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo) , "::" , stringify ! (CustomInviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Payload) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo) , "::" , stringify ! (Payload))) ; } pub type EOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo = _tagEOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo ; pub type EOS_CustomInvites_OnCustomInviteAcceptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_OnCustomInviteAcceptedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifyCustomInviteRejectedOptions = _tagEOS_CustomInvites_AddNotifyCustomInviteRejectedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , pub CustomInviteId : * const :: std :: os :: raw :: c_char , pub Payload : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CustomInviteId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo) , "::" , stringify ! (CustomInviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Payload) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo) , "::" , stringify ! (Payload))) ; } pub type EOS_CustomInvites_CustomInviteRejectedCallbackInfo = _tagEOS_CustomInvites_CustomInviteRejectedCallbackInfo ; pub type EOS_CustomInvites_OnCustomInviteRejectedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_CustomInviteRejectedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_FinalizeInviteOptions { pub ApiVersion : i32 , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , pub CustomInviteId : * const :: std :: os :: raw :: c_char , pub ProcessingResult : EOS_EResult , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_FinalizeInviteOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_FinalizeInviteOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_FinalizeInviteOptions > () , 40usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_FinalizeInviteOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_FinalizeInviteOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_FinalizeInviteOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_FinalizeInviteOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_FinalizeInviteOptions) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_FinalizeInviteOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . CustomInviteId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_FinalizeInviteOptions) , "::" , stringify ! (CustomInviteId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ProcessingResult) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_FinalizeInviteOptions) , "::" , stringify ! (ProcessingResult))) ; } pub type EOS_CustomInvites_FinalizeInviteOptions = _tagEOS_CustomInvites_FinalizeInviteOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_SendRequestToJoinOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_SendRequestToJoinOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_SendRequestToJoinOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_SendRequestToJoinOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_SendRequestToJoinOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_CustomInvites_SendRequestToJoinOptions = _tagEOS_CustomInvites_SendRequestToJoinOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_SendRequestToJoinCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_SendRequestToJoinCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_SendRequestToJoinCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_SendRequestToJoinCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_SendRequestToJoinCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendRequestToJoinCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_CustomInvites_SendRequestToJoinCallbackInfo = _tagEOS_CustomInvites_SendRequestToJoinCallbackInfo ; pub type EOS_CustomInvites_OnSendRequestToJoinCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_SendRequestToJoinCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions = _tagEOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedOptions ; # [repr (i32)] # [non_exhaustive] # [doc = " Response to an invite request."] # [derive (Debug , Copy , Clone , Hash , PartialEq , Eq)] pub enum EOS_ERequestToJoinResponse { EOS_RTJR_ACCEPTED = 0 , EOS_RTJR_REJECTED = 1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub FromUserId : EOS_ProductUserId , pub ToUserId : EOS_ProductUserId , pub Response : EOS_ERequestToJoinResponse , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FromUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo) , "::" , stringify ! (FromUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ToUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo) , "::" , stringify ! (ToUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . Response) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo) , "::" , stringify ! (Response))) ; } pub type EOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo = _tagEOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo ; pub type EOS_CustomInvites_OnRequestToJoinResponseReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_RequestToJoinResponseReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions = _tagEOS_CustomInvites_AddNotifyRequestToJoinReceivedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub FromUserId : EOS_ProductUserId , pub ToUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . FromUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo) , "::" , stringify ! (FromUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ToUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo) , "::" , stringify ! (ToUserId))) ; } pub type EOS_CustomInvites_RequestToJoinReceivedCallbackInfo = _tagEOS_CustomInvites_RequestToJoinReceivedCallbackInfo ; pub type EOS_CustomInvites_OnRequestToJoinReceivedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_RequestToJoinReceivedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AcceptRequestToJoinOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AcceptRequestToJoinOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AcceptRequestToJoinOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AcceptRequestToJoinOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AcceptRequestToJoinOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_CustomInvites_AcceptRequestToJoinOptions = _tagEOS_CustomInvites_AcceptRequestToJoinOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_CustomInvites_AcceptRequestToJoinCallbackInfo = _tagEOS_CustomInvites_AcceptRequestToJoinCallbackInfo ; pub type EOS_CustomInvites_OnAcceptRequestToJoinCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_AcceptRequestToJoinCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_RejectRequestToJoinOptions { pub ApiVersion : i32 , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_RejectRequestToJoinOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_RejectRequestToJoinOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_RejectRequestToJoinOptions > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_RejectRequestToJoinOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinOptions) , "::" , stringify ! (ApiVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinOptions) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinOptions) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_CustomInvites_RejectRequestToJoinOptions = _tagEOS_CustomInvites_RejectRequestToJoinOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo { pub ResultCode : EOS_EResult , pub ClientData : * mut :: std :: os :: raw :: c_void , pub LocalUserId : EOS_ProductUserId , pub TargetUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo > () , 32usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ResultCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo) , "::" , stringify ! (ResultCode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo) , "::" , stringify ! (TargetUserId))) ; } pub type EOS_CustomInvites_RejectRequestToJoinCallbackInfo = _tagEOS_CustomInvites_RejectRequestToJoinCallbackInfo ; pub type EOS_CustomInvites_OnRejectRequestToJoinCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_RejectRequestToJoinCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions = _tagEOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub UiEventId : EOS_UI_EventId , pub LocalUserId : EOS_ProductUserId , pub TargetNativeAccountType : EOS_IntegratedPlatformType , pub TargetUserNativeAccountId : * const :: std :: os :: raw :: c_char , pub InviteId : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo > () , 48usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . UiEventId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo) , "::" , stringify ! (UiEventId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetNativeAccountType) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo) , "::" , stringify ! (TargetNativeAccountType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserNativeAccountId) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo) , "::" , stringify ! (TargetUserNativeAccountId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InviteId) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo) , "::" , stringify ! (InviteId))) ; } pub type EOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo = _tagEOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo ; pub type EOS_CustomInvites_OnSendCustomNativeInviteRequestedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_SendCustomNativeInviteRequestedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions = _tagEOS_CustomInvites_AddNotifyRequestToJoinAcceptedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo = _tagEOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo ; pub type EOS_CustomInvites_OnRequestToJoinAcceptedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_OnRequestToJoinAcceptedCallbackInfo) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions { pub ApiVersion : i32 , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions > () , 4usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions > () , 4usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ApiVersion) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions) , "::" , stringify ! (ApiVersion))) ; } pub type EOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions = _tagEOS_CustomInvites_AddNotifyRequestToJoinRejectedOptions ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo { pub ClientData : * mut :: std :: os :: raw :: c_void , pub TargetUserId : EOS_ProductUserId , pub LocalUserId : EOS_ProductUserId , } # [test] fn bindgen_test_layout__tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo () { const UNINIT : :: std :: mem :: MaybeUninit < _tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < _tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo > () , 24usize , concat ! ("Size of: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < _tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . ClientData) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo) , "::" , stringify ! (ClientData))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . TargetUserId) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo) , "::" , stringify ! (TargetUserId))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . LocalUserId) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo) , "::" , stringify ! (LocalUserId))) ; } pub type EOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo = _tagEOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo ; pub type EOS_CustomInvites_OnRequestToJoinRejectedCallback = :: std :: option :: Option < unsafe extern "C" fn (Data : * const EOS_CustomInvites_OnRequestToJoinRejectedCallbackInfo) > ; extern "C" { # [doc = " Notify the platform instance to do work. This function must be called frequently in order for the services provided by the SDK to properly\n function. For tick-based applications, it is usually desirable to call this once per-tick."] pub fn EOS_Platform_Tick (Handle : EOS_HPlatform) ; } extern "C" { # [doc = " Get a handle to the Metrics Interface.\n @return EOS_HMetrics handle\n\n @see eos_metrics.h\n @see eos_metrics_types.h"] pub fn EOS_Platform_GetMetricsInterface (Handle : EOS_HPlatform) -> EOS_HMetrics ; } extern "C" { # [doc = " Get a handle to the Auth Interface.\n @return EOS_HAuth handle\n\n @see eos_auth.h\n @see eos_auth_types.h"] pub fn EOS_Platform_GetAuthInterface (Handle : EOS_HPlatform) -> EOS_HAuth ; } extern "C" { # [doc = " Get a handle to the Connect Interface.\n @return EOS_HConnect handle\n\n @see eos_connect.h\n @see eos_connect_types.h"] pub fn EOS_Platform_GetConnectInterface (Handle : EOS_HPlatform) -> EOS_HConnect ; } extern "C" { # [doc = " Get a handle to the Ecom Interface.\n @return EOS_HEcom handle\n\n @see eos_ecom.h\n @see eos_ecom_types.h"] pub fn EOS_Platform_GetEcomInterface (Handle : EOS_HPlatform) -> EOS_HEcom ; } extern "C" { # [doc = " Get a handle to the UI Interface.\n @return EOS_HUI handle\n\n @see eos_ui.h\n @see eos_ui_types.h"] pub fn EOS_Platform_GetUIInterface (Handle : EOS_HPlatform) -> EOS_HUI ; } extern "C" { # [doc = " Get a handle to the Friends Interface.\n @return EOS_HFriends handle\n\n @see eos_friends.h\n @see eos_friends_types.h"] pub fn EOS_Platform_GetFriendsInterface (Handle : EOS_HPlatform) -> EOS_HFriends ; } extern "C" { # [doc = " Get a handle to the Presence Interface.\n @return EOS_HPresence handle\n\n @see eos_presence.h\n @see eos_presence_types.h"] pub fn EOS_Platform_GetPresenceInterface (Handle : EOS_HPlatform) -> EOS_HPresence ; } extern "C" { # [doc = " Get a handle to the Sessions Interface.\n @return EOS_HSessions handle\n\n @see eos_sessions.h\n @see eos_sessions_types.h"] pub fn EOS_Platform_GetSessionsInterface (Handle : EOS_HPlatform) -> EOS_HSessions ; } extern "C" { # [doc = " Get a handle to the Lobby Interface.\n @return EOS_HLobby handle\n\n @see eos_lobby.h\n @see eos_lobby_types.h"] pub fn EOS_Platform_GetLobbyInterface (Handle : EOS_HPlatform) -> EOS_HLobby ; } extern "C" { # [doc = " Get a handle to the UserInfo Interface.\n @return EOS_HUserInfo handle\n\n @see eos_userinfo.h\n @see eos_userinfo_types.h"] pub fn EOS_Platform_GetUserInfoInterface (Handle : EOS_HPlatform) -> EOS_HUserInfo ; } extern "C" { # [doc = " Get a handle to the Peer-to-Peer Networking Interface.\n @return EOS_HP2P handle\n\n @see eos_p2p.h\n @see eos_p2p_types.h"] pub fn EOS_Platform_GetP2PInterface (Handle : EOS_HPlatform) -> EOS_HP2P ; } extern "C" { # [doc = " Get a handle to the Real Time Communications Interface (RTC).\n From the RTC interface you can retrieve the handle to the audio interface (RTCAudio), which is a component of RTC.\n @return EOS_HRTC handle\n\n @see EOS_RTC_GetAudioInterface\n @see eos_rtc.h\n @see eos_rtc_types.h"] pub fn EOS_Platform_GetRTCInterface (Handle : EOS_HPlatform) -> EOS_HRTC ; } extern "C" { # [doc = " Get a handle to the RTC Admin interface\n @return EOS_HRTCAdmin handle\n\n @see eos_rtc_admin.h\n @see eos_admin_types.h"] pub fn EOS_Platform_GetRTCAdminInterface (Handle : EOS_HPlatform) -> EOS_HRTCAdmin ; } extern "C" { # [doc = " Get a handle to the PlayerDataStorage Interface.\n @return EOS_HPlayerDataStorage handle\n\n @see eos_playerdatastorage.h\n @see eos_playerdatastorage_types.h"] pub fn EOS_Platform_GetPlayerDataStorageInterface (Handle : EOS_HPlatform) -> EOS_HPlayerDataStorage ; } extern "C" { # [doc = " Get a handle to the TitleStorage Interface.\n @return EOS_HTitleStorage handle\n\n @see eos_titlestorage.h\n @see eos_titlestorage_types.h"] pub fn EOS_Platform_GetTitleStorageInterface (Handle : EOS_HPlatform) -> EOS_HTitleStorage ; } extern "C" { # [doc = " Get a handle to the Achievements Interface.\n @return EOS_HAchievements handle\n\n @see eos_achievements.h\n @see eos_achievements_types.h"] pub fn EOS_Platform_GetAchievementsInterface (Handle : EOS_HPlatform) -> EOS_HAchievements ; } extern "C" { # [doc = " Get a handle to the Stats Interface.\n @return EOS_HStats handle\n\n @see eos_stats.h\n @see eos_stats_types.h"] pub fn EOS_Platform_GetStatsInterface (Handle : EOS_HPlatform) -> EOS_HStats ; } extern "C" { # [doc = " Get a handle to the Leaderboards Interface.\n @return EOS_HLeaderboards handle\n\n @see eos_leaderboards.h\n @see eos_leaderboards_types.h"] pub fn EOS_Platform_GetLeaderboardsInterface (Handle : EOS_HPlatform) -> EOS_HLeaderboards ; } extern "C" { # [doc = " Get a handle to the Mods Interface.\n @return EOS_HMods handle\n\n @see eos_mods.h\n @see eos_mods_types.h"] pub fn EOS_Platform_GetModsInterface (Handle : EOS_HPlatform) -> EOS_HMods ; } extern "C" { # [doc = " Get a handle to the Anti-Cheat Client Interface.\n @return EOS_HAntiCheatClient handle\n\n @see eos_anticheatclient.h\n @see eos_anticheatclient_types.h"] pub fn EOS_Platform_GetAntiCheatClientInterface (Handle : EOS_HPlatform) -> EOS_HAntiCheatClient ; } extern "C" { # [doc = " Get a handle to the Anti-Cheat Server Interface.\n @return EOS_HAntiCheatServer handle\n\n @see eos_anticheatserver.h\n @see eos_anticheatserver_types.h"] pub fn EOS_Platform_GetAntiCheatServerInterface (Handle : EOS_HPlatform) -> EOS_HAntiCheatServer ; } extern "C" { # [doc = " Get the active country code that the SDK will send to services which require it.\n This returns the override value otherwise it will use the country code of the given user.\n This is currently used for determining pricing.\n Get a handle to the ProgressionSnapshot Interface.\n @return EOS_HProgressionSnapshot handle\n\n @see eos_progressionsnapshot.h\n @see eos_progressionsnapshot_types.h"] pub fn EOS_Platform_GetProgressionSnapshotInterface (Handle : EOS_HPlatform) -> EOS_HProgressionSnapshot ; } extern "C" { # [doc = " Get a handle to the Reports Interface.\n @return EOS_HReports handle\n\n @see eos_reports.h\n @see eos_reports_types.h"] pub fn EOS_Platform_GetReportsInterface (Handle : EOS_HPlatform) -> EOS_HReports ; } extern "C" { # [doc = " Get a handle to the Sanctions Interface.\n @return EOS_HSanctions handle\n\n @see eos_sanctions.h\n @see eos_sanctions_types.h"] pub fn EOS_Platform_GetSanctionsInterface (Handle : EOS_HPlatform) -> EOS_HSanctions ; } extern "C" { # [doc = " Get a handle to the Kids Web Service Interface.\n @return EOS_HKWS handle\n\n @see eos_kws.h\n @see eos_kws_types.h"] pub fn EOS_Platform_GetKWSInterface (Handle : EOS_HPlatform) -> EOS_HKWS ; } extern "C" { # [doc = " Get a handle to the Custom Invites Interface.\n @return EOS_HCustomInvites handle\n\n @see eos_custominvites.h\n @see eos_custominvites_types.h"] pub fn EOS_Platform_GetCustomInvitesInterface (Handle : EOS_HPlatform) -> EOS_HCustomInvites ; } extern "C" { # [doc = " Get a handle to the Integrated Platform Interface.\n @return EOS_HIntegratedPlatform handle\n\n @see eos_integratedplatform.h\n @see eos_integratedplatform_types.h"] pub fn EOS_Platform_GetIntegratedPlatformInterface (Handle : EOS_HPlatform) -> EOS_HIntegratedPlatform ; } extern "C" { # [doc = " This only will return the value set as the override otherwise EOS_NotFound is returned.\n This is not currently used for anything internally.\n\n @param LocalUserId The account to use for lookup if no override exists.\n @param OutBuffer The buffer into which the character data should be written.  The buffer must be long enough to hold a string of EOS_COUNTRYCODE_MAX_LENGTH.\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer.\n\n @return An EOS_EResult that indicates whether the active country code string was copied into the OutBuffer.\n         EOS_Success if the information is available and passed out in OutBuffer\n         EOS_InvalidParameters if you pass a null pointer for the out parameter\n         EOS_NotFound if there is not an override country code for the user.\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the country code string. InOutBufferLength contains the required minimum length to perform the operation successfully.\n\n @see eos_ecom.h\n @see EOS_COUNTRYCODE_MAX_LENGTH"] pub fn EOS_Platform_GetActiveCountryCode (Handle : EOS_HPlatform , LocalUserId : EOS_EpicAccountId , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } extern "C" { # [doc = " Get the active locale code that the SDK will send to services which require it.\n This returns the override value otherwise it will use the locale code of the given user.\n This is used for localization. This follows ISO 639.\n\n @param LocalUserId The account to use for lookup if no override exists.\n @param OutBuffer The buffer into which the character data should be written.  The buffer must be long enough to hold a string of EOS_LOCALECODE_MAX_LENGTH.\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer.\n\n @return An EOS_EResult that indicates whether the active locale code string was copied into the OutBuffer.\n         EOS_Success if the information is available and passed out in OutBuffer\n         EOS_InvalidParameters if you pass a null pointer for the out parameter\n         EOS_NotFound if there is neither an override nor an available locale code for the user.\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the locale code string. InOutBufferLength contains the required minimum length to perform the operation successfully.\n\n @see eos_ecom.h\n @see EOS_LOCALECODE_MAX_LENGTH"] pub fn EOS_Platform_GetActiveLocaleCode (Handle : EOS_HPlatform , LocalUserId : EOS_EpicAccountId , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } extern "C" { # [doc = " Get the override country code that the SDK will send to services which require it.\n This is not currently used for anything internally.\n\n @param OutBuffer The buffer into which the character data should be written.  The buffer must be long enough to hold a string of EOS_COUNTRYCODE_MAX_LENGTH.\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer.\n\n @return An EOS_EResult that indicates whether the override country code string was copied into the OutBuffer.\n         EOS_Success if the information is available and passed out in OutBuffer\n         EOS_InvalidParameters if you pass a null pointer for the out parameter\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the country code string. InOutBufferLength contains the required minimum length to perform the operation successfully.\n\n @see eos_ecom.h\n @see EOS_COUNTRYCODE_MAX_LENGTH"] pub fn EOS_Platform_GetOverrideCountryCode (Handle : EOS_HPlatform , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } extern "C" { # [doc = " Get the override locale code that the SDK will send to services which require it.\n This is used for localization. This follows ISO 639.\n\n @param OutBuffer The buffer into which the character data should be written.  The buffer must be long enough to hold a string of EOS_LOCALECODE_MAX_LENGTH.\n @param InOutBufferLength The size of the OutBuffer in characters.\n                          The input buffer should include enough space to be null-terminated.\n                          When the function returns, this parameter will be filled with the length of the string copied into OutBuffer.\n\n @return An EOS_EResult that indicates whether the override locale code string was copied into the OutBuffer.\n         EOS_Success if the information is available and passed out in OutBuffer\n         EOS_InvalidParameters if you pass a null pointer for the out parameter\n         EOS_LimitExceeded - The OutBuffer is not large enough to receive the locale code string. InOutBufferLength contains the required minimum length to perform the operation successfully.\n\n @see eos_ecom.h\n @see EOS_LOCALECODE_MAX_LENGTH"] pub fn EOS_Platform_GetOverrideLocaleCode (Handle : EOS_HPlatform , OutBuffer : * mut :: std :: os :: raw :: c_char , InOutBufferLength : * mut i32) -> EOS_EResult ; } extern "C" { # [doc = " Set the override country code that the SDK will send to services which require it.\n This is not currently used for anything internally.\n\n @return An EOS_EResult that indicates whether the override country code string was saved.\n         EOS_Success if the country code was overridden\n         EOS_InvalidParameters if you pass an invalid country code\n\n @see eos_ecom.h\n @see EOS_COUNTRYCODE_MAX_LENGTH"] pub fn EOS_Platform_SetOverrideCountryCode (Handle : EOS_HPlatform , NewCountryCode : * const :: std :: os :: raw :: c_char) -> EOS_EResult ; } extern "C" { # [doc = " Set the override locale code that the SDK will send to services which require it.\n This is used for localization. This follows ISO 639.\n\n @return An EOS_EResult that indicates whether the override locale code string was saved.\n         EOS_Success if the locale code was overridden\n         EOS_InvalidParameters if you pass an invalid locale code\n\n @see eos_ecom.h\n @see EOS_LOCALECODE_MAX_LENGTH"] pub fn EOS_Platform_SetOverrideLocaleCode (Handle : EOS_HPlatform , NewLocaleCode : * const :: std :: os :: raw :: c_char) -> EOS_EResult ; } extern "C" { # [doc = " Checks if the app was launched through the Epic Games Launcher, and relaunches it through the Epic Games Launcher if it wasn't.\n\n NOTE: During the call to EOS_Platform_Create, the command line that was used to launch the app is inspected, and if it is\n recognized as coming from the Epic Games Launcher, an environment variable is set to 1. The name of the environment variable\n is defined by EOS_PLATFORM_CHECKFORLAUNCHERANDRESTART_ENV_VAR.\n\n You can force the EOS_Platform_CheckForLauncherAndRestart API to relaunch the title by\n explicitly unsetting this environment variable before calling EOS_Platform_CheckForLauncherAndRestart.\n\n @return An EOS_EResult is returned to indicate success or an error.\n\n EOS_Success is returned if the app is being restarted. You should quit your process as soon as possible.\n EOS_NoChange is returned if the app was already launched through the Epic Launcher, and no action needs to be taken.\n EOS_UnexpectedError is returned if the LauncherCheck module failed to initialize, or the module tried and failed to restart the app."] pub fn EOS_Platform_CheckForLauncherAndRestart (Handle : EOS_HPlatform) -> EOS_EResult ; } extern "C" { # [doc = " Windows only.\n Checks that the application is ready to use desktop crossplay functionality, with the necessary prerequisites having been met.\n\n This function verifies that the application was launched through the Bootstrapper application,\n the redistributable service has been installed and is running in the background,\n and that the overlay has been loaded successfully.\n\n On Windows, the desktop crossplay functionality is required to use Epic accounts login\n with applications that are distributed outside the Epic Games Store.\n\n @param Options input structure that specifies the API version.\n @param OutDesktopCrossplayStatusInfo output structure to receive the desktop crossplay status information.\n\n @return An EOS_EResult is returned to indicate success or an error.\n\t\t   EOS_NotImplemented is returned on non-Windows platforms."] pub fn EOS_Platform_GetDesktopCrossplayStatus (Handle : EOS_HPlatform , Options : * const EOS_Platform_GetDesktopCrossplayStatusOptions , OutDesktopCrossplayStatusInfo : * mut EOS_Platform_DesktopCrossplayStatusInfo) -> EOS_EResult ; } extern "C" { # [doc = " Notify a change in application state.\n\n @note Calling SetApplicationStatus must happen before Tick when foregrounding for the cases where we won't get the background notification.\n\n @param NewStatus The new status for the application.\n\n @return An EOS_EResult that indicates whether we changed the application status successfully.\n         EOS_Success if the application was changed successfully.\n         EOS_InvalidParameters if the value of NewStatus is invalid.\n         EOS_NotImplemented if EOS_AS_BackgroundConstrained or EOS_AS_BackgroundUnconstrained are attempted to be set on platforms that do not have such application states."] pub fn EOS_Platform_SetApplicationStatus (Handle : EOS_HPlatform , NewStatus : EOS_EApplicationStatus) -> EOS_EResult ; } extern "C" { # [doc = " Retrieves the current application state as told to the SDK by the application.\n\n @return The current application status."] pub fn EOS_Platform_GetApplicationStatus (Handle : EOS_HPlatform) -> EOS_EApplicationStatus ; } extern "C" { # [doc = " Notify a change in network state.\n\n @param NewStatus The new network status.\n\n @return An EOS_EResult that indicates whether we changed the network status successfully.\n         EOS_Success if the network was changed successfully.\n         EOS_InvalidParameters if the value of NewStatus is invalid."] pub fn EOS_Platform_SetNetworkStatus (Handle : EOS_HPlatform , NewStatus : EOS_ENetworkStatus) -> EOS_EResult ; } extern "C" { # [doc = " Retrieves the current network state as told to the SDK by the application.\n\n @return The current network status."] pub fn EOS_Platform_GetNetworkStatus (Handle : EOS_HPlatform) -> EOS_ENetworkStatus ; }